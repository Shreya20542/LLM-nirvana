# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import monad_try as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = False
    try_0 = module_0.Try(bool_0, bool_0)
    assert (
        f"{type(module_0.Try.of).__module__}.{type(module_0.Try.of).__qualname__}"
        == "builtins.method"
    )
    none_type_0 = None
    bool_1 = try_0.__eq__(none_type_0)
    assert bool_1 is False
    var_0 = try_0.filter(try_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "monad_try.Try"
    assert var_0.value is False
    assert var_0.is_success is False
    var_1 = try_0.map(var_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "monad_try.Try"
    assert var_1.value is False
    assert var_1.is_success is False
    var_2 = var_0.get()
    var_3 = try_0.bind(var_2)
    assert f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "monad_try.Try"
    assert var_3.value is False
    assert var_3.is_success is False
    str_0 = var_3.__str__()
    assert str_0 == "Try[value=False, is_success=False]"
    var_4 = var_1.on_success(bool_0)
    assert f"{type(var_4).__module__}.{type(var_4).__qualname__}" == "monad_try.Try"
    assert var_4.value is False
    assert var_4.is_success is False
    try_1 = module_0.Try(bool_0, bool_0)
    bool_2 = var_1.__eq__(var_0)
    assert bool_2 is True
    try_1.on_fail(bool_0)


def test_case_1():
    bytes_0 = b"b\x95\x8c\xd8\x98\x86\x82u8\x15W\xa0m>\xe2\xees4y\x8a"
    none_type_0 = None
    try_0 = module_0.Try(bytes_0, none_type_0)
    assert (
        f"{type(module_0.Try.of).__module__}.{type(module_0.Try.of).__qualname__}"
        == "builtins.method"
    )
    var_0 = try_0.get()
    bool_0 = try_0.__eq__(none_type_0)
    assert bool_0 is False


@pytest.mark.xfail(strict=True)
def test_case_2():
    int_0 = -2911
    none_type_0 = None
    try_0 = module_0.Try(int_0, none_type_0)
    assert (
        f"{type(module_0.Try.of).__module__}.{type(module_0.Try.of).__qualname__}"
        == "builtins.method"
    )
    var_0 = try_0.filter(none_type_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "monad_try.Try"
    assert var_0.value == -2911
    assert var_0.is_success is False
    var_1 = var_0.map(int_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "monad_try.Try"
    assert var_1.value == -2911
    assert var_1.is_success is False
    try_1 = module_0.Try(int_0, var_0)
    try_1.filter(try_1)


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    bool_0 = True
    try_0 = module_0.Try(bool_0, bool_0)
    assert (
        f"{type(module_0.Try.of).__module__}.{type(module_0.Try.of).__qualname__}"
        == "builtins.method"
    )
    try_0.bind(none_type_0)


def test_case_4():
    bytes_0 = b"\x80.\x93\xcfw\x030"
    bool_0 = True
    try_0 = module_0.Try(bytes_0, bool_0)
    assert (
        f"{type(module_0.Try.of).__module__}.{type(module_0.Try.of).__qualname__}"
        == "builtins.method"
    )
    var_0 = try_0.get()
    list_0 = []
    bool_1 = False
    try_1 = module_0.Try(list_0, bool_1)
    var_1 = try_1.filter(var_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "monad_try.Try"
    assert var_1.value == []
    assert var_1.is_success is False
    bool_2 = True
    try_2 = module_0.Try(bytes_0, bool_2)
    var_2 = try_1.bind(try_0)
    assert f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "monad_try.Try"
    assert var_2.value == []
    assert var_2.is_success is False
    str_0 = var_1.__str__()
    assert str_0 == "Try[value=[], is_success=False]"
    var_3 = var_2.get()
    bool_3 = try_1.__eq__(var_3)
    assert bool_3 is False


@pytest.mark.xfail(strict=True)
def test_case_5():
    bool_0 = False
    try_0 = module_0.Try(bool_0, bool_0)
    assert (
        f"{type(module_0.Try.of).__module__}.{type(module_0.Try.of).__qualname__}"
        == "builtins.method"
    )
    none_type_0 = None
    bool_1 = try_0.__eq__(none_type_0)
    assert bool_1 is False
    try_1 = module_0.Try(try_0, try_0)
    try_1.on_success(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bool_0 = False
    try_0 = module_0.Try(bool_0, bool_0)
    assert (
        f"{type(module_0.Try.of).__module__}.{type(module_0.Try.of).__qualname__}"
        == "builtins.method"
    )
    none_type_0 = None
    bool_1 = try_0.__eq__(none_type_0)
    assert bool_1 is False
    var_0 = try_0.on_success(none_type_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "monad_try.Try"
    assert var_0.value is False
    assert var_0.is_success is False
    try_0.on_fail(try_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    none_type_0 = None
    bytes_0 = b"\x8e\x04\xd3z\x1c\xbd\xf2\xb1\xd0+\xb9\xc1\x8a\x87\xb8\xc2"
    try_0 = module_0.Try(bytes_0, bytes_0)
    assert (
        f"{type(module_0.Try.of).__module__}.{type(module_0.Try.of).__qualname__}"
        == "builtins.method"
    )
    var_0 = try_0.on_fail(none_type_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "monad_try.Try"
    assert var_0.value == b"\x8e\x04\xd3z\x1c\xbd\xf2\xb1\xd0+\xb9\xc1\x8a\x87\xb8\xc2"
    assert (
        var_0.is_success
        == b"\x8e\x04\xd3z\x1c\xbd\xf2\xb1\xd0+\xb9\xc1\x8a\x87\xb8\xc2"
    )
    var_1 = var_0.get()
    bool_0 = try_0.__eq__(bytes_0)
    assert bool_0 is False
    try_1 = module_0.Try(var_1, bool_0)
    var_1.get()


@pytest.mark.xfail(strict=True)
def test_case_8():
    int_0 = -2911
    bool_0 = True
    try_0 = module_0.Try(int_0, bool_0)
    assert (
        f"{type(module_0.Try.of).__module__}.{type(module_0.Try.of).__qualname__}"
        == "builtins.method"
    )
    try_0.filter(try_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    none_type_0 = None
    try_0 = module_0.Try(none_type_0, none_type_0)
    assert (
        f"{type(module_0.Try.of).__module__}.{type(module_0.Try.of).__qualname__}"
        == "builtins.method"
    )
    var_0 = try_0.filter(none_type_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "monad_try.Try"
    assert var_0.value is None
    assert var_0.is_success is False
    try_1 = module_0.Try(var_0, var_0)
    try_1.filter(try_1)


def test_case_10():
    int_0 = -2911
    bool_0 = True
    try_0 = module_0.Try(int_0, bool_0)
    assert (
        f"{type(module_0.Try.of).__module__}.{type(module_0.Try.of).__qualname__}"
        == "builtins.method"
    )
    var_0 = try_0.get_or_else(int_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    dict_0 = {}
    bool_0 = True
    none_type_0 = None
    try_0 = module_0.Try(bool_0, dict_0)
    assert (
        f"{type(module_0.Try.of).__module__}.{type(module_0.Try.of).__qualname__}"
        == "builtins.method"
    )
    var_0 = try_0.get_or_else(none_type_0)
    var_0.on_success(dict_0)


def test_case_12():
    bool_0 = True
    try_0 = module_0.Try(bool_0, bool_0)
    assert (
        f"{type(module_0.Try.of).__module__}.{type(module_0.Try.of).__qualname__}"
        == "builtins.method"
    )


@pytest.mark.xfail(strict=True)
def test_case_13():
    bytes_0 = b'O\xd2.r\xfa\xbe"\xfcb\xfc*/I:f\xe1\xfe'
    try_0 = module_0.Try(bytes_0, bytes_0)
    assert (
        f"{type(module_0.Try.of).__module__}.{type(module_0.Try.of).__qualname__}"
        == "builtins.method"
    )
    str_0 = try_0.__str__()
    assert (
        str_0
        == "Try[value=b'O\\xd2.r\\xfa\\xbe\"\\xfcb\\xfc*/I:f\\xe1\\xfe', is_success=b'O\\xd2.r\\xfa\\xbe\"\\xfcb\\xfc*/I:f\\xe1\\xfe']"
    )
    var_0 = try_0.on_fail(str_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "monad_try.Try"
    assert var_0.value == b'O\xd2.r\xfa\xbe"\xfcb\xfc*/I:f\xe1\xfe'
    assert var_0.is_success == b'O\xd2.r\xfa\xbe"\xfcb\xfc*/I:f\xe1\xfe'
    try_0.on_success(var_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    bytes_0 = b"\x80.\x93\xcfw\x030"
    bool_0 = True
    try_0 = module_0.Try(bytes_0, bool_0)
    assert (
        f"{type(module_0.Try.of).__module__}.{type(module_0.Try.of).__qualname__}"
        == "builtins.method"
    )
    var_0 = try_0.get()
    list_0 = []
    bool_1 = False
    try_1 = module_0.Try(list_0, bool_1)
    var_1 = try_1.filter(var_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "monad_try.Try"
    assert var_1.value == []
    assert var_1.is_success is False
    bool_2 = True
    try_2 = module_0.Try(bytes_0, bool_2)
    try_2.map(try_1)


@pytest.mark.xfail(strict=True)
def test_case_15():
    bytes_0 = b"\xc3~\x96y:\xe9\x98\xb6\xcc\xe7\xb5\xd7r"
    bool_0 = False
    try_0 = module_0.Try(bytes_0, bool_0)
    assert (
        f"{type(module_0.Try.of).__module__}.{type(module_0.Try.of).__qualname__}"
        == "builtins.method"
    )
    var_0 = try_0.get()
    list_0 = []
    bool_1 = False
    try_1 = module_0.Try(list_0, bool_1)
    var_1 = try_1.filter(var_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "monad_try.Try"
    assert var_1.value == []
    assert var_1.is_success is False
    bool_2 = True
    try_2 = module_0.Try(bytes_0, bool_2)
    var_2 = try_1.filter(var_1)
    assert var_2.is_success is False
    var_3 = var_1.map(var_0)
    assert f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "monad_try.Try"
    assert var_3.value == []
    assert var_3.is_success is False
    bool_3 = True
    try_3 = module_0.Try(var_3, bool_3)
    var_4 = try_2.get_or_else(list_0)
    assert var_4 == b"\xc3~\x96y:\xe9\x98\xb6\xcc\xe7\xb5\xd7r"
    var_5 = try_0.bind(var_3)
    assert f"{type(var_5).__module__}.{type(var_5).__qualname__}" == "monad_try.Try"
    assert var_5.value == b"\xc3~\x96y:\xe9\x98\xb6\xcc\xe7\xb5\xd7r"
    assert var_5.is_success is False
    bool_4 = try_2.__eq__(try_3)
    assert bool_4 is False
    var_6 = try_3.on_fail(bool_1)
    assert f"{type(var_6).__module__}.{type(var_6).__qualname__}" == "monad_try.Try"
    assert (
        f"{type(var_6.value).__module__}.{type(var_6.value).__qualname__}"
        == "monad_try.Try"
    )
    assert var_6.is_success is True
    bool_5 = False
    try_4 = module_0.Try(bool_2, bool_5)
    var_7 = var_5.get()
    var_4.on_success(var_1)
