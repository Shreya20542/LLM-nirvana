# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import rest as module_0
import common as module_1


def test_case_0():
    str_0 = "I9$1Eo\x0c\rCA.te`C#"
    docstring_0 = module_0.parse(str_0)
    assert (
        f"{type(docstring_0).__module__}.{type(docstring_0).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_0.short_description == "I9$1Eo\x0c\rCA.te`C#"
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []


def test_case_1():
    str_0 = ""
    docstring_0 = module_0.parse(str_0)


def test_case_2():
    str_0 = " :lj C~y@\x0b:P\nM{#|X"
    docstring_0 = module_0.parse(str_0)
    assert (
        f"{type(docstring_0).__module__}.{type(docstring_0).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_0.short_description is None
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert (
        f"{type(docstring_0.meta).__module__}.{type(docstring_0.meta).__qualname__}"
        == "builtins.list"
    )
    assert len(docstring_0.meta) == 1


def test_case_3():
    str_0 = "Vx\tt\n%%VBcV5'vNQI"
    docstring_0 = module_0.parse(str_0)
    assert (
        f"{type(docstring_0).__module__}.{type(docstring_0).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_0.short_description == "Vx      t"
    assert docstring_0.long_description == "%%VBcV5'vNQI"
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    str_1 = ""
    docstring_1 = module_0.parse(str_1)


def test_case_4():
    str_0 = ":kH"
    with pytest.raises(module_1.ParseError):
        module_0.parse(str_0)


def test_case_5():
    str_0 = "+\n::"
    with pytest.raises(module_1.ParseError):
        module_0.parse(str_0)


def test_case_6():
    str_0 = " :lj C~y@\x0b:\nM{#|X"
    docstring_0 = module_0.parse(str_0)
    assert (
        f"{type(docstring_0).__module__}.{type(docstring_0).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_0.short_description is None
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert (
        f"{type(docstring_0.meta).__module__}.{type(docstring_0.meta).__qualname__}"
        == "builtins.list"
    )
    assert len(docstring_0.meta) == 1
