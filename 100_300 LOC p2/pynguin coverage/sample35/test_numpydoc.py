# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import numpydoc as module_0
import ast as module_1
import tokenize as module_2
import inspect as module_3


@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = "GU4*{Qs<r/ft&5"
    raises_section_0 = module_0.RaisesSection(str_0, str_0)
    iterable_0 = raises_section_0.parse(str_0)
    module_0.NumpydocParser(iterable_0)


def test_case_1():
    numpydoc_parser_0 = module_0.NumpydocParser()
    assert (
        f"{type(numpydoc_parser_0).__module__}.{type(numpydoc_parser_0).__qualname__}"
        == "numpydoc.NumpydocParser"
    )
    assert (
        f"{type(numpydoc_parser_0.sections).__module__}.{type(numpydoc_parser_0.sections).__qualname__}"
        == "builtins.dict"
    )
    assert len(numpydoc_parser_0.sections) == 31
    assert (
        f"{type(numpydoc_parser_0.titles_re).__module__}.{type(numpydoc_parser_0.titles_re).__qualname__}"
        == "re.Pattern"
    )


def test_case_2():
    str_0 = "zYR1_AH<iz^|[YiD"
    docstring_0 = module_0.parse(str_0)
    assert (
        f"{type(docstring_0).__module__}.{type(docstring_0).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_0.short_description == "zYR1_AH<iz^|[YiD"
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []


def test_case_3():
    str_0 = "T"
    section_0 = module_0.Section(str_0, str_0)
    assert (
        f"{type(module_0.Section.title_pattern).__module__}.{type(module_0.Section.title_pattern).__qualname__}"
        == "builtins.property"
    )
    none_type_0 = None
    docstring_0 = module_0.parse(none_type_0)
    assert (
        f"{type(docstring_0).__module__}.{type(docstring_0).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_0.short_description is None
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []


@pytest.mark.xfail(strict=True)
def test_case_4():
    numpydoc_parser_0 = module_0.NumpydocParser()
    assert (
        f"{type(numpydoc_parser_0).__module__}.{type(numpydoc_parser_0).__qualname__}"
        == "numpydoc.NumpydocParser"
    )
    assert (
        f"{type(numpydoc_parser_0.sections).__module__}.{type(numpydoc_parser_0.sections).__qualname__}"
        == "builtins.dict"
    )
    assert len(numpydoc_parser_0.sections) == 31
    assert (
        f"{type(numpydoc_parser_0.titles_re).__module__}.{type(numpydoc_parser_0.titles_re).__qualname__}"
        == "re.Pattern"
    )
    str_0 = "OJO+U<o%qNZA\x0ciq"
    docstring_0 = numpydoc_parser_0.parse(str_0)
    assert (
        f"{type(docstring_0).__module__}.{type(docstring_0).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_0.short_description == "OJO+U<o%qNZA\x0ciq"
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    numpydoc_parser_0.add_section(numpydoc_parser_0)


def test_case_5():
    str_0 = "!a>8fSZK\nQ"
    docstring_0 = module_0.parse(str_0)
    assert (
        f"{type(docstring_0).__module__}.{type(docstring_0).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_0.short_description == "!a>8fSZK"
    assert docstring_0.long_description == "Q"
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []


@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = "z"
    docstring_0 = module_0.parse(str_0)
    assert (
        f"{type(docstring_0).__module__}.{type(docstring_0).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_0.short_description == "z"
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    str_1 = "!L>CfSZK\n\t"
    docstring_1 = module_0.parse(str_1)
    assert (
        f"{type(docstring_1).__module__}.{type(docstring_1).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_1.short_description == "!L>CfSZK"
    assert docstring_1.long_description is None
    assert docstring_1.blank_after_short_description is False
    assert docstring_1.blank_after_long_description is False
    assert docstring_1.meta == []
    docstring_1.add_section(str_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = '14:T"8f32Bvr\x0c\rz~!'
    returns_section_0 = module_0.ReturnsSection(str_0, str_0)
    str_1 = "=U4*{s<r/ft&"
    iterable_0 = returns_section_0.parse(str_0)
    var_0 = iterable_0.__iter__()
    docstring_0 = module_0.parse(str_1)
    assert (
        f"{type(docstring_0).__module__}.{type(docstring_0).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_0.short_description == "=U4*{s<r/ft&"
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    str_2 = module_1.Str(*var_0)
    assert f"{type(str_2).__module__}.{type(str_2).__qualname__}" == "ast.Constant"
    assert (
        f"{type(str_2.value).__module__}.{type(str_2.value).__qualname__}"
        == "common.DocstringReturns"
    )
    k_v_section_0 = module_0._KVSection(var_0, str_2)
    numpydoc_parser_0 = module_0.NumpydocParser(iterable_0)
    numpydoc_parser_0.parse(str_1)


@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = "e/y\x0bOf`mU`C+*2LsN{^`"
    str_1 = "3\nY9lE.+="
    docstring_0 = module_0.parse(str_1)
    assert (
        f"{type(docstring_0).__module__}.{type(docstring_0).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_0.short_description == "3"
    assert docstring_0.long_description == "Y9lE.+="
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    deprecation_section_0 = module_0.DeprecationSection(str_0, str_0)
    iterable_0 = deprecation_section_0.parse(str_0)
    var_0 = iterable_0.__iter__()
    numpydoc_parser_0 = module_0.NumpydocParser()
    docstring_1 = module_0.parse(str_1)
    assert docstring_1.short_description == "3"
    assert docstring_1.long_description == "Y9lE.+="
    assert docstring_1.blank_after_short_description is False
    assert docstring_1.blank_after_long_description is False
    numpydoc_parser_1 = module_0.NumpydocParser()
    module_0.NumpydocParser(iterable_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = "38TDAJq}8v="
    str_1 = "GU4*{Qs<r/ft&5"
    none_type_0 = None
    sphinx_section_0 = module_0._SphinxSection(str_1, none_type_0)
    assert (
        f"{type(module_0._SphinxSection.title_pattern).__module__}.{type(module_0._SphinxSection.title_pattern).__qualname__}"
        == "builtins.property"
    )
    param_section_0 = module_0.ParamSection(str_0, str_0)
    raises_section_0 = module_0.RaisesSection(str_0, str_0)
    str_2 = "mH|"
    iterable_0 = raises_section_0.parse(str_2)
    none_type_1 = None
    iterable_1 = raises_section_0.parse(none_type_1)
    iterable_2 = sphinx_section_0.parse(sphinx_section_0)
    module_0.NumpydocParser(iterable_2)


@pytest.mark.xfail(strict=True)
def test_case_10():
    str_0 = "3\nY9lE.+="
    docstring_0 = module_0.parse(str_0)
    assert (
        f"{type(docstring_0).__module__}.{type(docstring_0).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_0.short_description == "3"
    assert docstring_0.long_description == "Y9lE.+="
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    deprecation_section_0 = module_0.DeprecationSection(str_0, str_0)
    iterable_0 = deprecation_section_0.parse(str_0)
    var_0 = iterable_0.__iter__()
    numpydoc_parser_0 = module_0.NumpydocParser()
    module_0.NumpydocParser(iterable_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    str_0 = "?l#I/"
    returns_section_0 = module_0.ReturnsSection(str_0, str_0)
    iterable_0 = returns_section_0.parse(str_0)
    module_0.NumpydocParser(iterable_0)


@pytest.mark.xfail(strict=True)
def test_case_12():
    str_0 = "&g01gr\x0bxg+F-\ny"
    param_section_0 = module_0.ParamSection(str_0, str_0)
    iterable_0 = param_section_0.parse(str_0)
    module_0.NumpydocParser(iterable_0)


@pytest.mark.xfail(strict=True)
def test_case_13():
    str_0 = ";.~rK:d"
    param_section_0 = module_0.ParamSection(str_0, str_0)
    iterable_0 = param_section_0.parse(str_0)
    module_0.NumpydocParser(iterable_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    str_0 = "VPA\\h+DcY@I60"
    param_section_0 = module_0.ParamSection(str_0, str_0)
    iterable_0 = param_section_0.parse(str_0)
    module_0.NumpydocParser(iterable_0)


@pytest.mark.xfail(strict=True)
def test_case_15():
    str_0 = '14:T"8f32Bvr\x0c\rz~!'
    none_type_0 = None
    numpydoc_parser_0 = module_0.NumpydocParser(none_type_0)
    assert (
        f"{type(numpydoc_parser_0).__module__}.{type(numpydoc_parser_0).__qualname__}"
        == "numpydoc.NumpydocParser"
    )
    assert (
        f"{type(numpydoc_parser_0.sections).__module__}.{type(numpydoc_parser_0.sections).__qualname__}"
        == "builtins.dict"
    )
    assert len(numpydoc_parser_0.sections) == 31
    assert (
        f"{type(numpydoc_parser_0.titles_re).__module__}.{type(numpydoc_parser_0.titles_re).__qualname__}"
        == "re.Pattern"
    )
    returns_section_0 = module_0.ReturnsSection(str_0, str_0)
    iterable_0 = returns_section_0.parse(returns_section_0)
    str_1 = "=U4*{s<r/ft&"
    untokenizer_0 = module_2.Untokenizer()
    str_2 = "]F!h"
    str_3 = "6*1Fv"
    docstring_0 = module_3.formatannotation(returns_section_0, str_1)
    iterable_1 = returns_section_0.parse(docstring_0)
    var_0 = iterable_0.__iter__()
    str_4 = "&g01gr\x0bxg+F-\ny"
    sphinx_section_0 = module_0._SphinxSection(str_4, str_3)
    str_5 = "#LsZ-]:F\x0c 6#vwg*p"
    str_6 = "a9>}u"
    param_section_0 = module_0.ParamSection(str_5, str_6)
    yields_section_0 = module_0.YieldsSection(returns_section_0, str_1)
    assert module_0.YieldsSection.is_generator is True
    docstring_1 = module_0.parse(str_2)
    assert (
        f"{type(docstring_1).__module__}.{type(docstring_1).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_1.short_description == "]F!h"
    assert docstring_1.long_description is None
    assert docstring_1.blank_after_short_description is False
    assert docstring_1.blank_after_long_description is False
    assert docstring_1.meta == []
    k_v_section_0 = module_0._KVSection(str_2, str_0)
    numpydoc_parser_1 = module_0.NumpydocParser()
    iterable_2 = k_v_section_0.parse(str_4)
    var_1 = iterable_1.__iter__()
    str_7 = module_1.Str()
    k_v_section_1 = module_0._KVSection(yields_section_0, str_6)
    module_0.NumpydocParser(iterable_2)


@pytest.mark.xfail(strict=True)
def test_case_16():
    str_0 = 'Qr(+p{<zUc\x0ci\n\x0c^"VU'
    returns_section_0 = module_0.ReturnsSection(str_0, str_0)
    iterable_0 = returns_section_0.parse(returns_section_0)
    str_1 = "=U4*{s<r/ft&"
    str_2 = "]F!h"
    none_type_0 = None
    docstring_0 = module_0.parse(none_type_0)
    assert (
        f"{type(docstring_0).__module__}.{type(docstring_0).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_0.short_description is None
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    iterable_1 = returns_section_0.parse(str_2)
    str_3 = "&g01gr\x0bxg+F-\ny"
    param_section_0 = module_0.ParamSection(iterable_1, str_1)
    str_4 = "Iq.q2({y\t"
    docstring_1 = module_0.parse(str_3)
    assert (
        f"{type(docstring_1).__module__}.{type(docstring_1).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_1.short_description == "&g01gr\x0bxg+F-"
    assert docstring_1.long_description == "y"
    assert docstring_1.blank_after_short_description is False
    assert docstring_1.blank_after_long_description is False
    assert docstring_1.meta == []
    numpydoc_parser_0 = module_0.NumpydocParser()
    iterable_2 = param_section_0.parse(str_0)
    var_0 = iterable_2.__iter__()
    iterable_3 = returns_section_0.parse(str_4)
    k_v_section_0 = module_0._KVSection(str_3, docstring_0)
    module_0.NumpydocParser(iterable_2)
