# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import common as module_0


def test_case_0():
    docstring_0 = module_0.Docstring()
    assert module_0.PARAM_KEYWORDS == {
        "argument",
        "attribute",
        "key",
        "arg",
        "parameter",
        "keyword",
        "param",
    }
    assert module_0.RAISES_KEYWORDS == {"except", "exception", "raises", "raise"}
    assert module_0.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_0.YIELDS_KEYWORDS == {"yield", "yields"}
    assert (
        f"{type(module_0.Docstring.params).__module__}.{type(module_0.Docstring.params).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.raises).__module__}.{type(module_0.Docstring.raises).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.returns).__module__}.{type(module_0.Docstring.returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.deprecation).__module__}.{type(module_0.Docstring.deprecation).__qualname__}"
        == "builtins.property"
    )


def test_case_1():
    none_type_0 = None
    str_0 = "AG\nF|-#AfC+="
    docstring_param_0 = module_0.DocstringParam(
        none_type_0, none_type_0, str_0, none_type_0, none_type_0, str_0
    )
    assert (
        f"{type(docstring_param_0).__module__}.{type(docstring_param_0).__qualname__}"
        == "common.DocstringParam"
    )
    assert docstring_param_0.args is None
    assert docstring_param_0.description is None
    assert docstring_param_0.arg_name == "AG\nF|-#AfC+="
    assert docstring_param_0.type_name is None
    assert docstring_param_0.is_optional is None
    assert docstring_param_0.default == "AG\nF|-#AfC+="
    assert module_0.PARAM_KEYWORDS == {
        "argument",
        "attribute",
        "key",
        "arg",
        "parameter",
        "keyword",
        "param",
    }
    assert module_0.RAISES_KEYWORDS == {"except", "exception", "raises", "raise"}
    assert module_0.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_0.YIELDS_KEYWORDS == {"yield", "yields"}


def test_case_2():
    tuple_0 = ()
    list_0 = [tuple_0]
    str_0 = "\x0c2l;ox-U\\dYk#[8!GQ7"
    none_type_0 = None
    docstring_returns_0 = module_0.DocstringReturns(
        tuple_0, str_0, str_0, none_type_0, none_type_0
    )
    assert (
        f"{type(docstring_returns_0).__module__}.{type(docstring_returns_0).__qualname__}"
        == "common.DocstringReturns"
    )
    assert docstring_returns_0.args == ()
    assert docstring_returns_0.description == "\x0c2l;ox-U\\dYk#[8!GQ7"
    assert docstring_returns_0.type_name == "\x0c2l;ox-U\\dYk#[8!GQ7"
    assert docstring_returns_0.is_generator is None
    assert docstring_returns_0.return_name is None
    assert module_0.PARAM_KEYWORDS == {
        "argument",
        "attribute",
        "key",
        "arg",
        "parameter",
        "keyword",
        "param",
    }
    assert module_0.RAISES_KEYWORDS == {"except", "exception", "raises", "raise"}
    assert module_0.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_0.YIELDS_KEYWORDS == {"yield", "yields"}
    bool_0 = False
    docstring_returns_1 = module_0.DocstringReturns(list_0, str_0, tuple_0, bool_0)
    assert docstring_returns_1.args == [()]
    assert docstring_returns_1.description == "\x0c2l;ox-U\\dYk#[8!GQ7"


def test_case_3():
    dict_0 = {}
    parse_error_0 = module_0.ParseError(**dict_0)
    assert module_0.PARAM_KEYWORDS == {
        "argument",
        "attribute",
        "key",
        "arg",
        "parameter",
        "keyword",
        "param",
    }
    assert module_0.RAISES_KEYWORDS == {"except", "exception", "raises", "raise"}
    assert module_0.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_0.YIELDS_KEYWORDS == {"yield", "yields"}
    str_0 = "`Js$s0"
    str_1 = "'T?5y"
    list_0 = [str_0, str_0, str_1]
    none_type_0 = None
    docstring_raises_0 = module_0.DocstringRaises(list_0, none_type_0, str_1)
    assert (
        f"{type(docstring_raises_0).__module__}.{type(docstring_raises_0).__qualname__}"
        == "common.DocstringRaises"
    )
    assert docstring_raises_0.args == ["`Js$s0", "`Js$s0", "'T?5y"]
    assert docstring_raises_0.description is None
    assert docstring_raises_0.type_name == "'T?5y"
    str_2 = "xu;:g3-?"
    list_1 = [str_2, str_2]
    none_type_1 = None
    docstring_returns_0 = module_0.DocstringReturns(
        list_1, list_1, none_type_1, none_type_1, str_2
    )
    assert (
        f"{type(docstring_returns_0).__module__}.{type(docstring_returns_0).__qualname__}"
        == "common.DocstringReturns"
    )
    assert docstring_returns_0.args == ["xu;:g3-?", "xu;:g3-?"]
    assert docstring_returns_0.description == ["xu;:g3-?", "xu;:g3-?"]
    assert docstring_returns_0.type_name is None
    assert docstring_returns_0.is_generator is None
    assert docstring_returns_0.return_name == "xu;:g3-?"


def test_case_4():
    str_0 = '<NW\nEkEcU9!Ryj<"iCW'
    str_1 = "fZIv KKO:|w3S-"
    list_0 = [str_0, str_1, str_0]
    docstring_deprecated_0 = module_0.DocstringDeprecated(list_0, list_0, str_1)
    assert (
        f"{type(docstring_deprecated_0).__module__}.{type(docstring_deprecated_0).__qualname__}"
        == "common.DocstringDeprecated"
    )
    assert docstring_deprecated_0.args == [
        '<NW\nEkEcU9!Ryj<"iCW',
        "fZIv KKO:|w3S-",
        '<NW\nEkEcU9!Ryj<"iCW',
    ]
    assert docstring_deprecated_0.description == [
        '<NW\nEkEcU9!Ryj<"iCW',
        "fZIv KKO:|w3S-",
        '<NW\nEkEcU9!Ryj<"iCW',
    ]
    assert docstring_deprecated_0.version == "fZIv KKO:|w3S-"
    assert module_0.PARAM_KEYWORDS == {
        "argument",
        "attribute",
        "key",
        "arg",
        "parameter",
        "keyword",
        "param",
    }
    assert module_0.RAISES_KEYWORDS == {"except", "exception", "raises", "raise"}
    assert module_0.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_0.YIELDS_KEYWORDS == {"yield", "yields"}
