# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import manipulation as module_0
import errors as module_1
import zlib as module_2
import base64 as module_3
import re as module_4
import enum as module_5


def test_case_0():
    string_compressor_0 = module_0.__StringCompressor()
    assert (
        f"{type(module_0.__StringCompressor.compress).__module__}.{type(module_0.__StringCompressor.compress).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.__StringCompressor.decompress).__module__}.{type(module_0.__StringCompressor.decompress).__qualname__}"
        == "builtins.method"
    )


@pytest.mark.xfail(strict=True)
def test_case_1():
    int_0 = -393
    module_0.roman_encode(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = "Dl\r<F.sOv.'J}M_u"
    str_1 = module_0.reverse(str_0)
    assert str_1 == "u_M}J'.vOs.F<\rlD"
    str_2 = "%frR\n%p"
    str_3 = module_0.reverse(str_2)
    assert str_3 == "p%\nRrf%"
    str_4 = module_0.prettify(str_0)
    assert str_4 == "Dl\r<F. SOv. 'J}M_u"
    str_5 = module_0.shuffle(str_0)
    str_6 = "I\r%iHA>+{dZ8!*S)u"
    module_0.roman_encode(str_6)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "8~z_JLHNkk)@r\n._c(["
    module_0.roman_decode(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "WP!IKpBX~"
    int_0 = 28
    module_0.compress(str_0, compression_level=int_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bool_0 = False
    module_0.compress(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = ".d[7}l&*X\n"
    str_1 = module_0.shuffle(str_0)
    string_compressor_0 = module_0.__StringCompressor()
    assert (
        f"{type(module_0.__StringCompressor.compress).__module__}.{type(module_0.__StringCompressor.compress).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.__StringCompressor.decompress).__module__}.{type(module_0.__StringCompressor.decompress).__qualname__}"
        == "builtins.method"
    )
    module_0.compress(str_1, compression_level=str_0)


def test_case_7():
    str_0 = "A 9g5P7=uxr"
    str_1 = module_0.prettify(str_0)
    assert str_1 == "A 9g5P7 = uxr"


@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = "^A*Xdq\n$sH*"
    str_1 = module_0.prettify(str_0)
    assert str_1 == "^A * Xdq\n$sH*"
    none_type_0 = None
    module_0.prettify(none_type_0)


def test_case_9():
    str_0 = "A 9g5P7=uxr"
    str_1 = module_0.reverse(str_0)
    assert str_1 == "rxu=7P5g9 A"


def test_case_10():
    complex_0 = 1818.716 + 545.282377j
    with pytest.raises(module_1.InvalidInputError):
        module_0.reverse(complex_0)


def test_case_11():
    str_0 = ";sH4)(jWj5nYBmco~k"
    var_0 = module_0.camel_case_to_snake(str_0)
    assert var_0 == ";sH4)(jWj5nYBmco~k"
    str_1 = module_0.prettify(str_0)
    assert str_1 == ";sH4)(jWj5nYBmco~k"


def test_case_12():
    bool_0 = True
    string_compressor_0 = module_0.__StringCompressor()
    assert (
        f"{type(module_0.__StringCompressor.compress).__module__}.{type(module_0.__StringCompressor.compress).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.__StringCompressor.decompress).__module__}.{type(module_0.__StringCompressor.decompress).__qualname__}"
        == "builtins.method"
    )
    string_compressor_1 = module_0.__StringCompressor()
    string_compressor_2 = module_0.__StringCompressor()
    roman_numbers_0 = module_0.__RomanNumbers()
    assert (
        f"{type(module_0.__RomanNumbers.encode).__module__}.{type(module_0.__RomanNumbers.encode).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.__RomanNumbers.decode).__module__}.{type(module_0.__RomanNumbers.decode).__qualname__}"
        == "builtins.method"
    )
    str_0 = "ghtO=^6X"
    bool_1 = False
    str_1 = module_0.snake_case_to_camel(str_0, bool_1)
    assert str_1 == "ghtO=^6X"
    with pytest.raises(module_1.InvalidInputError):
        module_0.camel_case_to_snake(bool_0)


def test_case_13():
    str_0 = ""
    str_1 = module_0.snake_case_to_camel(str_0)
    assert str_1 == ""


def test_case_14():
    str_0 = ";~l\r\\\x0c62Mc$d5"
    str_1 = module_0.strip_html(str_0)
    assert str_1 == ";~l\r\\\x0c62Mc$d5"
    string_compressor_0 = module_0.__StringCompressor()
    assert (
        f"{type(module_0.__StringCompressor.compress).__module__}.{type(module_0.__StringCompressor.compress).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.__StringCompressor.decompress).__module__}.{type(module_0.__StringCompressor.decompress).__qualname__}"
        == "builtins.method"
    )
    none_type_0 = None
    str_2 = module_0.prettify(str_1)
    assert str_2 == ";~l\r\\\x0c62Mc$d5"
    str_3 = 'U]"<r>_SThGA+hP'
    str_4 = module_0.strip_margin(str_3)
    assert str_4 == 'U]"<r>_SThGA+hP'
    bool_0 = True
    with pytest.raises(module_1.InvalidInputError):
        module_0.snake_case_to_camel(none_type_0, bool_0)


def test_case_15():
    str_0 = "^qXX\t[31S\n](0M"
    str_1 = module_0.shuffle(str_0)
    str_2 = module_0.prettify(str_0)
    assert str_2 == "^qXX\t[31S\n](0M"


def test_case_16():
    bool_0 = True
    with pytest.raises(module_1.InvalidInputError):
        module_0.shuffle(bool_0)


def test_case_17():
    str_0 = "_5"
    str_1 = module_0.strip_html(str_0, str_0)
    assert str_1 == "_5"
    string_compressor_0 = module_0.__StringCompressor()
    assert (
        f"{type(module_0.__StringCompressor.compress).__module__}.{type(module_0.__StringCompressor.compress).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.__StringCompressor.decompress).__module__}.{type(module_0.__StringCompressor.decompress).__qualname__}"
        == "builtins.method"
    )
    none_type_0 = None
    str_2 = module_0.prettify(str_0)
    assert str_2 == "_5"
    str_3 = module_0.snake_case_to_camel(str_1, none_type_0)
    assert str_3 == "5"
    str_4 = module_0.asciify(str_1)
    assert str_4 == "_5"


def test_case_18():
    none_type_0 = None
    with pytest.raises(module_1.InvalidInputError):
        module_0.strip_html(none_type_0)


def test_case_19():
    str_0 = "5-:y*\ropf"
    str_1 = module_0.slugify(str_0, str_0)
    assert str_1 == "55-:y*\ropfy5-:y*\ropfopf"
    str_2 = "OSU1%MBP?uA2D"
    str_3 = "#<7q|rDm*\x0c;}eIU9_G&q"
    str_4 = module_0.reverse(str_3)
    assert str_4 == "q&G_9UIe};\x0c*mDr|q7<#"
    str_5 = module_0.snake_case_to_camel(str_2, separator=str_4)
    assert str_5 == "OSU1%MBP?uA2D"


def test_case_20():
    none_type_0 = None
    with pytest.raises(module_1.InvalidInputError):
        module_0.asciify(none_type_0)


def test_case_21():
    int_0 = 3829
    str_0 = module_0.roman_encode(int_0)
    assert str_0 == "MMMDCCCXXIX"
    bool_0 = True
    str_1 = module_0.strip_html(str_0, bool_0)
    assert str_1 == "MMMDCCCXXIX"
    str_2 = module_0.prettify(str_0)
    assert str_2 == "MMMDCCCXXIX"
    str_3 = "04\"'(qtJ8"
    str_4 = module_0.snake_case_to_camel(str_3, separator=str_0)
    assert str_4 == "04\"'(qtJ8"
    error_0 = module_2.error()
    with pytest.raises(module_1.InvalidInputError):
        module_0.slugify(error_0)


@pytest.mark.xfail(strict=True)
def test_case_22():
    int_0 = 3829
    str_0 = module_0.roman_encode(int_0)
    assert str_0 == "MMMDCCCXXIX"
    bool_0 = False
    str_1 = module_0.strip_html(str_0, bool_0)
    assert str_1 == "MMMDCCCXXIX"
    str_2 = module_0.prettify(str_0)
    assert str_2 == "MMMDCCCXXIX"
    bool_1 = module_0.booleanize(str_0)
    assert bool_1 is False
    str_3 = module_0.slugify(str_2)
    assert str_3 == "mmmdcccxxix"
    var_0 = module_0.camel_case_to_snake(str_2)
    assert var_0 == "MMMDCCCXXIX"
    var_1 = module_3.b85decode(str_2)
    assert var_1 == b"ED\x00\xd7%\xcaY\xc8"
    int_1 = module_0.roman_decode(str_3)
    assert int_1 == 3829
    str_4 = var_0.format()
    assert str_4 == "MMMDCCCXXIX"
    module_0.roman_decode(var_1)


def test_case_23():
    none_type_0 = None
    with pytest.raises(module_1.InvalidInputError):
        module_0.booleanize(none_type_0)


def test_case_24():
    int_0 = 679
    str_0 = module_0.roman_encode(int_0)
    assert str_0 == "DCLXXIX"
    bool_0 = False
    str_1 = module_0.strip_html(str_0, bool_0)
    assert str_1 == "DCLXXIX"
    str_2 = module_0.prettify(str_0)
    assert str_2 == "DCLXXIX"
    bool_1 = module_0.booleanize(str_0)
    assert bool_1 is False
    str_3 = "04\"'(qtJ8"
    str_4 = module_0.snake_case_to_camel(str_3)
    assert str_4 == "04\"'(qtJ8"
    roman_numbers_0 = module_0.__RomanNumbers()
    assert (
        f"{type(module_0.__RomanNumbers.decode).__module__}.{type(module_0.__RomanNumbers.decode).__qualname__}"
        == "builtins.method"
    )
    var_0 = module_3.b85decode(str_2)
    assert var_0 == b"(\xe5\x8b\xdc9"
    with pytest.raises(module_1.InvalidInputError):
        module_0.strip_margin(var_0)


@pytest.mark.xfail(strict=True)
def test_case_25():
    str_0 = "@}+3\x0c+Dj^]HX-"
    str_1 = module_0.compress(str_0)
    assert str_1 == "eNpzqNU25tF2yYqL9YjQBQAYGwOJ"
    module_0.decompress(str_0)


def test_case_26():
    str_0 = "t]v$OaKnD\x0c`r.H/+DH"
    str_1 = module_0.prettify(str_0)
    assert str_1 == "T]v$OaKnD\x0c`r. H /  + DH"


def test_case_27():
    str_0 = "lpXm12b"
    var_0 = module_0.camel_case_to_snake(str_0)
    assert var_0 == "lp_xm12b"
    str_1 = module_0.strip_html(str_0)
    assert str_1 == "lpXm12b"
    var_1 = module_4.template(str_0)
    with pytest.raises(AttributeError):
        var_0.__getattr__(var_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_28():
    str_0 = "wo,xF30Q}\t\r0&KG\x0b2T"
    int_0 = -1929
    module_0.compress(str_0, compression_level=int_0)


def test_case_29():
    str_0 = "-Wq6S7U!Q"
    str_1 = module_0.shuffle(str_0)
    str_2 = "X*Z0pEVfk"
    str_3 = module_0.shuffle(str_2)
    str_4 = "E#j/EWa\"gJDT\x0ch'$&45A"
    str_5 = module_0.strip_html(str_4)
    assert str_5 == "E#j/EWa\"gJDT\x0ch'$&45A"
    str_6 = "t]v$OaKnD\x0cr.H/+DH"
    str_7 = module_0.prettify(str_6)
    assert str_7 == "T]v$OaKnD\x0cr. H /  + DH"


def test_case_30():
    str_0 = "r:{Z@E"
    str_1 = module_0.strip_margin(str_0)
    assert str_1 == "r:{Z@E"
    str_2 = module_0.prettify(str_0)
    assert str_2 == "R: {Z@E"


@pytest.mark.xfail(strict=True)
def test_case_31():
    str_0 = "lpXm12b"
    var_0 = module_0.camel_case_to_snake(str_0)
    assert var_0 == "lp_xm12b"
    var_1 = module_4.match(str_0, str_0)
    var_2 = module_3.urlsafe_b64decode(var_0)
    assert var_2 == b"\x96\x9f\xf1\x9b]\x9b"
    str_1 = '+LPFc]"h^Axt,'
    module_0.compress(str_1, var_2)


@pytest.mark.xfail(strict=True)
def test_case_32():
    str_0 = ""
    bool_0 = True
    str_1 = module_0.strip_html(str_0, bool_0)
    assert str_1 == ""
    str_2 = module_0.slugify(str_0)
    assert str_2 == ""
    module_0.compress(str_0, compression_level=bool_0)


def test_case_33():
    str_0 = "iisV(<(0)g`{@![-vt5#"
    str_1 = module_0.prettify(str_0)
    assert str_1 == "IisV (<(0) g`{@! [ - vt5#"


@pytest.mark.xfail(strict=True)
def test_case_34():
    str_0 = "Y\\k><Z_g3xV"
    module_0.roman_decode(str_0)


def test_case_35():
    int_0 = 3829
    str_0 = module_0.roman_encode(int_0)
    assert str_0 == "MMMDCCCXXIX"
    str_1 = module_0.prettify(str_0)
    assert str_1 == "MMMDCCCXXIX"
    str_2 = module_0.snake_case_to_camel(str_0)
    assert str_2 == "MMMDCCCXXIX"
    str_3 = module_0.slugify(str_1)
    assert str_3 == "mmmdcccxxix"
    none_type_0 = None
    str_4 = "V+X4L`Rm#H0i"
    string_formatter_0 = module_0.__StringFormatter(str_4)
    str_5 = string_formatter_0.format()
    assert str_5 == "V + X4L`Rm#H0i"
    str_6 = string_formatter_0.format()
    assert str_6 == "V + X4L`Rm#H0i"
    with pytest.raises(module_1.InvalidInputError):
        module_0.camel_case_to_snake(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_36():
    int_0 = 3858
    str_0 = module_0.roman_encode(int_0)
    assert str_0 == "MMMDCCCLVIII"
    bool_0 = False
    str_1 = module_0.strip_html(str_0, bool_0)
    assert str_1 == "MMMDCCCLVIII"
    str_2 = module_0.prettify(str_0)
    assert str_2 == "MMMDCCCLVIII"
    module_5.unique(bool_0)


def test_case_37():
    str_0 = "N\nTf5jmdS\x0c\x0ci<E6f["
    str_1 = module_0.prettify(str_0)
    assert str_1 == "N\nTf5jmdS\x0ci<E6f["


@pytest.mark.xfail(strict=True)
def test_case_38():
    int_0 = 3807
    str_0 = module_0.roman_encode(int_0)
    assert str_0 == "MMMDCCCVII"
    bool_0 = False
    str_1 = module_0.strip_html(str_0, bool_0)
    assert str_1 == "MMMDCCCVII"
    str_2 = module_0.prettify(str_0)
    assert str_2 == "MMMDCCCVII"
    bool_1 = module_0.booleanize(str_0)
    assert bool_1 is False
    str_3 = "04\"'(qtJ8"
    str_4 = module_0.snake_case_to_camel(str_3)
    assert str_4 == "04\"'(qtJ8"
    str_5 = "V+X4Lf`R+m#H>0i"
    string_formatter_0 = module_0.__StringFormatter(str_5)
    str_6 = string_formatter_0.format()
    assert str_6 == "V + X4Lf`R + m#H>0i"
    str_7 = string_formatter_0.format()
    assert str_7 == "V + X4Lf`R + m#H>0i"
    str_8 = string_formatter_0.format()
    assert str_8 == "V + X4Lf`R + m#H>0i"
    var_0 = module_0.camel_case_to_snake(str_2)
    assert var_0 == "MMMDCCCVII"
    var_1 = module_3.b85decode(str_2)
    assert var_1 == b"ED\x00\xd7%\xca\x1c["
    module_0.roman_decode(var_1)


@pytest.mark.xfail(strict=True)
def test_case_39():
    int_0 = 3829
    str_0 = module_0.roman_encode(int_0)
    assert str_0 == "MMMDCCCXXIX"
    bool_0 = False
    str_1 = module_0.strip_html(str_0, bool_0)
    assert str_1 == "MMMDCCCXXIX"
    str_2 = module_0.prettify(str_0)
    assert str_2 == "MMMDCCCXXIX"
    str_3 = module_0.slugify(str_2)
    assert str_3 == "mmmdcccxxix"
    var_0 = module_0.camel_case_to_snake(str_2)
    assert var_0 == "MMMDCCCXXIX"
    var_1 = module_3.b85decode(str_2)
    assert var_1 == b"ED\x00\xd7%\xcaY\xc8"
    int_1 = module_0.roman_decode(str_3)
    assert int_1 == 3829
    str_4 = var_0.format()
    assert str_4 == "MMMDCCCXXIX"
    str_5 = "\x0bEw5WAEEa#s1%QLB"
    module_0.roman_decode(str_5)


@pytest.mark.xfail(strict=True)
def test_case_40():
    int_0 = 3843
    str_0 = module_0.roman_encode(int_0)
    assert str_0 == "MMMDCCCXLIII"
    bool_0 = False
    str_1 = module_0.strip_html(str_0, bool_0)
    assert str_1 == "MMMDCCCXLIII"
    str_2 = module_0.prettify(str_0)
    assert str_2 == "MMMDCCCXLIII"
    module_5.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_41():
    int_0 = 4000
    module_0.roman_encode(int_0)


def test_case_42():
    str_0 = "_5"
    bool_0 = False
    str_1 = module_0.strip_html(str_0, bool_0)
    assert str_1 == "_5"
    string_compressor_0 = module_0.__StringCompressor()
    assert (
        f"{type(module_0.__StringCompressor.compress).__module__}.{type(module_0.__StringCompressor.compress).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.__StringCompressor.decompress).__module__}.{type(module_0.__StringCompressor.decompress).__qualname__}"
        == "builtins.method"
    )
    str_2 = module_0.prettify(str_0)
    assert str_2 == "_5"
    str_3 = module_0.strip_margin(str_1)
    assert str_3 == "_5"
    str_4 = module_0.snake_case_to_camel(str_0)
    assert str_4 == "5"
    str_5 = module_0.asciify(str_1)
    assert str_5 == "_5"


def test_case_43():
    str_0 = "iV((0);`g`{@v!5#"
    str_1 = module_0.prettify(str_0)
    assert str_1 == "IV (0); `g`{@v! 5#"
