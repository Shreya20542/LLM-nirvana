# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import strutils as module_0
import re as module_1


def test_case_0():
    str_0 = (
        "The 'metadata', section's, 'name' option is not set in the config file, %r."
    )
    str_1 = module_0.as_escaped_unicode_literal(str_0)
    assert (
        str_1
        == "\\x54\\x68\\x65\\x20\\x27\\x6d\\x65\\x74\\x61\\x64\\x61\\x74\\x61\\x27\\x2c\\x20\\x73\\x65\\x63\\x74\\x69\\x6f\\x6e\\x27\\x73\\x2c\\x20\\x27\\x6e\\x61\\x6d\\x65\\x27\\x20\\x6f\\x70\\x74\\x69\\x6f\\x6e\\x20\\x69\\x73\\x20\\x6e\\x6f\\x74\\x20\\x73\\x65\\x74\\x20\\x69\\x6e\\x20\\x74\\x68\\x65\\x20\\x63\\x6f\\x6e\\x66\\x69\\x67\\x20\\x66\\x69\\x6c\\x65\\x2c\\x20\\x25\\x72\\x2e"
    )


def test_case_1():
    str_0 = "BXvM|Kr#Hh`$=+w[bl\ny"
    str_1 = module_0.as_escaped_utf8_literal(str_0)
    assert (
        str_1
        == "\\x42\\x58\\x76\\x4d\\x7c\\x4b\\x72\\x23\\x48\\x68\\x60\\x24\\x3d\\x2b\\x77\\x5b\\x62\\x6c\\xa\\x79"
    )


def test_case_2():
    str_0 = (
        "The 'metadata', section's, 'name' option is not set in the config file, %r."
    )
    str_1 = module_0.underscore_to_camel(str_0)
    assert (
        str_1
        == "the 'metadata', section's, 'name' option is not set in the config file, %r."
    )
    str_2 = module_0.as_escaped_unicode_literal(str_0)
    assert (
        str_2
        == "\\x54\\x68\\x65\\x20\\x27\\x6d\\x65\\x74\\x61\\x64\\x61\\x74\\x61\\x27\\x2c\\x20\\x73\\x65\\x63\\x74\\x69\\x6f\\x6e\\x27\\x73\\x2c\\x20\\x27\\x6e\\x61\\x6d\\x65\\x27\\x20\\x6f\\x70\\x74\\x69\\x6f\\x6e\\x20\\x69\\x73\\x20\\x6e\\x6f\\x74\\x20\\x73\\x65\\x74\\x20\\x69\\x6e\\x20\\x74\\x68\\x65\\x20\\x63\\x6f\\x6e\\x66\\x69\\x67\\x20\\x66\\x69\\x6c\\x65\\x2c\\x20\\x25\\x72\\x2e"
    )


def test_case_3():
    str_0 = "QG<"
    bool_0 = False
    str_1 = module_0.underscore_to_camel(str_0, bool_0)
    assert str_1 == "Qg<"


@pytest.mark.xfail(strict=True)
def test_case_4():
    var_0 = module_1.purge()
    module_0.convert_escaped_utf8_literal(var_0)


def test_case_5():
    str_0 = "rdFN:r0d->A>@NJ}^8:"
    str_1 = module_0.camel_to_underscore(str_0)
    assert str_1 == "rd_fn:r0d->a>@nj}^8:"
    str_2 = ":px"
    str_3 = module_0.as_escaped_unicode_literal(str_2)
    assert str_3 == "\\x3a\\x70\\x78"


def test_case_6():
    str_0 = "name"
    str_1 = module_0.as_escaped_unicode_literal(str_0)
    assert str_1 == "\\x6e\\x61\\x6d\\x65"
    str_2 = module_0.convert_escaped_unicode_literal(str_0)
    assert str_2 == "name"
    str_3 = "O"
    str_4 = module_0.as_escaped_unicode_literal(str_3)
    assert str_4 == "\\x4f"


@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = ""
    str_1 = module_0.underscore_to_camel(str_0)
    assert str_1 == ""
    none_type_0 = None
    module_0.as_escaped_unicode_literal(none_type_0)
