# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import semigroups as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    tuple_0 = ()
    first_0 = module_0.First(tuple_0)
    str_0 = first_0.__str__()
    assert str_0 == "Fist[value=()]"
    all_0 = module_0.All(tuple_0)
    none_type_0 = None
    var_0 = first_0.concat(str_0)
    var_1 = var_0.concat(str_0)
    var_2 = var_1.concat(none_type_0)
    var_3 = var_2.concat(all_0)
    var_4 = var_3.concat(all_0)
    var_5 = first_0.concat(tuple_0)
    str_1 = var_5.__str__()
    assert str_1 == "Fist[value=()]"
    var_6 = var_5.concat(str_0)
    one_0 = module_0.One(all_0)
    map_0 = module_0.Map(var_5)
    var_7 = var_6.concat(first_0)
    bool_0 = all_0.__eq__(var_6)
    assert bool_0 is True
    var_8 = var_5.concat(var_7)
    var_9 = var_6.concat(var_5)
    sum_0 = var_5.concat(var_9)
    bool_1 = True
    semigroup_0 = module_0.Semigroup(bool_1)
    assert (
        f"{type(module_0.Semigroup.neutral).__module__}.{type(module_0.Semigroup.neutral).__qualname__}"
        == "builtins.method"
    )
    bytes_0 = b"\x99\xa1\x8861"
    map_1 = module_0.Map(bytes_0)
    one_1 = module_0.One(bool_1)
    bool_2 = False
    var_10 = one_0.concat(bool_2)
    assert f"{type(var_10).__module__}.{type(var_10).__qualname__}" == "semigroups.One"
    assert (
        f"{type(var_10.value).__module__}.{type(var_10.value).__qualname__}"
        == "semigroups.All"
    )
    str_2 = var_5.__str__()
    assert str_2 == "Fist[value=()]"
    str_3 = one_1.__str__()
    assert str_3 == "One[value=True]"
    last_0 = module_0.Last(sum_0)
    var_7.__eq__(last_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    one_0 = module_0.One(none_type_0)
    var_0 = one_0.concat(one_0)
    sum_0 = module_0.Sum(one_0)
    assert module_0.Sum.neutral_element == 0
    str_0 = sum_0.__str__()
    assert str_0 == "Sum[value=One[value=None]]"
    one_0.__eq__(str_0)


def test_case_2():
    bytes_0 = b"\xef\x87\x94p\xb2\xe1l\xcc\xafx'%\xd7\x15\xc2\xb8\x7f\xce"
    max_0 = module_0.Max(bytes_0)
    assert module_0.Max.neutral_element == pytest.approx(-1e309, abs=0.01, rel=0.01)
    min_0 = module_0.Min(bytes_0)
    var_0 = max_0.concat(min_0)
    str_0 = max_0.__str__()
    assert (
        str_0
        == 'Max[value=b"\\xef\\x87\\x94p\\xb2\\xe1l\\xcc\\xafx\'%\\xd7\\x15\\xc2\\xb8\\x7f\\xce"]'
    )


def test_case_3():
    none_type_0 = None
    all_0 = module_0.All(none_type_0)


def test_case_4():
    bytes_0 = b"\xef\x87\x94p\xb2\xe1l\xcc\xafx'%\xd7\x15\xb8\x7f\xce"
    max_0 = module_0.Max(bytes_0)
    assert module_0.Max.neutral_element == pytest.approx(-1e309, abs=0.01, rel=0.01)
    min_0 = module_0.Min(max_0)
    var_0 = max_0.concat(max_0)
    var_1 = var_0.concat(max_0)
    semigroup_0 = module_0.Semigroup(bytes_0)
    assert (
        f"{type(module_0.Semigroup.neutral).__module__}.{type(module_0.Semigroup.neutral).__qualname__}"
        == "builtins.method"
    )
    var_2 = var_0.concat(semigroup_0)
    bool_0 = semigroup_0.__eq__(var_1)
    assert bool_0 is True


@pytest.mark.xfail(strict=True)
def test_case_5():
    none_type_0 = None
    min_0 = module_0.Min(none_type_0)
    min_0.fold(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    dict_0 = {}
    sum_0 = module_0.Sum(dict_0)
    assert module_0.Sum.neutral_element == 0
    str_0 = sum_0.__str__()
    assert str_0 == "Sum[value={}]"
    max_0 = module_0.Max(sum_0)
    assert module_0.Max.neutral_element == pytest.approx(-1e309, abs=0.01, rel=0.01)
    max_0.concat(sum_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    bytes_0 = b"\x9f\x15A_\xd6\x10\x00\x96"
    max_0 = module_0.Max(bytes_0)
    assert module_0.Max.neutral_element == pytest.approx(-1e309, abs=0.01, rel=0.01)
    var_0 = max_0.concat(max_0)
    var_1 = max_0.concat(max_0)
    var_2 = var_1.concat(var_0)
    var_3 = max_0.concat(var_1)
    var_4 = var_1.concat(var_3)
    str_0 = max_0.__str__()
    assert str_0 == "Max[value=b'\\x9f\\x15A_\\xd6\\x10\\x00\\x96']"
    min_0 = module_0.Min(str_0)
    assert min_0.value == "Max[value=b'\\x9f\\x15A_\\xd6\\x10\\x00\\x96']"
    none_type_0 = None
    first_0 = module_0.First(none_type_0)
    var_5 = first_0.concat(var_0)
    str_1 = var_1.__str__()
    assert str_1 == "Max[value=b'\\x9f\\x15A_\\xd6\\x10\\x00\\x96']"
    var_6 = var_5.concat(max_0)
    var_7 = first_0.concat(bytes_0)
    all_0 = var_5.concat(var_7)
    last_0 = module_0.Last(var_4)
    str_2 = last_0.__str__()
    assert str_2 == "Last[value=Max[value=b'\\x9f\\x15A_\\xd6\\x10\\x00\\x96']]"
    str_3 = var_3.__str__()
    assert str_3 == "Max[value=b'\\x9f\\x15A_\\xd6\\x10\\x00\\x96']"
    str_4 = var_7.__str__()
    assert str_4 == "Fist[value=None]"
    max_1 = module_0.Max(var_6)
    bool_0 = first_0.__eq__(var_7)
    assert bool_0 is True
    var_3.fold(min_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    set_0 = set()
    none_type_0 = None
    first_0 = module_0.First(set_0)
    var_0 = first_0.concat(set_0)
    var_1 = var_0.concat(set_0)
    var_2 = var_1.concat(set_0)
    var_2.fold(none_type_0)


def test_case_9():
    str_0 = "p[EvUk2yyM\nw!XxvZb"
    sum_0 = module_0.Sum(str_0)
    assert module_0.Sum.neutral_element == 0
    list_0 = []
    sum_1 = module_0.Sum(list_0)
    last_0 = module_0.Last(list_0)
    var_0 = last_0.concat(sum_1)
    str_1 = var_0.__str__()
    assert str_1 == "Last[value=[]]"
    bool_0 = var_0.__eq__(sum_0)
    assert bool_0 is False
    str_2 = var_0.__str__()
    assert str_2 == "Last[value=[]]"


@pytest.mark.xfail(strict=True)
def test_case_10():
    bool_0 = True
    map_0 = module_0.Map(bool_0)
    str_0 = map_0.__str__()
    assert str_0 == "Map[value=True]"
    map_1 = module_0.Map(bool_0)
    none_type_0 = None
    map_1.fold(none_type_0)


def test_case_11():
    none_type_0 = None
    dict_0 = {}
    map_0 = module_0.Map(dict_0)
    var_0 = map_0.concat(none_type_0)


def test_case_12():
    bytes_0 = b"\xef\x87\x94p\xb2\xe1l\xcc\xafx'%\xd7\x15\xb8\x7f\xce"
    min_0 = module_0.Min(bytes_0)
    var_0 = min_0.concat(min_0)
    str_0 = bytes_0.__str__()
    str_1 = var_0.__str__()
    assert (
        str_1
        == 'Min[value=b"\\xef\\x87\\x94p\\xb2\\xe1l\\xcc\\xafx\'%\\xd7\\x15\\xb8\\x7f\\xce"]'
    )


@pytest.mark.xfail(strict=True)
def test_case_13():
    set_0 = set()
    none_type_0 = None
    max_0 = module_0.Max(none_type_0)
    assert module_0.Max.neutral_element == pytest.approx(-1e309, abs=0.01, rel=0.01)
    none_type_1 = None
    first_0 = module_0.First(set_0)
    var_0 = first_0.concat(set_0)
    var_1 = var_0.concat(set_0)
    sum_0 = module_0.Sum(none_type_1)
    assert module_0.Sum.neutral_element == 0
    sum_0.concat(var_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    tuple_0 = ()
    first_0 = module_0.First(tuple_0)
    var_0 = first_0.concat(tuple_0)
    all_0 = module_0.All(tuple_0)
    none_type_0 = None
    var_1 = first_0.concat(var_0)
    var_2 = var_1.concat(var_0)
    var_3 = var_2.concat(none_type_0)
    var_4 = var_3.concat(all_0)
    var_5 = var_4.concat(all_0)
    var_6 = first_0.concat(tuple_0)
    str_0 = var_6.__str__()
    assert str_0 == "Fist[value=()]"
    var_7 = var_6.concat(var_0)
    one_0 = module_0.One(all_0)
    map_0 = module_0.Map(var_6)
    var_8 = var_7.concat(first_0)
    var_9 = var_1.concat(first_0)
    all_1 = module_0.All(var_2)
    all_2 = all_1.concat(var_2)
    assert all_2.value == ()
    str_1 = var_9.__str__()
    assert str_1 == "Fist[value=()]"
    var_10 = var_4.concat(var_0)
    var_11 = var_2.concat(var_5)
    var_12 = var_8.concat(all_2)
    str_2 = var_5.__str__()
    assert str_2 == "Fist[value=()]"
    max_0 = module_0.Max(var_1)
    assert module_0.Max.neutral_element == pytest.approx(-1e309, abs=0.01, rel=0.01)
    var_13 = var_4.concat(var_8)
    var_14 = var_3.concat(var_0)
    map_1 = module_0.Map(var_6)
    var_4.fold(var_2)


@pytest.mark.xfail(strict=True)
def test_case_15():
    bytes_0 = b"i\x1f7\x96\x02"
    max_0 = module_0.Max(bytes_0)
    assert module_0.Max.neutral_element == pytest.approx(-1e309, abs=0.01, rel=0.01)
    min_0 = module_0.Min(bytes_0)
    var_0 = min_0.concat(min_0)
    var_1 = min_0.concat(max_0)
    min_1 = module_0.Min(max_0)
    var_2 = max_0.concat(var_1)
    str_0 = max_0.__str__()
    assert str_0 == "Max[value=b'i\\x1f7\\x96\\x02']"
    min_2 = module_0.Min(min_1)
    all_0 = module_0.All(min_1)
    str_1 = var_2.__str__()
    assert str_1 == "Max[value=b'i\\x1f7\\x96\\x02']"
    first_0 = module_0.First(all_0)
    var_3 = first_0.concat(bytes_0)
    all_1 = all_0.concat(var_3)
    assert (
        f"{type(all_1.value).__module__}.{type(all_1.value).__qualname__}"
        == "semigroups.All"
    )
    str_2 = first_0.__str__()
    assert str_2 == "Fist[value=All[value=Min[value=Max[value=b'i\\x1f7\\x96\\x02']]]]"
    str_3 = var_2.__str__()
    assert str_3 == "Max[value=b'i\\x1f7\\x96\\x02']"
    str_4 = str_0.__str__()
    assert str_4 == "Max[value=b'i\\x1f7\\x96\\x02']"
    str_5 = var_3.__str__()
    assert str_5 == "Fist[value=All[value=Min[value=Max[value=b'i\\x1f7\\x96\\x02']]]]"
    max_1 = module_0.Max(first_0)
    str_6 = all_0.__str__()
    assert str_6 == "All[value=Min[value=Max[value=b'i\\x1f7\\x96\\x02']]]"
    var_4 = first_0.concat(str_3)
    str_7 = var_4.__str__()
    assert str_7 == "Fist[value=All[value=Min[value=Max[value=b'i\\x1f7\\x96\\x02']]]]"
    str_8 = "u"
    str_6.concat(str_8)


@pytest.mark.xfail(strict=True)
def test_case_16():
    bytes_0 = b"\x9f\x15A_\xd6\x10\x00\x96"
    max_0 = module_0.Max(bytes_0)
    assert module_0.Max.neutral_element == pytest.approx(-1e309, abs=0.01, rel=0.01)
    var_0 = max_0.concat(max_0)
    var_1 = max_0.concat(max_0)
    var_2 = var_1.concat(var_0)
    var_3 = max_0.concat(var_1)
    var_4 = var_1.concat(var_3)
    str_0 = max_0.__str__()
    assert str_0 == "Max[value=b'\\x9f\\x15A_\\xd6\\x10\\x00\\x96']"
    min_0 = module_0.Min(str_0)
    assert min_0.value == "Max[value=b'\\x9f\\x15A_\\xd6\\x10\\x00\\x96']"
    none_type_0 = None
    first_0 = module_0.First(none_type_0)
    map_0 = module_0.Map(max_0)
    var_5 = var_0.concat(var_1)
    all_0 = module_0.All(none_type_0)
    all_1 = all_0.concat(none_type_0)
    assert f"{type(all_1).__module__}.{type(all_1).__qualname__}" == "semigroups.All"
    assert all_1.value is None
    last_0 = module_0.Last(var_3)
    str_1 = var_1.__str__()
    assert str_1 == "Max[value=b'\\x9f\\x15A_\\xd6\\x10\\x00\\x96']"
    sum_0 = var_2.concat(var_1)
    str_2 = var_1.__str__()
    assert str_2 == "Max[value=b'\\x9f\\x15A_\\xd6\\x10\\x00\\x96']"
    int_0 = 1865
    var_3.concat(int_0)


def test_case_17():
    bytes_0 = b"\xf81\xef\x87\x94p\xb2\xe1l\xcc\xafx'%\xd7\x15\xb8\x7f\xce"
    min_0 = module_0.Min(bytes_0)
    var_0 = min_0.concat(min_0)


@pytest.mark.xfail(strict=True)
def test_case_18():
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0, none_type_0: none_type_0}
    map_0 = module_0.Map(dict_0)
    map_0.concat(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_19():
    bytes_0 = b"\xef\x87\x94p\xb2\xe1l\xcc\xafx'%\xd7\x15\xb8\x7f\xce"
    max_0 = module_0.Max(bytes_0)
    assert module_0.Max.neutral_element == pytest.approx(-1e309, abs=0.01, rel=0.01)
    bytes_1 = b"\xbbK\xe3G>\x89\xee\xc9"
    max_1 = module_0.Max(bytes_1)
    min_0 = module_0.Min(bytes_0)
    var_0 = min_0.concat(max_1)
    assert var_0.value == b"\xbbK\xe3G>\x89\xee\xc9"
    max_0.concat(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_20():
    bytes_0 = b"\xef\x87\x94p\xb2\xff\xa3\x1a\xe1l\xcc\xafx'%\xd7\x15\xb8\x7f\xce"
    max_0 = module_0.Max(bytes_0)
    assert module_0.Max.neutral_element == pytest.approx(-1e309, abs=0.01, rel=0.01)
    bytes_1 = b"\xbbK\xe3G>\x89\xee\xc9"
    max_1 = module_0.Max(bytes_1)
    min_0 = max_1.concat(max_0)
    assert (
        min_0.value
        == b"\xef\x87\x94p\xb2\xff\xa3\x1a\xe1l\xcc\xafx'%\xd7\x15\xb8\x7f\xce"
    )
    var_0 = min_0.concat(max_1)
    assert (
        var_0.value
        == b"\xef\x87\x94p\xb2\xff\xa3\x1a\xe1l\xcc\xafx'%\xd7\x15\xb8\x7f\xce"
    )
    max_0.concat(bytes_0)
