# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import lazy as module_0
import builtins as module_1


def test_case_0():
    bool_0 = False
    lazy_0 = module_0.Lazy(bool_0)
    assert f"{type(lazy_0).__module__}.{type(lazy_0).__qualname__}" == "lazy.Lazy"
    assert lazy_0.constructor_fn is False
    assert lazy_0.is_evaluated is False
    assert lazy_0.value is None
    assert (
        f"{type(module_0.Lazy.of).__module__}.{type(module_0.Lazy.of).__qualname__}"
        == "builtins.method"
    )
    bool_1 = lazy_0.__eq__(lazy_0)
    assert bool_1 is True


def test_case_1():
    int_0 = 502
    lazy_0 = module_0.Lazy(int_0)
    assert f"{type(lazy_0).__module__}.{type(lazy_0).__qualname__}" == "lazy.Lazy"
    assert lazy_0.constructor_fn == 502
    assert lazy_0.is_evaluated is False
    assert lazy_0.value is None
    assert (
        f"{type(module_0.Lazy.of).__module__}.{type(module_0.Lazy.of).__qualname__}"
        == "builtins.method"
    )
    bool_0 = lazy_0.__eq__(lazy_0)
    assert bool_0 is True
    bool_1 = lazy_0.__eq__(int_0)
    assert bool_1 is False
    lazy_1 = module_0.Lazy(int_0)
    var_0 = lazy_0.ap(lazy_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = False
    lazy_0 = module_0.Lazy(bool_0)
    assert f"{type(lazy_0).__module__}.{type(lazy_0).__qualname__}" == "lazy.Lazy"
    assert lazy_0.constructor_fn is False
    assert lazy_0.is_evaluated is False
    assert lazy_0.value is None
    assert (
        f"{type(module_0.Lazy.of).__module__}.{type(module_0.Lazy.of).__qualname__}"
        == "builtins.method"
    )
    lazy_0.get()


def test_case_3():
    none_type_0 = None
    lazy_0 = module_0.Lazy(none_type_0)
    assert f"{type(lazy_0).__module__}.{type(lazy_0).__qualname__}" == "lazy.Lazy"
    assert lazy_0.constructor_fn is None
    assert lazy_0.is_evaluated is False
    assert lazy_0.value is None
    assert (
        f"{type(module_0.Lazy.of).__module__}.{type(module_0.Lazy.of).__qualname__}"
        == "builtins.method"
    )


@pytest.mark.xfail(strict=True)
def test_case_4():
    int_0 = 502
    lazy_0 = module_0.Lazy(int_0)
    assert f"{type(lazy_0).__module__}.{type(lazy_0).__qualname__}" == "lazy.Lazy"
    assert lazy_0.constructor_fn == 502
    assert lazy_0.is_evaluated is False
    assert lazy_0.value is None
    assert (
        f"{type(module_0.Lazy.of).__module__}.{type(module_0.Lazy.of).__qualname__}"
        == "builtins.method"
    )
    bool_0 = lazy_0.__eq__(lazy_0)
    assert bool_0 is True
    str_0 = lazy_0.__str__()
    assert str_0 == "Lazy[fn=502, value=None, is_evaluated=False]"
    bool_1 = lazy_0.__eq__(int_0)
    assert bool_1 is False
    lazy_1 = module_0.Lazy(int_0)
    var_0 = lazy_0.ap(lazy_0)
    lazy_1.get()


@pytest.mark.xfail(strict=True)
def test_case_5():
    tuple_0 = ()
    set_0 = {tuple_0}
    list_0 = [tuple_0]
    lazy_0 = module_0.Lazy(list_0)
    assert f"{type(lazy_0).__module__}.{type(lazy_0).__qualname__}" == "lazy.Lazy"
    assert lazy_0.constructor_fn == [()]
    assert lazy_0.is_evaluated is False
    assert lazy_0.value is None
    assert (
        f"{type(module_0.Lazy.of).__module__}.{type(module_0.Lazy.of).__qualname__}"
        == "builtins.method"
    )
    bool_0 = lazy_0.__eq__(set_0)
    assert bool_0 is False
    lazy_1 = module_0.Lazy(set_0)
    complex_0 = 1447.71834 - 2468.563j
    lazy_2 = lazy_1.map(complex_0)
    lazy_2.to_try()


@pytest.mark.xfail(strict=True)
def test_case_6():
    int_0 = 502
    lazy_0 = module_0.Lazy(int_0)
    assert f"{type(lazy_0).__module__}.{type(lazy_0).__qualname__}" == "lazy.Lazy"
    assert lazy_0.constructor_fn == 502
    assert lazy_0.is_evaluated is False
    assert lazy_0.value is None
    assert (
        f"{type(module_0.Lazy.of).__module__}.{type(module_0.Lazy.of).__qualname__}"
        == "builtins.method"
    )
    none_type_0 = None
    lazy_1 = lazy_0.map(none_type_0)
    bool_0 = lazy_0.__eq__(int_0)
    assert bool_0 is False
    lazy_1.get()


@pytest.mark.xfail(strict=True)
def test_case_7():
    object_0 = module_1.object()
    set_0 = set()
    lazy_0 = module_0.Lazy(set_0)
    assert f"{type(lazy_0).__module__}.{type(lazy_0).__qualname__}" == "lazy.Lazy"
    assert lazy_0.constructor_fn == {*()}
    assert lazy_0.is_evaluated is False
    assert lazy_0.value is None
    assert (
        f"{type(module_0.Lazy.of).__module__}.{type(module_0.Lazy.of).__qualname__}"
        == "builtins.method"
    )
    lazy_1 = lazy_0.bind(object_0)
    lazy_1.to_maybe()


@pytest.mark.xfail(strict=True)
def test_case_8():
    int_0 = 502
    lazy_0 = module_0.Lazy(int_0)
    assert f"{type(lazy_0).__module__}.{type(lazy_0).__qualname__}" == "lazy.Lazy"
    assert lazy_0.constructor_fn == 502
    assert lazy_0.is_evaluated is False
    assert lazy_0.value is None
    assert (
        f"{type(module_0.Lazy.of).__module__}.{type(module_0.Lazy.of).__qualname__}"
        == "builtins.method"
    )
    none_type_0 = None
    bool_0 = lazy_0.__eq__(lazy_0)
    assert bool_0 is True
    lazy_1 = lazy_0.map(none_type_0)
    lazy_0.to_box()


@pytest.mark.xfail(strict=True)
def test_case_9():
    none_type_0 = None
    list_0 = [none_type_0]
    bytes_0 = b"gX\xf5\x10\x94o\xe6\n\xf6L1\x85\xdal\xa4\x17W\x9f"
    lazy_0 = module_0.Lazy(bytes_0)
    assert f"{type(lazy_0).__module__}.{type(lazy_0).__qualname__}" == "lazy.Lazy"
    assert lazy_0.constructor_fn == b"gX\xf5\x10\x94o\xe6\n\xf6L1\x85\xdal\xa4\x17W\x9f"
    assert lazy_0.is_evaluated is False
    assert lazy_0.value is None
    assert (
        f"{type(module_0.Lazy.of).__module__}.{type(module_0.Lazy.of).__qualname__}"
        == "builtins.method"
    )
    lazy_0.to_either(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    complex_0 = -1492.7 - 465j
    lazy_0 = module_0.Lazy(complex_0)
    assert f"{type(lazy_0).__module__}.{type(lazy_0).__qualname__}" == "lazy.Lazy"
    assert lazy_0.constructor_fn == (-1492.7 - 465j)
    assert lazy_0.is_evaluated is False
    assert lazy_0.value is None
    assert (
        f"{type(module_0.Lazy.of).__module__}.{type(module_0.Lazy.of).__qualname__}"
        == "builtins.method"
    )
    lazy_0.to_maybe()


@pytest.mark.xfail(strict=True)
def test_case_11():
    bool_0 = False
    lazy_0 = module_0.Lazy(bool_0)
    assert f"{type(lazy_0).__module__}.{type(lazy_0).__qualname__}" == "lazy.Lazy"
    assert lazy_0.constructor_fn is False
    assert lazy_0.is_evaluated is False
    assert lazy_0.value is None
    assert (
        f"{type(module_0.Lazy.of).__module__}.{type(module_0.Lazy.of).__qualname__}"
        == "builtins.method"
    )
    bool_1 = lazy_0.__eq__(lazy_0)
    assert bool_1 is True
    lazy_0.to_try()


@pytest.mark.xfail(strict=True)
def test_case_12():
    complex_0 = -683.989446 + 2230.123j
    lazy_0 = module_0.Lazy(complex_0)
    assert f"{type(lazy_0).__module__}.{type(lazy_0).__qualname__}" == "lazy.Lazy"
    assert lazy_0.constructor_fn == (-683.989446 + 2230.123j)
    assert lazy_0.is_evaluated is False
    assert lazy_0.value is None
    assert (
        f"{type(module_0.Lazy.of).__module__}.{type(module_0.Lazy.of).__qualname__}"
        == "builtins.method"
    )
    lazy_0.to_validation()


@pytest.mark.xfail(strict=True)
def test_case_13():
    int_0 = 502
    lazy_0 = module_0.Lazy(int_0)
    assert f"{type(lazy_0).__module__}.{type(lazy_0).__qualname__}" == "lazy.Lazy"
    assert lazy_0.constructor_fn == 502
    assert lazy_0.is_evaluated is False
    assert lazy_0.value is None
    assert (
        f"{type(module_0.Lazy.of).__module__}.{type(module_0.Lazy.of).__qualname__}"
        == "builtins.method"
    )
    bool_0 = True
    lazy_1 = lazy_0.map(bool_0)
    lazy_2 = lazy_1.bind(bool_0)
    bool_1 = lazy_0.__eq__(int_0)
    assert bool_1 is False
    lazy_2.get()


@pytest.mark.xfail(strict=True)
def test_case_14():
    int_0 = 502
    lazy_0 = module_0.Lazy(int_0)
    assert f"{type(lazy_0).__module__}.{type(lazy_0).__qualname__}" == "lazy.Lazy"
    assert lazy_0.constructor_fn == 502
    assert lazy_0.is_evaluated is False
    assert lazy_0.value is None
    assert (
        f"{type(module_0.Lazy.of).__module__}.{type(module_0.Lazy.of).__qualname__}"
        == "builtins.method"
    )
    bool_0 = lazy_0.__eq__(lazy_0)
    assert bool_0 is True
    var_0 = lazy_0.ap(int_0)
    bool_1 = lazy_0.__eq__(int_0)
    assert bool_1 is False
    var_0.get()
