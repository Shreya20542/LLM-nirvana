# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import utils as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    module_0.fn()


def test_case_1():
    bool_0 = True
    var_0 = module_0.curry(bool_0, bool_0)
    bool_1 = True
    var_1 = module_0.compose(bool_1)
    callable_0 = module_0.memoize(var_1, var_1)
    var_2 = module_0.compose(bool_1)


@pytest.mark.xfail(strict=True)
def test_case_2():
    list_0 = []
    var_0 = module_0.cond(list_0)
    list_1 = [var_0]
    var_1 = module_0.compose(var_0, *list_1)
    bool_0 = True
    var_2 = module_0.identity(bool_0)
    module_0.fn()


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = True
    int_0 = module_0.increase(bool_0)
    assert int_0 == 2
    module_0.fn()


def test_case_4():
    list_0 = []
    var_0 = module_0.cond(list_0)
    list_1 = [var_0]
    var_1 = module_0.compose(var_0, *list_1)
    var_2 = module_0.compose(list_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bool_0 = False
    callable_0 = module_0.memoize(bool_0)
    list_0 = [callable_0, bool_0, bool_0]
    module_0.pipe(bool_0, *list_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    list_0 = []
    var_0 = module_0.cond(list_0)
    tuple_0 = (var_0, var_0)
    list_1 = [tuple_0, var_0, var_0]
    var_1 = module_0.cond(list_1)
    list_2 = [var_1]
    module_0.compose(var_0, *list_2)


@pytest.mark.xfail(strict=True)
def test_case_7():
    none_type_0 = None
    callable_0 = module_0.memoize(none_type_0)
    tuple_0 = (callable_0, callable_0)
    list_0 = [tuple_0, tuple_0, tuple_0]
    var_0 = module_0.cond(list_0)
    var_1 = module_0.curry(tuple_0, tuple_0)
    list_1 = [var_1]
    module_0.compose(callable_0, *list_1)


@pytest.mark.xfail(strict=True)
def test_case_8():
    list_0 = []
    var_0 = module_0.cond(list_0)
    callable_0 = module_0.memoize(var_0)
    tuple_0 = (callable_0, callable_0)
    list_1 = [tuple_0]
    var_1 = module_0.cond(list_1)
    list_2 = [var_1]
    var_2 = module_0.compose(callable_0, *list_2)
    var_3 = module_0.compose(callable_0, *list_2)
    module_0.fn()


@pytest.mark.xfail(strict=True)
def test_case_9():
    list_0 = []
    var_0 = module_0.cond(list_0)
    list_1 = [var_0]
    var_1 = module_0.pipe(var_0, *list_1)
    callable_0 = module_0.memoize(var_1, var_1)
    var_2 = module_0.pipe(list_1)
    callable_1 = module_0.memoize(var_0)
    tuple_0 = (callable_1, callable_1)
    var_3 = module_0.compose(callable_1, *tuple_0)
    list_2 = [var_3]
    module_0.compose(callable_1, *list_2)


@pytest.mark.xfail(strict=True)
def test_case_10():
    list_0 = []
    var_0 = module_0.cond(list_0)
    list_1 = [var_0]
    var_1 = module_0.pipe(var_0, *list_1)
    callable_0 = module_0.memoize(var_1, var_1)
    var_2 = module_0.cond(var_0)
    callable_1 = module_0.curry(var_2)
    tuple_0 = (callable_1, callable_1)
    list_2 = [tuple_0]
    var_3 = module_0.cond(list_2)
    list_3 = [var_3]
    var_4 = module_0.compose(callable_1, *list_3)
    var_5 = module_0.compose(callable_1, *list_3)
    var_6 = module_0.compose(var_0)
    module_0.fn()
