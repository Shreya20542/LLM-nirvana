# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import tokens as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    bytes_0 = b"\xc3\x8a(\x9f"
    list_0 = [bytes_0, bytes_0, bytes_0]
    none_type_0 = None
    int_0 = -94
    list_token_0 = module_0.ListToken(none_type_0, none_type_0, int_0)
    list_token_0.lookup_key(list_0)


def test_case_1():
    none_type_0 = None
    none_type_1 = None
    scalar_token_0 = module_0.ScalarToken(none_type_1, none_type_1, none_type_1)
    bool_0 = False
    bool_1 = True
    list_token_0 = module_0.ListToken(none_type_1, bool_1, none_type_0)
    list_0 = []
    token_0 = list_token_0.lookup(list_0)
    token_1 = scalar_token_0.lookup(list_0)
    list_token_1 = module_0.ListToken(none_type_1, bool_0, none_type_1)
    bool_2 = list_token_1.__eq__(none_type_0)
    assert bool_2 is False
    bool_3 = False
    int_0 = -2490
    token_2 = module_0.Token(none_type_0, bool_3, int_0)
    assert (
        f"{type(module_0.Token.string).__module__}.{type(module_0.Token.string).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Token.value).__module__}.{type(module_0.Token.value).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Token.start).__module__}.{type(module_0.Token.start).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Token.end).__module__}.{type(module_0.Token.end).__qualname__}"
        == "builtins.property"
    )
    list_token_2 = module_0.ListToken(none_type_0, bool_2, bool_1, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = True
    none_type_0 = None
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0]
    dict_token_0 = module_0.DictToken(*list_0)
    assert (
        f"{type(dict_token_0).__module__}.{type(dict_token_0).__qualname__}"
        == "tokens.DictToken"
    )
    list_token_0 = module_0.ListToken(none_type_0, none_type_0, bool_0)
    bool_1 = list_token_0.__eq__(list_0)
    assert bool_1 is False
    dict_token_0.__eq__(list_token_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    module_0.DictToken()


def test_case_4():
    bool_0 = False
    scalar_token_0 = module_0.ScalarToken(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    none_type_0 = None
    int_0 = 5031
    int_1 = -153
    token_0 = module_0.Token(none_type_0, int_0, int_1)
    assert (
        f"{type(module_0.Token.string).__module__}.{type(module_0.Token.string).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Token.value).__module__}.{type(module_0.Token.value).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Token.start).__module__}.{type(module_0.Token.start).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Token.end).__module__}.{type(module_0.Token.end).__qualname__}"
        == "builtins.property"
    )
    none_type_1 = None
    token_1 = module_0.Token(int_0, none_type_1, token_0)
    bool_0 = True
    bool_1 = False
    token_2 = module_0.Token(none_type_1, bool_1, bool_0)
    bool_2 = token_2.__eq__(none_type_1)
    assert bool_2 is False
    token_2.__eq__(token_2)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bool_0 = False
    bool_1 = True
    scalar_token_0 = module_0.ScalarToken(bool_1, bool_0, bool_0)
    none_type_0 = None
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0]
    dict_token_0 = module_0.DictToken(*list_0)
    assert (
        f"{type(dict_token_0).__module__}.{type(dict_token_0).__qualname__}"
        == "tokens.DictToken"
    )
    int_0 = 340
    scalar_token_1 = module_0.ScalarToken(none_type_0, int_0, none_type_0)
    scalar_token_0.lookup(list_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    bool_0 = True
    list_0 = [bool_0]
    scalar_token_0 = module_0.ScalarToken(list_0, list_0, bool_0)
    scalar_token_0.__repr__()


@pytest.mark.xfail(strict=True)
def test_case_8():
    list_0 = []
    int_0 = -361
    token_0 = module_0.Token(list_0, list_0, int_0)
    assert (
        f"{type(module_0.Token.string).__module__}.{type(module_0.Token.string).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Token.value).__module__}.{type(module_0.Token.value).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Token.start).__module__}.{type(module_0.Token.start).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Token.end).__module__}.{type(module_0.Token.end).__qualname__}"
        == "builtins.property"
    )
    str_0 = "r3H nmQ"
    bool_0 = True
    int_1 = -2017
    token_1 = module_0.Token(str_0, bool_0, int_1)
    list_token_0 = module_0.ListToken(token_1, int_1, str_0)
    list_token_0.lookup_key(token_0)


def test_case_9():
    none_type_0 = None
    scalar_token_0 = module_0.ScalarToken(none_type_0, none_type_0, none_type_0)
    var_0 = scalar_token_0.__hash__()
    assert var_0 == 271545738
    var_1 = var_0.__hash__()
    var_2 = var_1.__hash__()
    int_0 = -1003
    bool_0 = True
    list_token_0 = module_0.ListToken(var_2, int_0, bool_0)


def test_case_10():
    bool_0 = True
    str_0 = "\n    Parse and validate a YAML string, returning positionally marked error\n    messages on parse or validation failures.\n\n    content - A YAML string or bytestring.\n    validator - A Field instance or Schema class to validate against.\n\n    Returns a two-tuple of (value, error_messages)\n    "
    token_0 = module_0.Token(bool_0, bool_0, bool_0, str_0)
    assert (
        f"{type(module_0.Token.string).__module__}.{type(module_0.Token.string).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Token.value).__module__}.{type(module_0.Token.value).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Token.start).__module__}.{type(module_0.Token.start).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Token.end).__module__}.{type(module_0.Token.end).__qualname__}"
        == "builtins.property"
    )
    scalar_token_0 = module_0.ScalarToken(bool_0, bool_0, bool_0, bool_0)
    var_0 = scalar_token_0.__hash__()
    assert var_0 == 1
    bool_1 = True
    scalar_token_1 = module_0.ScalarToken(bool_1, bool_1, bool_1)


def test_case_11():
    none_type_0 = None
    none_type_1 = None
    scalar_token_0 = module_0.ScalarToken(none_type_1, none_type_1, none_type_1)
    bool_0 = True
    list_token_0 = module_0.ListToken(none_type_1, bool_0, none_type_0)
    list_0 = []
    token_0 = scalar_token_0.lookup(list_0)
    bool_1 = True
    token_1 = scalar_token_0.lookup(list_0)
    int_0 = -3873
    none_type_2 = None
    list_token_1 = module_0.ListToken(list_0, none_type_2, list_0)
    bool_2 = scalar_token_0.__eq__(list_token_1)
    assert bool_2 is False
    int_1 = 2399
    scalar_token_1 = module_0.ScalarToken(scalar_token_0, list_token_0, token_0, int_0)
    bool_3 = scalar_token_1.__eq__(bool_1)
    assert bool_3 is False
    bool_4 = False
    scalar_token_2 = module_0.ScalarToken(int_1, bool_3, bool_4, list_token_1)
    bool_5 = list_token_0.__eq__(none_type_2)


def test_case_12():
    bool_0 = True
    str_0 = "\n    Parse and validate a YAML string, returning positionally marked error\n    messages on parse or validation failures.\n\n    content - A YAML string or bytestring.\n    validator - A Field instance or Schema class to validate against.\n\n    Returns a two-tuple of (value, error_messages)\n    "
    token_0 = module_0.Token(bool_0, bool_0, bool_0, str_0)
    assert (
        f"{type(module_0.Token.string).__module__}.{type(module_0.Token.string).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Token.value).__module__}.{type(module_0.Token.value).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Token.start).__module__}.{type(module_0.Token.start).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Token.end).__module__}.{type(module_0.Token.end).__qualname__}"
        == "builtins.property"
    )
    complex_0 = -2658.47549 + 2444.79j
    bool_1 = True
    scalar_token_0 = module_0.ScalarToken(complex_0, bool_1, complex_0, complex_0)
    var_0 = scalar_token_0.__hash__()
    assert var_0 == 4368442557943549250
    bool_2 = True
    scalar_token_1 = module_0.ScalarToken(complex_0, complex_0, bool_2)


@pytest.mark.xfail(strict=True)
def test_case_13():
    none_type_0 = None
    list_0 = [none_type_0]
    bool_0 = False
    scalar_token_0 = module_0.ScalarToken(bool_0, list_0, list_0)
    var_0 = scalar_token_0.__hash__()
    assert var_0 == 0
    var_1 = var_0.__hash__()
    str_0 = scalar_token_0.__hash__()
    complex_0 = 1370.965514 - 605.893784j
    list_token_0 = module_0.ListToken(none_type_0, bool_0, complex_0)
    token_0 = module_0.Token(none_type_0, list_token_0, list_token_0)
    assert (
        f"{type(module_0.Token.string).__module__}.{type(module_0.Token.string).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Token.value).__module__}.{type(module_0.Token.value).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Token.start).__module__}.{type(module_0.Token.start).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Token.end).__module__}.{type(module_0.Token.end).__qualname__}"
        == "builtins.property"
    )
    token_0.lookup_key(list_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    none_type_0 = None
    none_type_1 = None
    scalar_token_0 = module_0.ScalarToken(none_type_1, none_type_1, none_type_1)
    bool_0 = False
    list_token_0 = module_0.ListToken(none_type_1, bool_0, none_type_0)
    list_0 = []
    token_0 = list_token_0.lookup(list_0)
    token_1 = scalar_token_0.lookup(list_0)
    bool_1 = True
    bool_2 = True
    int_0 = -3873
    str_0 = "\n    Parse and validate a YAML string, returning positionally marked error\n    messages on parse or validation failures.\n\n    content - A YAML string or bytestring.\n    validator - A Field instance or Schema class to validate against.\n\n    Returns a two-tuple of (value, error_messages)\n    "
    list_token_1 = module_0.ListToken(bool_0, bool_2, int_0, str_0)
    list_token_2 = module_0.ListToken(bool_2, none_type_0, list_token_1, bool_2)
    str_1 = list_token_1.__repr__()
    assert str_1 == "ListToken('')"
    var_0 = scalar_token_0.__hash__()
    assert var_0 == 271545738
    none_type_2 = None
    list_token_3 = module_0.ListToken(list_0, none_type_2, list_0)
    bool_3 = var_0.__hash__()
    int_1 = 5
    list_token_4 = module_0.ListToken(str_1, int_1, bool_3)
    scalar_token_1 = module_0.ScalarToken(scalar_token_0, list_token_0, token_1, int_0)
    bool_4 = scalar_token_1.__eq__(bool_1)
    assert bool_4 is False
    token_1.__eq__(list_token_4)


def test_case_15():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0]
    dict_token_0 = module_0.DictToken(*list_0)
    assert (
        f"{type(dict_token_0).__module__}.{type(dict_token_0).__qualname__}"
        == "tokens.DictToken"
    )


@pytest.mark.xfail(strict=True)
def test_case_16():
    str_0 = "/G=lw[8<\\?"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, dict_0, str_0]
    module_0.DictToken(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_17():
    bool_0 = False
    bool_1 = True
    scalar_token_0 = module_0.ScalarToken(bool_1, bool_0, bool_0)
    none_type_0 = None
    list_0 = []
    dict_0 = {}
    list_1 = [dict_0, dict_0, dict_0]
    dict_token_0 = module_0.DictToken(*list_1)
    assert (
        f"{type(dict_token_0).__module__}.{type(dict_token_0).__qualname__}"
        == "tokens.DictToken"
    )
    list_token_0 = module_0.ListToken(none_type_0, none_type_0, bool_1)
    scalar_token_1 = module_0.ScalarToken(bool_0, bool_0, list_token_0)
    bool_2 = list_token_0.__eq__(list_1)
    assert bool_2 is False
    int_0 = 2399
    int_1 = 757
    bool_3 = dict_token_0.__eq__(int_1)
    int_2 = 5
    int_3 = 1
    scalar_token_2 = module_0.ScalarToken(dict_0, list_0, int_3)
    bool_4 = scalar_token_0.__eq__(int_0)
    bool_5 = False
    list_token_1 = module_0.ListToken(int_2, bool_3, bool_5, list_token_0)
    list_token_2 = module_0.ListToken(list_token_1, scalar_token_2, int_0)
    str_0 = scalar_token_0.__repr__()
    assert str_0 == "ScalarToken('')"
    dict_token_0.lookup(list_1)


@pytest.mark.xfail(strict=True)
def test_case_18():
    bool_0 = False
    bool_1 = True
    scalar_token_0 = module_0.ScalarToken(bool_1, bool_0, bool_0)
    none_type_0 = None
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0]
    dict_token_0 = module_0.DictToken(*list_0)
    assert (
        f"{type(dict_token_0).__module__}.{type(dict_token_0).__qualname__}"
        == "tokens.DictToken"
    )
    str_0 = scalar_token_0.__repr__()
    assert str_0 == "ScalarToken('')"
    bool_2 = False
    scalar_token_1 = module_0.ScalarToken(none_type_0, bool_2, bool_0, dict_0)
    scalar_token_2 = module_0.ScalarToken(bool_0, none_type_0, list_0, scalar_token_1)
    list_token_0 = module_0.ListToken(none_type_0, bool_0, none_type_0)
    str_1 = "L*H}e\x0cH>Y"
    scalar_token_3 = module_0.ScalarToken(none_type_0, dict_token_0, none_type_0, str_1)
    bool_3 = scalar_token_3.__eq__(none_type_0)
    assert bool_3 is False
    int_0 = 2399
    scalar_token_4 = module_0.ScalarToken(none_type_0, dict_token_0, int_0, none_type_0)
    bool_4 = False
    bool_5 = False
    list_token_1 = module_0.ListToken(scalar_token_4, bool_4, bool_5)
    list_1 = [list_token_1]
    dict_token_0.lookup_key(list_1)


@pytest.mark.xfail(strict=True)
def test_case_19():
    bool_0 = False
    bool_1 = True
    scalar_token_0 = module_0.ScalarToken(bool_1, bool_0, bool_0)
    none_type_0 = None
    str_0 = scalar_token_0.__repr__()
    assert str_0 == "ScalarToken('')"
    dict_0 = {scalar_token_0: bool_0}
    list_0 = [dict_0, dict_0, dict_0]
    dict_token_0 = module_0.DictToken(*list_0)
    assert (
        f"{type(dict_token_0).__module__}.{type(dict_token_0).__qualname__}"
        == "tokens.DictToken"
    )
    list_token_0 = module_0.ListToken(none_type_0, none_type_0, bool_1)
    scalar_token_1 = module_0.ScalarToken(bool_0, bool_0, list_token_0)
    var_0 = scalar_token_0.__hash__()
    dict_token_0.__eq__(list_token_0)
