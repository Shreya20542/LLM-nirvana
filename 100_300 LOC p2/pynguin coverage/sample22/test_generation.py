# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import generation as module_0
import re as module_1
import binascii as module_2
import string as module_3


def test_case_0():
    bool_0 = True
    str_0 = module_0.random_string(bool_0)
    bytes_0 = b"\xdf\xe3\x94\x15\x10Z\x03\xeb<\xb7\xf4\xa0\x9f\xf1J\xc9G"
    str_1 = module_0.uuid(bytes_0)


def test_case_1():
    str_0 = module_0.uuid()


def test_case_2():
    int_0 = 1
    str_0 = module_0.random_string(int_0)


def test_case_3():
    none_type_0 = None
    with pytest.raises(ValueError):
        module_0.random_string(none_type_0)


def test_case_4():
    int_0 = -1856
    with pytest.raises(ValueError):
        module_0.secure_random_hex(int_0)


def test_case_5():
    str_0 = module_0.uuid()
    with pytest.raises(ValueError):
        module_0.secure_random_hex(str_0)


def test_case_6():
    bool_0 = True
    with pytest.raises(OverflowError):
        module_0.roman_range(bool_0, step=bool_0)


def test_case_7():
    regex_flag_0 = module_1.RegexFlag.IGNORECASE
    generator_0 = module_0.roman_range(regex_flag_0)
    error_0 = module_2.Error(*generator_0)
    assert (
        f"{type(error_0).__module__}.{type(error_0).__qualname__}" == "binascii.Error"
    )


@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = module_0.uuid()
    module_0.roman_range(str_0)


def test_case_9():
    bool_0 = True
    str_0 = module_0.random_string(bool_0)
    int_0 = -1856
    with pytest.raises(ValueError):
        module_0.random_string(int_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    int_0 = 77
    str_0 = module_0.secure_random_hex(int_0)
    bool_0 = True
    module_0.roman_range(int_0, str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    bool_0 = False
    int_0 = 3231
    module_0.roman_range(bool_0, step=int_0)


def test_case_12():
    str_0 = module_0.uuid()
    str_1 = module_0.uuid()
    int_0 = 2275
    str_2 = module_0.secure_random_hex(int_0)
    bool_0 = True
    str_3 = module_0.random_string(bool_0)
    bool_1 = True
    int_1 = 2311
    str_4 = module_0.secure_random_hex(bool_1)
    with pytest.raises(OverflowError):
        module_0.roman_range(bool_1, int_1)


def test_case_13():
    str_0 = module_0.uuid()
    var_0 = module_1.purge()
    bool_0 = True
    str_1 = module_0.random_string(bool_0)
    str_2 = module_0.uuid()
    bool_1 = True
    bool_2 = True
    str_3 = module_0.uuid(bool_2)
    str_4 = module_0.secure_random_hex(bool_1)
    str_5 = module_0.uuid()
    int_0 = 164
    int_1 = -1631
    with pytest.raises(OverflowError):
        module_0.roman_range(int_0, step=int_1)


@pytest.mark.xfail(strict=True)
def test_case_14():
    str_0 = module_0.uuid()
    str_1 = module_0.uuid()
    str_2 = module_0.uuid(str_0)
    int_0 = 2275
    str_3 = module_0.secure_random_hex(int_0)
    bool_0 = True
    str_4 = module_0.random_string(bool_0)
    str_5 = module_0.uuid()
    generator_0 = module_0.roman_range(int_0)
    bool_1 = True
    str_6 = module_0.secure_random_hex(bool_1)
    str_7 = module_0.uuid()
    int_1 = 4019
    bool_2 = False
    module_0.roman_range(int_1, str_6, bool_2)


def test_case_15():
    str_0 = module_0.uuid()
    template_0 = module_3.Template(str_0)
    int_0 = 2254
    str_1 = module_0.uuid()
    generator_0 = module_0.roman_range(int_0)
    bool_0 = True
    str_2 = module_0.secure_random_hex(bool_0)
    str_3 = module_0.uuid()
    str_4 = module_0.uuid()
    int_1 = -1638
    error_0 = module_2.Error(*generator_0)
    assert (
        f"{type(error_0).__module__}.{type(error_0).__qualname__}" == "binascii.Error"
    )
    with pytest.raises(OverflowError):
        module_0.roman_range(bool_0, step=int_1)


def test_case_16():
    regex_flag_0 = module_1.RegexFlag.MULTILINE
    str_0 = module_0.uuid(regex_flag_0)
    str_1 = module_0.uuid()
    str_2 = module_0.uuid()
    generator_0 = module_0.roman_range(regex_flag_0)
    error_0 = module_2.Error(*generator_0)
    assert (
        f"{type(error_0).__module__}.{type(error_0).__qualname__}" == "binascii.Error"
    )
