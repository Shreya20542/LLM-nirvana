# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
from pdir.api import PrettyDir, PrettyAttribute # 
import inspect as module_1
import platform as module_2
import enum as module_3
import ast as module_4
from pdir.attr_category import AttrCategory #  


def test_case_0():
    pretty_dir_0 = PrettyDir()
    assert (
        f"{type(pretty_dir_0).__module__}.{type(pretty_dir_0).__qualname__}"
        == "api.PrettyDir"
    )
    assert len(pretty_dir_0) == 0
    assert (
        f"{type(PrettyDir.properties).__module__}.{type(PrettyDir.properties).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(PrettyDir.methods).__module__}.{type(PrettyDir.methods).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(PrettyDir.public).__module__}.{type(PrettyDir.public).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(PrettyDir.own).__module__}.{type(PrettyDir.own).__qualname__}"
        == "builtins.property"
    )


def test_case_1():
    none_type_0 = None
    pretty_dir_0 = PrettyDir(pattrs=none_type_0)
    assert (
        f"{type(pretty_dir_0).__module__}.{type(pretty_dir_0).__qualname__}"
        == "api.PrettyDir"
    )
    assert len(pretty_dir_0) == 1
    assert (
        f"{type(PrettyDir.properties).__module__}.{type(PrettyDir.properties).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(PrettyDir.methods).__module__}.{type(PrettyDir.methods).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(PrettyDir.public).__module__}.{type(PrettyDir.public).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(PrettyDir.own).__module__}.{type(PrettyDir.own).__qualname__}"
        == "builtins.property"
    )
    str_0 = pretty_dir_0.__repr__()
    assert str_0 == "\x1b[0;33mproperty:\x1b[0m\n    \x1b[0;36mvar_0\x1b[0m"
    pretty_dir_1 = PrettyDir(none_type_0)
    assert (
        f"{type(pretty_dir_1).__module__}.{type(pretty_dir_1).__qualname__}"
        == "api.PrettyDir"
    )
    assert len(pretty_dir_1) == 24
    str_1 = "ff?z\x0cVu.\rh<"
    pretty_dir_2 = pretty_dir_0.search(str_1)
    assert len(pretty_dir_2) == 0
    pretty_dir_3 = PrettyDir()
    assert len(pretty_dir_3) == 6


def test_case_2():
    pretty_dir_0 = PrettyDir()
    assert (
        f"{type(pretty_dir_0).__module__}.{type(pretty_dir_0).__qualname__}"
        == "api.PrettyDir"
    )
    assert len(pretty_dir_0) == 0
    assert (
        f"{type(PrettyDir.properties).__module__}.{type(PrettyDir.properties).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(PrettyDir.methods).__module__}.{type(PrettyDir.methods).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(PrettyDir.public).__module__}.{type(PrettyDir.public).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(PrettyDir.own).__module__}.{type(PrettyDir.own).__qualname__}"
        == "builtins.property"
    )
    pretty_dir_1 = PrettyDir(pretty_dir_0)
    assert (
        f"{type(pretty_dir_1).__module__}.{type(pretty_dir_1).__qualname__}"
        == "api.PrettyDir"
    )
    assert len(pretty_dir_1) == 38


def test_case_3():
    none_type_0 = None
    pretty_dir_0 = PrettyDir(pattrs=none_type_0)
    assert (
        f"{type(pretty_dir_0).__module__}.{type(pretty_dir_0).__qualname__}"
        == "api.PrettyDir"
    )
    assert len(pretty_dir_0) == 1
    assert (
        f"{type(PrettyDir.properties).__module__}.{type(PrettyDir.properties).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(PrettyDir.methods).__module__}.{type(PrettyDir.methods).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(PrettyDir.public).__module__}.{type(PrettyDir.public).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(PrettyDir.own).__module__}.{type(PrettyDir.own).__qualname__}"
        == "builtins.property"
    )


@pytest.mark.xfail(strict=True)
def test_case_4():
    pretty_dir_0 = PrettyDir()
    assert (
        f"{type(pretty_dir_0).__module__}.{type(pretty_dir_0).__qualname__}"
        == "api.PrettyDir"
    )
    assert len(pretty_dir_0) == 0
    assert (
        f"{type(PrettyDir.properties).__module__}.{type(PrettyDir.properties).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(PrettyDir.methods).__module__}.{type(PrettyDir.methods).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(PrettyDir.public).__module__}.{type(PrettyDir.public).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(PrettyDir.own).__module__}.{type(PrettyDir.own).__qualname__}"
        == "builtins.property"
    )
    pretty_dir_0.index(pretty_dir_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    var_0 = module_1.currentframe()
    pretty_dir_0 = PrettyDir(var_0)
    assert (
        f"{type(pretty_dir_0).__module__}.{type(pretty_dir_0).__qualname__}"
        == "api.PrettyDir"
    )
    assert len(pretty_dir_0) == 34
    assert (
        f"{type(PrettyDir.properties).__module__}.{type(PrettyDir.properties).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(PrettyDir.methods).__module__}.{type(PrettyDir.methods).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(PrettyDir.public).__module__}.{type(PrettyDir.public).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(PrettyDir.own).__module__}.{type(PrettyDir.own).__qualname__}"
        == "builtins.property"
    )
    pretty_dir_0.search(var_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    pretty_dir_0 = PrettyDir()
    assert (
        f"{type(pretty_dir_0).__module__}.{type(pretty_dir_0).__qualname__}"
        == "api.PrettyDir"
    )
    assert len(pretty_dir_0) == 0
    assert (
        f"{type(PrettyDir.properties).__module__}.{type(PrettyDir.properties).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(PrettyDir.methods).__module__}.{type(PrettyDir.methods).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(PrettyDir.public).__module__}.{type(PrettyDir.public).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(PrettyDir.own).__module__}.{type(PrettyDir.own).__qualname__}"
        == "builtins.property"
    )
    pretty_dir_1 = PrettyDir(pretty_dir_0)
    assert (
        f"{type(pretty_dir_1).__module__}.{type(pretty_dir_1).__qualname__}"
        == "api.PrettyDir"
    )
    assert len(pretty_dir_1) == 38
    int_0 = pretty_dir_1.__len__()
    assert int_0 == 38
    pretty_dir_1.index(pretty_dir_1)


@pytest.mark.xfail(strict=True)
def test_case_7():
    pretty_dir_0 = PrettyDir()
    assert (
        f"{type(pretty_dir_0).__module__}.{type(pretty_dir_0).__qualname__}"
        == "api.PrettyDir"
    )
    assert len(pretty_dir_0) == 0
    assert (
        f"{type(PrettyDir.properties).__module__}.{type(PrettyDir.properties).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(PrettyDir.methods).__module__}.{type(PrettyDir.methods).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(PrettyDir.public).__module__}.{type(PrettyDir.public).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(PrettyDir.own).__module__}.{type(PrettyDir.own).__qualname__}"
        == "builtins.property"
    )
    int_0 = 2581
    pretty_dir_0.__getitem__(int_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = ";x!"
    PrettyAttribute(str_0, str_0, str_0)


def test_case_9():
    none_type_0 = None
    pretty_dir_0 = PrettyDir(pattrs=none_type_0)
    assert (
        f"{type(pretty_dir_0).__module__}.{type(pretty_dir_0).__qualname__}"
        == "api.PrettyDir"
    )
    assert len(pretty_dir_0) == 1
    assert (
        f"{type(PrettyDir.properties).__module__}.{type(PrettyDir.properties).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(PrettyDir.methods).__module__}.{type(PrettyDir.methods).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(PrettyDir.public).__module__}.{type(PrettyDir.public).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(PrettyDir.own).__module__}.{type(PrettyDir.own).__qualname__}"
        == "builtins.property"
    )
    str_0 = pretty_dir_0.__repr__()
    assert str_0 == "\x1b[0;33mproperty:\x1b[0m\n    \x1b[0;36mvar_0\x1b[0m"
    pretty_dir_1 = PrettyDir(none_type_0)
    assert (
        f"{type(pretty_dir_1).__module__}.{type(pretty_dir_1).__qualname__}"
        == "api.PrettyDir"
    )
    assert len(pretty_dir_1) == 24
    var_0 = module_2.uname()
    var_1 = module_1.currentframe()
    str_1 = "h;UT*`*$|"
    pretty_dir_2 = pretty_dir_0.search(str_1, var_0)
    assert len(pretty_dir_2) == 0
    pretty_attribute_0 = PrettyAttribute(var_0, var_0, var_0)
    assert pretty_attribute_0.doc == "A uname_result that's largely compatible with a"
    assert pretty_attribute_0.slotted is False
    pretty_dir_3 = PrettyDir()
    assert len(pretty_dir_3) == 9


def test_case_10():
    var_0 = module_1.currentframe()
    pretty_dir_0 = PrettyDir(var_0)
    assert (
        f"{type(pretty_dir_0).__module__}.{type(pretty_dir_0).__qualname__}"
        == "api.PrettyDir"
    )
    assert len(pretty_dir_0) == 34
    assert (
        f"{type(PrettyDir.properties).__module__}.{type(PrettyDir.properties).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(PrettyDir.methods).__module__}.{type(PrettyDir.methods).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(PrettyDir.public).__module__}.{type(PrettyDir.public).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(PrettyDir.own).__module__}.{type(PrettyDir.own).__qualname__}"
        == "builtins.property"
    )


def test_case_11():
    pretty_dir_0 = module_2.win32_is_iot()
    pretty_dir_1 = PrettyDir(pretty_dir_0)
    assert (
        f"{type(pretty_dir_1).__module__}.{type(pretty_dir_1).__qualname__}"
        == "api.PrettyDir"
    )
    assert len(pretty_dir_1) == 72
    assert (
        f"{type(PrettyDir.properties).__module__}.{type(PrettyDir.properties).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(PrettyDir.methods).__module__}.{type(PrettyDir.methods).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(PrettyDir.public).__module__}.{type(PrettyDir.public).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(PrettyDir.own).__module__}.{type(PrettyDir.own).__qualname__}"
        == "builtins.property"
    )


def test_case_12():
    none_type_0 = None
    pretty_dir_0 = PrettyDir(pattrs=none_type_0)
    assert (
        f"{type(pretty_dir_0).__module__}.{type(pretty_dir_0).__qualname__}"
        == "api.PrettyDir"
    )
    assert len(pretty_dir_0) == 1
    assert (
        f"{type(PrettyDir.properties).__module__}.{type(PrettyDir.properties).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(PrettyDir.methods).__module__}.{type(PrettyDir.methods).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(PrettyDir.public).__module__}.{type(PrettyDir.public).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(PrettyDir.own).__module__}.{type(PrettyDir.own).__qualname__}"
        == "builtins.property"
    )
    var_0 = module_1.getmembers(pretty_dir_0)
    pretty_dir_1 = PrettyDir(var_0)
    assert (
        f"{type(pretty_dir_1).__module__}.{type(pretty_dir_1).__qualname__}"
        == "api.PrettyDir"
    )
    assert len(pretty_dir_1) == 47
    str_0 = "7t:p6ul#R<e(.\\RB8]7"
    with pytest.raises(TypeError):
        module_1.getargs(str_0)


@pytest.mark.xfail(strict=True)
def test_case_13():
    none_type_0 = None
    pretty_dir_0 = PrettyDir(pattrs=none_type_0)
    assert (
        f"{type(pretty_dir_0).__module__}.{type(pretty_dir_0).__qualname__}"
        == "api.PrettyDir"
    )
    assert len(pretty_dir_0) == 1
    assert (
        f"{type(PrettyDir.properties).__module__}.{type(PrettyDir.properties).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(PrettyDir.methods).__module__}.{type(PrettyDir.methods).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(PrettyDir.public).__module__}.{type(PrettyDir.public).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(PrettyDir.own).__module__}.{type(PrettyDir.own).__qualname__}"
        == "builtins.property"
    )
    pretty_dir_1 = PrettyDir(none_type_0)
    assert (
        f"{type(pretty_dir_1).__module__}.{type(pretty_dir_1).__qualname__}"
        == "api.PrettyDir"
    )
    assert len(pretty_dir_1) == 24
    var_0 = module_1.currentframe()
    str_0 = ""
    pretty_dir_2 = pretty_dir_0.search(str_0)
    assert len(pretty_dir_2) == 1
    var_0.__iand__(pretty_dir_2)


@pytest.mark.xfail(strict=True)
def test_case_14():
    none_type_0 = None
    pretty_dir_0 = PrettyDir(pattrs=none_type_0)
    assert (
        f"{type(pretty_dir_0).__module__}.{type(pretty_dir_0).__qualname__}"
        == "api.PrettyDir"
    )
    assert len(pretty_dir_0) == 1
    assert (
        f"{type(PrettyDir.properties).__module__}.{type(PrettyDir.properties).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(PrettyDir.methods).__module__}.{type(PrettyDir.methods).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(PrettyDir.public).__module__}.{type(PrettyDir.public).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(PrettyDir.own).__module__}.{type(PrettyDir.own).__qualname__}"
        == "builtins.property"
    )
    str_0 = pretty_dir_0.__repr__()
    assert str_0 == "\x1b[0;33mproperty:\x1b[0m\n    \x1b[0;36mvar_0\x1b[0m"
    int_0 = pretty_dir_0.__len__()
    assert int_0 == 1
    int_1 = pretty_dir_0.__len__()
    assert int_1 == 1
    var_0 = module_1.getmembers(pretty_dir_0)
    str_1 = "ff?z\x0cVu.\rh<"
    enum_dict_0 = module_3._EnumDict()
    var_1 = var_0.__repr__()
    pretty_dir_1 = PrettyDir(int_1)
    assert (
        f"{type(pretty_dir_1).__module__}.{type(pretty_dir_1).__qualname__}"
        == "api.PrettyDir"
    )
    assert len(pretty_dir_1) == 72
    PrettyDir(none_type_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_15():
    none_type_0 = None
    none_type_1 = None
    pretty_dir_0 = PrettyDir(pattrs=none_type_1)
    assert (
        f"{type(pretty_dir_0).__module__}.{type(pretty_dir_0).__qualname__}"
        == "api.PrettyDir"
    )
    assert len(pretty_dir_0) == 2
    assert (
        f"{type(PrettyDir.properties).__module__}.{type(PrettyDir.properties).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(PrettyDir.methods).__module__}.{type(PrettyDir.methods).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(PrettyDir.public).__module__}.{type(PrettyDir.public).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(PrettyDir.own).__module__}.{type(PrettyDir.own).__qualname__}"
        == "builtins.property"
    )
    pretty_dir_1 = PrettyDir(pretty_dir_0)
    assert (
        f"{type(pretty_dir_1).__module__}.{type(pretty_dir_1).__qualname__}"
        == "api.PrettyDir"
    )
    assert len(pretty_dir_1) == 38
    str_0 = "F1}"
    pretty_dir_2 = pretty_dir_0.search(str_0)
    assert len(pretty_dir_2) == 0
    pretty_attribute_0 = PrettyAttribute(str_0, pretty_dir_0, none_type_0)
    assert len(pretty_attribute_0.category) == 2
    assert pretty_attribute_0.display_group == "var_1"
    assert pretty_attribute_0.doc == ""
    assert pretty_attribute_0.slotted is False
    str_1 = pretty_attribute_0.get_oneline_doc()
    assert str_1 == ""
    int_0 = pretty_dir_1.__len__()
    assert int_0 == 38
    str_2 = pretty_dir_0.__repr__()
    assert (
        str_2
        == "\x1b[0;33mproperty:\x1b[0m\n    \x1b[0;36mvar_0\x1b[0m\x1b[1;30m, \x1b[0m\x1b[0;36mvar_1\x1b[0m"
    )
    str_3 = "*1.%8o@SOQ\\a6-"
    pretty_dir_3 = pretty_dir_0.search(str_3, pretty_dir_1)
    assert len(pretty_dir_3) == 0
    int_1 = pretty_dir_0.__len__()
    assert int_1 == 2
    int_2 = pretty_dir_2.__len__()
    assert int_2 == 0
    var_0 = module_1.cleandoc(str_2)
    assert (
        var_0
        == "\x1b[0;33mproperty:\x1b[0m\n\x1b[0;36mvar_0\x1b[0m\x1b[1;30m, \x1b[0m\x1b[0;36mvar_1\x1b[0m"
    )
    var_1 = module_1.getmembers(pretty_dir_1, none_type_0)
    str_4 = "ff?z\x0cVu.\rh<"
    enum_dict_0 = module_3._EnumDict()
    var_1.search(str_4)


@pytest.mark.xfail(strict=True)
def test_case_16():
    none_type_0 = None
    none_type_1 = None
    pretty_dir_0 = PrettyDir(pattrs=none_type_1)
    assert (
        f"{type(pretty_dir_0).__module__}.{type(pretty_dir_0).__qualname__}"
        == "api.PrettyDir"
    )
    assert len(pretty_dir_0) == 2
    assert (
        f"{type(PrettyDir.properties).__module__}.{type(PrettyDir.properties).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(PrettyDir.methods).__module__}.{type(PrettyDir.methods).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(PrettyDir.public).__module__}.{type(PrettyDir.public).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(PrettyDir.own).__module__}.{type(PrettyDir.own).__qualname__}"
        == "builtins.property"
    )
    int_0 = pretty_dir_0.__len__()
    assert int_0 == 2
    pretty_dir_1 = PrettyDir(pretty_dir_0)
    assert (
        f"{type(pretty_dir_1).__module__}.{type(pretty_dir_1).__qualname__}"
        == "api.PrettyDir"
    )
    assert len(pretty_dir_1) == 38
    str_0 = ""
    str_1 = pretty_dir_0.__repr__()
    assert (
        str_1
        == "\x1b[0;33mproperty:\x1b[0m\n    \x1b[0;36mvar_0\x1b[0m\x1b[1;30m, \x1b[0m\x1b[0;36mvar_1\x1b[0m"
    )
    pretty_dir_2 = pretty_dir_0.search(str_0)
    assert len(pretty_dir_2) == 2
    pretty_attribute_0 = PrettyAttribute(str_0, pretty_dir_0, none_type_0)
    assert len(pretty_attribute_0.category) == 2
    assert pretty_attribute_0.display_group == "var_1"
    assert pretty_attribute_0.doc == ""
    assert pretty_attribute_0.slotted is False
    str_2 = pretty_attribute_0.get_oneline_doc()
    assert str_2 == ""
    int_1 = pretty_dir_1.__len__()
    assert int_1 == 38
    str_3 = pretty_dir_0.__repr__()
    assert (
        str_3
        == "\x1b[0;33mproperty:\x1b[0m\n    \x1b[0;36mvar_0\x1b[0m\x1b[1;30m, \x1b[0m\x1b[0;36mvar_1\x1b[0m"
    )
    pretty_dir_3 = pretty_dir_0.search(str_0, pretty_dir_1)
    assert len(pretty_dir_3) == 2
    int_2 = pretty_dir_0.__len__()
    assert int_2 == 2
    int_3 = pretty_dir_2.__len__()
    assert int_3 == 2
    var_0 = module_1.cleandoc(str_3)
    assert (
        var_0
        == "\x1b[0;33mproperty:\x1b[0m\n\x1b[0;36mvar_0\x1b[0m\x1b[1;30m, \x1b[0m\x1b[0;36mvar_1\x1b[0m"
    )
    int_4 = pretty_dir_0.__len__()
    assert int_4 == 2
    var_1 = module_1.getmembers(pretty_dir_0)
    pretty_dir_2.search(int_4, str_3)


@pytest.mark.xfail(strict=True)
def test_case_17():
    none_type_0 = None
    none_type_1 = None
    pretty_dir_0 = PrettyDir(pattrs=none_type_1)
    assert (
        f"{type(pretty_dir_0).__module__}.{type(pretty_dir_0).__qualname__}"
        == "api.PrettyDir"
    )
    assert len(pretty_dir_0) == 2
    assert (
        f"{type(PrettyDir.properties).__module__}.{type(PrettyDir.properties).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(PrettyDir.methods).__module__}.{type(PrettyDir.methods).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(PrettyDir.public).__module__}.{type(PrettyDir.public).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(PrettyDir.own).__module__}.{type(PrettyDir.own).__qualname__}"
        == "builtins.property"
    )
    pretty_dir_1 = PrettyDir(pretty_dir_0)
    assert (
        f"{type(pretty_dir_1).__module__}.{type(pretty_dir_1).__qualname__}"
        == "api.PrettyDir"
    )
    assert len(pretty_dir_1) == 38
    str_0 = "Q` `O>8}^&eQ?>DyS\t"
    pretty_dir_2 = pretty_dir_1.search(str_0)
    assert len(pretty_dir_2) == 0
    str_1 = "F1}"
    pretty_dir_3 = pretty_dir_0.search(str_1)
    assert len(pretty_dir_3) == 0
    pretty_attribute_0 = PrettyAttribute(str_1, pretty_dir_0, none_type_0)
    assert len(pretty_attribute_0.category) == 2
    assert pretty_attribute_0.display_group == "var_1"
    assert pretty_attribute_0.doc == ""
    assert pretty_attribute_0.slotted is False
    str_2 = pretty_attribute_0.get_oneline_doc()
    assert str_2 == ""
    int_0 = pretty_dir_1.__len__()
    assert int_0 == 38
    str_3 = pretty_dir_0.__repr__()
    assert (
        str_3
        == "\x1b[0;33mproperty:\x1b[0m\n    \x1b[0;36mvar_0\x1b[0m\x1b[1;30m, \x1b[0m\x1b[0;36mvar_1\x1b[0m"
    )
    str_4 = "*1.%8o@SOQ\\a6-"
    pretty_dir_4 = pretty_dir_0.search(str_4, pretty_dir_1)
    assert len(pretty_dir_4) == 0
    int_1 = pretty_dir_0.__len__()
    assert int_1 == 2
    var_0 = module_1.cleandoc(str_3)
    assert (
        var_0
        == "\x1b[0;33mproperty:\x1b[0m\n\x1b[0;36mvar_0\x1b[0m\x1b[1;30m, \x1b[0m\x1b[0;36mvar_1\x1b[0m"
    )
    int_2 = var_0.isalnum()
    var_1 = module_4.NameConstant()
    enum_dict_0 = module_3._EnumDict()
    pretty_dir_5 = pretty_dir_3.search(int_2, str_3)
    assert (
        f"{type(pretty_dir_5).__module__}.{type(pretty_dir_5).__qualname__}"
        == "api.PrettyDir"
    )
    assert len(pretty_dir_5) == 0
    pretty_dir_6 = PrettyDir(var_1)
    assert len(pretty_dir_6) == 34
    pretty_dir_7 = PrettyDir()
    assert len(pretty_dir_7) == 21
    pretty_dir_6.search(pretty_dir_7, var_1)


@pytest.mark.xfail(strict=True)
def test_case_18():
    none_type_0 = None
    attr_category_0 = AttrCategory.DESCRIPTOR
    tuple_0 = (attr_category_0, attr_category_0)
    PrettyAttribute(none_type_0, tuple_0, none_type_0)
