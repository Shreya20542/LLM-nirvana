# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import validators as module_0
import collections as module_1


def test_case_0():
    bytes_0 = b"r^@(t\x1d\x96\xf5\xa92V\xf4\xd4\x12\xe5c\xe2\xa4x"
    with pytest.raises(TypeError):
        module_0.validate_identifier(bytes_0)


def test_case_1():
    str_0 = "(}/]d w-<_pd\npS+-%"
    bool_0 = True
    with pytest.raises(SyntaxError):
        module_0.validate_identifier(str_0, bool_0)


def test_case_2():
    str_0 = ""
    with pytest.raises(SyntaxError):
        module_0.validate_identifier(str_0)


def test_case_3():
    str_0 = "4rs*2.nYFc5]E\tvh{B"
    bool_0 = False
    with pytest.raises(SyntaxError):
        module_0.validate_identifier(str_0, bool_0)


def test_case_4():
    str_0 = "K"
    bool_0 = False
    none_type_0 = module_0.validate_identifier(str_0, bool_0)


def test_case_5():
    str_0 = "(}/]d w-<_pd\n%\x0bpS+-%"
    bool_0 = False
    with pytest.raises(SyntaxError):
        module_0.validate_identifier(str_0, bool_0)


def test_case_6():
    bool_0 = True
    tuple_0 = (bool_0,)
    tuple_1 = (tuple_0,)
    user_string_0 = module_1.UserString(tuple_1)
    var_0 = user_string_0.casefold()
    with pytest.raises(SyntaxError):
        module_0.validate_identifier(user_string_0)


def test_case_7():
    bool_0 = True
    user_string_0 = module_1.UserString(bool_0)
    with pytest.raises(SyntaxError):
        module_0.validate_identifier(user_string_0)


def test_case_8():
    str_0 = "_"
    none_type_0 = module_0.validate_identifier(str_0)
    none_type_1 = module_0.validate_identifier(str_0)
    bool_0 = False
    with pytest.raises(SyntaxError):
        module_0.validate_identifier(str_0, bool_0)


def test_case_9():
    str_0 = "__doc__"
    with pytest.raises(SyntaxError):
        module_0.validate_identifier(str_0)
