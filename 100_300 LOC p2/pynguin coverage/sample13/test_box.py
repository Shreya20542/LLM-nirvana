# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import box as module_0


def test_case_0():
    none_type_0 = None
    box_0 = module_0.Box(none_type_0)
    assert f"{type(box_0).__module__}.{type(box_0).__qualname__}" == "box.Box"
    assert box_0.value is None
    bool_0 = False
    box_1 = module_0.Box(bool_0)
    bool_1 = box_1.__eq__(box_0)
    assert bool_1 is False
    box_2 = module_0.Box(bool_1)
    assert box_2.value is False


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "U<yU`"
    box_0 = module_0.Box(str_0)
    assert f"{type(box_0).__module__}.{type(box_0).__qualname__}" == "box.Box"
    assert box_0.value == "U<yU`"
    bool_0 = box_0.__eq__(str_0)
    assert bool_0 is False
    box_0.to_lazy()


def test_case_2():
    str_0 = "U<yU`"
    bool_0 = str_0.__eq__(str_0)


def test_case_3():
    str_0 = "\nr9z2zb:}P"
    box_0 = module_0.Box(str_0)
    assert f"{type(box_0).__module__}.{type(box_0).__qualname__}" == "box.Box"
    assert box_0.value == "\nr9z2zb:}P"


@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = False
    box_0 = module_0.Box(bool_0)
    assert f"{type(box_0).__module__}.{type(box_0).__qualname__}" == "box.Box"
    assert box_0.value is False
    str_0 = box_0.__str__()
    assert str_0 == "Box[value=False]"
    box_0.bind(box_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    none_type_0 = None
    box_0 = module_0.Box(none_type_0)
    assert f"{type(box_0).__module__}.{type(box_0).__qualname__}" == "box.Box"
    assert box_0.value is None
    box_0.map(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = "}0`1N8>P}hza~J-`+7+_"
    box_0 = module_0.Box(str_0)
    assert f"{type(box_0).__module__}.{type(box_0).__qualname__}" == "box.Box"
    assert box_0.value == "}0`1N8>P}hza~J-`+7+_"
    box_0.ap(str_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    dict_0 = {}
    box_0 = module_0.Box(dict_0)
    assert f"{type(box_0).__module__}.{type(box_0).__qualname__}" == "box.Box"
    assert box_0.value == {}
    box_0.to_maybe()


@pytest.mark.xfail(strict=True)
def test_case_8():
    int_0 = -2485
    box_0 = module_0.Box(int_0)
    assert f"{type(box_0).__module__}.{type(box_0).__qualname__}" == "box.Box"
    assert box_0.value == -2485
    box_0.to_either()


@pytest.mark.xfail(strict=True)
def test_case_9():
    float_0 = 1500.0962
    box_0 = module_0.Box(float_0)
    assert f"{type(box_0).__module__}.{type(box_0).__qualname__}" == "box.Box"
    assert box_0.value == pytest.approx(1500.0962, abs=0.01, rel=0.01)
    box_0.to_lazy()


@pytest.mark.xfail(strict=True)
def test_case_10():
    str_0 = "\nr9z2zb:}P"
    box_0 = module_0.Box(str_0)
    assert f"{type(box_0).__module__}.{type(box_0).__qualname__}" == "box.Box"
    assert box_0.value == "\nr9z2zb:}P"
    box_0.to_try()


@pytest.mark.xfail(strict=True)
def test_case_11():
    bytes_0 = b"\xa3\xf8\xbc\x89V\x92\xd8r\xbe9_>\x9e\xa4\x1e\x8e\xc3"
    box_0 = module_0.Box(bytes_0)
    assert f"{type(box_0).__module__}.{type(box_0).__qualname__}" == "box.Box"
    assert box_0.value == b"\xa3\xf8\xbc\x89V\x92\xd8r\xbe9_>\x9e\xa4\x1e\x8e\xc3"
    box_0.to_validation()
