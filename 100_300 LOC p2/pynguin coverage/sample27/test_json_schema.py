# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import json_schema as module_0
import enum as module_1
import fields as module_2
import composites as module_3
import re as module_4
import schemas as module_5


def test_case_0():
    bool_0 = False
    field_0 = module_0.from_json_schema(bool_0)
    assert (
        f"{type(field_0).__module__}.{type(field_0).__qualname__}"
        == "composites.NeverMatch"
    )
    assert field_0.title == ""
    assert field_0.description == ""
    assert field_0.allow_null is False
    assert module_0.TYPE_CONSTRAINTS == {
        "minItems",
        "pattern",
        "additionalProperties",
        "maximum",
        "exclusiveMinimum",
        "multipleOf",
        "properties",
        "minLength",
        "items",
        "propertyNames",
        "maxProperties",
        "uniqueItems",
        "boolean_schema",
        "minProperties",
        "exclusiveMaximum",
        "minimum",
        "maxLength",
        "maxItems",
        "additionalItems",
        "contains",
        "required",
        "patternProperties",
        "type",
        "dependencies",
    }


def test_case_1():
    dict_0 = {}
    field_0 = module_0.from_json_schema(dict_0)
    assert f"{type(field_0).__module__}.{type(field_0).__qualname__}" == "fields.Any"
    assert field_0.title == ""
    assert field_0.description == ""
    assert field_0.allow_null is False
    assert module_0.TYPE_CONSTRAINTS == {
        "minItems",
        "pattern",
        "additionalProperties",
        "maximum",
        "exclusiveMinimum",
        "multipleOf",
        "properties",
        "minLength",
        "items",
        "propertyNames",
        "maxProperties",
        "uniqueItems",
        "boolean_schema",
        "minProperties",
        "exclusiveMaximum",
        "minimum",
        "maxLength",
        "maxItems",
        "additionalItems",
        "contains",
        "required",
        "patternProperties",
        "type",
        "dependencies",
    }


def test_case_2():
    dict_0 = {}
    field_0 = module_0.type_from_json_schema(dict_0, dict_0)
    assert f"{type(field_0).__module__}.{type(field_0).__qualname__}" == "fields.Union"
    assert field_0.default is None
    assert field_0.title == ""
    assert field_0.description == ""
    assert field_0.allow_null is True
    assert (
        f"{type(field_0.any_of).__module__}.{type(field_0.any_of).__qualname__}"
        == "builtins.list"
    )
    assert len(field_0.any_of) == 5
    assert module_0.TYPE_CONSTRAINTS == {
        "minItems",
        "pattern",
        "additionalProperties",
        "maximum",
        "exclusiveMinimum",
        "multipleOf",
        "properties",
        "minLength",
        "items",
        "propertyNames",
        "maxProperties",
        "uniqueItems",
        "boolean_schema",
        "minProperties",
        "exclusiveMaximum",
        "minimum",
        "maxLength",
        "maxItems",
        "additionalItems",
        "contains",
        "required",
        "patternProperties",
        "type",
        "dependencies",
    }


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"\xc8\x9c\x9c\x98%\xa64\x89E\xa8YoU"
    module_0.to_json_schema(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    dict_0 = {}
    module_0.enum_from_json_schema(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    dict_0 = module_1._EnumDict()
    module_0.all_of_from_json_schema(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    none_type_0 = None
    module_0.any_of_from_json_schema(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    bytes_0 = b"\xe7\xeb>7\x97\x8f\xfe\xb2{Q\x92\xc0\xd8uz\x9c\xa9;"
    module_0.not_from_json_schema(bytes_0, bytes_0)


def test_case_8():
    dict_0 = {}
    with pytest.raises(AssertionError):
        module_0.from_json_schema_type(dict_0, dict_0, dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    none_type_0 = None
    module_0.one_of_from_json_schema(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    dict_0 = {}
    module_0.to_json_schema(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    dict_0 = {}
    module_0.const_from_json_schema(dict_0, dict_0)


def test_case_12():
    dict_0 = {}
    field_0 = module_0.type_from_json_schema(dict_0, dict_0)
    assert f"{type(field_0).__module__}.{type(field_0).__qualname__}" == "fields.Union"
    assert field_0.default is None
    assert field_0.title == ""
    assert field_0.description == ""
    assert field_0.allow_null is True
    assert (
        f"{type(field_0.any_of).__module__}.{type(field_0.any_of).__qualname__}"
        == "builtins.list"
    )
    assert len(field_0.any_of) == 5
    assert module_0.TYPE_CONSTRAINTS == {
        "minItems",
        "pattern",
        "additionalProperties",
        "maximum",
        "exclusiveMinimum",
        "multipleOf",
        "properties",
        "minLength",
        "items",
        "propertyNames",
        "maxProperties",
        "uniqueItems",
        "boolean_schema",
        "minProperties",
        "exclusiveMaximum",
        "minimum",
        "maxLength",
        "maxItems",
        "additionalItems",
        "contains",
        "required",
        "patternProperties",
        "type",
        "dependencies",
    }
    var_0 = module_0.to_json_schema(field_0, field_0)


def test_case_13():
    choice_0 = module_2.Choice()
    var_0 = module_0.to_json_schema(choice_0)
    assert module_0.TYPE_CONSTRAINTS == {
        "minItems",
        "pattern",
        "additionalProperties",
        "maximum",
        "exclusiveMinimum",
        "multipleOf",
        "properties",
        "minLength",
        "items",
        "propertyNames",
        "maxProperties",
        "uniqueItems",
        "boolean_schema",
        "minProperties",
        "exclusiveMaximum",
        "minimum",
        "maxLength",
        "maxItems",
        "additionalItems",
        "contains",
        "required",
        "patternProperties",
        "type",
        "dependencies",
    }


@pytest.mark.xfail(strict=True)
def test_case_14():
    str_0 = "a\x0c"
    not_0 = module_3.Not(str_0)
    module_0.to_json_schema(not_0)


def test_case_15():
    none_type_0 = None
    boolean_0 = module_2.Boolean(default=none_type_0, allow_null=none_type_0)
    var_0 = module_0.to_json_schema(boolean_0)
    assert module_0.TYPE_CONSTRAINTS == {
        "minItems",
        "pattern",
        "additionalProperties",
        "maximum",
        "exclusiveMinimum",
        "multipleOf",
        "properties",
        "minLength",
        "items",
        "propertyNames",
        "maxProperties",
        "uniqueItems",
        "boolean_schema",
        "minProperties",
        "exclusiveMaximum",
        "minimum",
        "maxLength",
        "maxItems",
        "additionalItems",
        "contains",
        "required",
        "patternProperties",
        "type",
        "dependencies",
    }
    field_0 = module_0.from_json_schema(var_0)
    assert (
        f"{type(field_0).__module__}.{type(field_0).__qualname__}" == "fields.Boolean"
    )
    assert field_0.default is None
    assert field_0.title == ""
    assert field_0.description == ""
    assert field_0.allow_null is False


def test_case_16():
    enum_dict_0 = module_1._EnumDict()
    field_0 = module_0.type_from_json_schema(enum_dict_0, enum_dict_0)
    assert f"{type(field_0).__module__}.{type(field_0).__qualname__}" == "fields.Union"
    assert field_0.default is None
    assert field_0.title == ""
    assert field_0.description == ""
    assert field_0.allow_null is True
    assert (
        f"{type(field_0.any_of).__module__}.{type(field_0.any_of).__qualname__}"
        == "builtins.list"
    )
    assert len(field_0.any_of) == 5
    assert module_0.TYPE_CONSTRAINTS == {
        "minItems",
        "pattern",
        "additionalProperties",
        "maximum",
        "exclusiveMinimum",
        "multipleOf",
        "properties",
        "minLength",
        "items",
        "propertyNames",
        "maxProperties",
        "uniqueItems",
        "boolean_schema",
        "minProperties",
        "exclusiveMaximum",
        "minimum",
        "maxLength",
        "maxItems",
        "additionalItems",
        "contains",
        "required",
        "patternProperties",
        "type",
        "dependencies",
    }
    var_0 = module_0.to_json_schema(field_0)
    field_1 = module_0.from_json_schema(var_0)
    assert f"{type(field_1).__module__}.{type(field_1).__qualname__}" == "fields.Union"
    assert field_1.default is None
    assert field_1.title == ""
    assert field_1.description == ""
    assert field_1.allow_null is False
    assert (
        f"{type(field_1.any_of).__module__}.{type(field_1.any_of).__qualname__}"
        == "builtins.list"
    )
    assert len(field_1.any_of) == 5


@pytest.mark.xfail(strict=True)
def test_case_17():
    str_0 = "a\x0c"
    none_type_0 = None
    dict_0 = {str_0: none_type_0, none_type_0: str_0}
    field_0 = module_0.from_json_schema(dict_0)
    assert f"{type(field_0).__module__}.{type(field_0).__qualname__}" == "fields.Any"
    assert field_0.title == ""
    assert field_0.description == ""
    assert field_0.allow_null is False
    assert module_0.TYPE_CONSTRAINTS == {
        "minItems",
        "pattern",
        "additionalProperties",
        "maximum",
        "exclusiveMinimum",
        "multipleOf",
        "properties",
        "minLength",
        "items",
        "propertyNames",
        "maxProperties",
        "uniqueItems",
        "boolean_schema",
        "minProperties",
        "exclusiveMaximum",
        "minimum",
        "maxLength",
        "maxItems",
        "additionalItems",
        "contains",
        "required",
        "patternProperties",
        "type",
        "dependencies",
    }
    var_0 = module_0.to_json_schema(field_0)
    assert var_0 is True
    module_4.escape(var_0)


@pytest.mark.xfail(strict=True)
def test_case_18():
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0, none_type_0: none_type_0}
    tuple_0 = module_0.get_valid_types(dict_0)
    assert module_0.TYPE_CONSTRAINTS == {
        "minItems",
        "pattern",
        "additionalProperties",
        "maximum",
        "exclusiveMinimum",
        "multipleOf",
        "properties",
        "minLength",
        "items",
        "propertyNames",
        "maxProperties",
        "uniqueItems",
        "boolean_schema",
        "minProperties",
        "exclusiveMaximum",
        "minimum",
        "maxLength",
        "maxItems",
        "additionalItems",
        "contains",
        "required",
        "patternProperties",
        "type",
        "dependencies",
    }
    if_then_else_0 = module_3.IfThenElse(dict_0, none_type_0)
    module_0.to_json_schema(if_then_else_0)


def test_case_19():
    str_0 = "f"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    field_0 = module_0.type_from_json_schema(dict_0, dict_0)
    assert f"{type(field_0).__module__}.{type(field_0).__qualname__}" == "fields.Union"
    assert field_0.default is None
    assert field_0.title == ""
    assert field_0.description == ""
    assert field_0.allow_null is True
    assert (
        f"{type(field_0.any_of).__module__}.{type(field_0.any_of).__qualname__}"
        == "builtins.list"
    )
    assert len(field_0.any_of) == 5
    assert module_0.TYPE_CONSTRAINTS == {
        "minItems",
        "pattern",
        "additionalProperties",
        "maximum",
        "exclusiveMinimum",
        "multipleOf",
        "properties",
        "minLength",
        "items",
        "propertyNames",
        "maxProperties",
        "uniqueItems",
        "boolean_schema",
        "minProperties",
        "exclusiveMaximum",
        "minimum",
        "maxLength",
        "maxItems",
        "additionalItems",
        "contains",
        "required",
        "patternProperties",
        "type",
        "dependencies",
    }
    field_1 = module_0.from_json_schema(dict_0)
    assert f"{type(field_1).__module__}.{type(field_1).__qualname__}" == "fields.Any"
    assert field_1.title == ""
    assert field_1.description == ""
    assert field_1.allow_null is False
    var_0 = module_0.to_json_schema(field_1)
    assert var_0 is True
    choice_0 = module_2.Choice()
    not_0 = module_3.Not(field_0)
    assert (
        f"{type(not_0.negated).__module__}.{type(not_0.negated).__qualname__}"
        == "fields.Union"
    )
    var_1 = module_0.to_json_schema(field_0)
    field_2 = module_0.from_json_schema(var_1)
    assert f"{type(field_2).__module__}.{type(field_2).__qualname__}" == "fields.Union"
    assert field_2.default is None
    assert field_2.title == ""
    assert field_2.description == ""
    assert field_2.allow_null is False
    assert (
        f"{type(field_2.any_of).__module__}.{type(field_2.any_of).__qualname__}"
        == "builtins.list"
    )
    assert len(field_2.any_of) == 5
    never_match_0 = module_3.NeverMatch()
    union_0 = never_match_0.__or__(field_2)
    assert union_0.allow_null is False
    assert len(union_0.any_of) == 6
    enum_dict_0 = module_1._EnumDict()
    var_2 = module_0.to_json_schema(never_match_0)
    assert var_2 is False


@pytest.mark.xfail(strict=True)
def test_case_20():
    str_0 = "<y>u<r$\t\x0cPC&:N"
    none_type_0 = None
    dict_0 = {str_0: none_type_0, none_type_0: str_0}
    tuple_0 = module_0.get_valid_types(dict_0)
    assert module_0.TYPE_CONSTRAINTS == {
        "minItems",
        "pattern",
        "additionalProperties",
        "maximum",
        "exclusiveMinimum",
        "multipleOf",
        "properties",
        "minLength",
        "items",
        "propertyNames",
        "maxProperties",
        "uniqueItems",
        "boolean_schema",
        "minProperties",
        "exclusiveMaximum",
        "minimum",
        "maxLength",
        "maxItems",
        "additionalItems",
        "contains",
        "required",
        "patternProperties",
        "type",
        "dependencies",
    }
    field_0 = module_2.Boolean(default=dict_0, allow_null=tuple_0)
    assert field_0.allow_null == (
        {"boolean", "string", "array", "number", "object"},
        True,
    )
    var_0 = module_0.to_json_schema(field_0)
    field_1 = module_0.type_from_json_schema(var_0, none_type_0)
    assert (
        f"{type(field_1).__module__}.{type(field_1).__qualname__}" == "fields.Boolean"
    )
    assert field_1.default == {"<y>u<r$\t\x0cPC&:N": None, None: "<y>u<r$\t\x0cPC&:N"}
    assert field_1.title == ""
    assert field_1.description == ""
    assert field_1.allow_null is True
    var_1 = module_0.to_json_schema(field_0)
    module_4.finditer(dict_0, field_1)


def test_case_21():
    dict_0 = {}
    all_of_0 = module_3.AllOf(dict_0)
    var_0 = module_0.to_json_schema(all_of_0)
    assert module_0.TYPE_CONSTRAINTS == {
        "minItems",
        "pattern",
        "additionalProperties",
        "maximum",
        "exclusiveMinimum",
        "multipleOf",
        "properties",
        "minLength",
        "items",
        "propertyNames",
        "maxProperties",
        "uniqueItems",
        "boolean_schema",
        "minProperties",
        "exclusiveMaximum",
        "minimum",
        "maxLength",
        "maxItems",
        "additionalItems",
        "contains",
        "required",
        "patternProperties",
        "type",
        "dependencies",
    }
    field_0 = module_0.from_json_schema(var_0)
    assert (
        f"{type(field_0).__module__}.{type(field_0).__qualname__}" == "composites.AllOf"
    )
    assert field_0.title == ""
    assert field_0.description == ""
    assert field_0.allow_null is False
    assert field_0.all_of == []


@pytest.mark.xfail(strict=True)
def test_case_22():
    dict_0 = module_1._EnumDict()
    all_of_0 = module_3.AllOf(dict_0)
    var_0 = module_0.to_json_schema(all_of_0)
    assert module_0.TYPE_CONSTRAINTS == {
        "minItems",
        "pattern",
        "additionalProperties",
        "maximum",
        "exclusiveMinimum",
        "multipleOf",
        "properties",
        "minLength",
        "items",
        "propertyNames",
        "maxProperties",
        "uniqueItems",
        "boolean_schema",
        "minProperties",
        "exclusiveMaximum",
        "minimum",
        "maxLength",
        "maxItems",
        "additionalItems",
        "contains",
        "required",
        "patternProperties",
        "type",
        "dependencies",
    }
    all_of_0.__or__(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_23():
    str_0 = "f"
    none_type_0 = None
    dict_0 = {str_0: none_type_0, none_type_0: str_0}
    field_0 = module_3.AllOf(str_0)
    field_1 = module_0.from_json_schema(dict_0)
    assert f"{type(field_1).__module__}.{type(field_1).__qualname__}" == "fields.Any"
    assert field_1.title == ""
    assert field_1.description == ""
    assert field_1.allow_null is False
    assert module_0.TYPE_CONSTRAINTS == {
        "minItems",
        "pattern",
        "additionalProperties",
        "maximum",
        "exclusiveMinimum",
        "multipleOf",
        "properties",
        "minLength",
        "items",
        "propertyNames",
        "maxProperties",
        "uniqueItems",
        "boolean_schema",
        "minProperties",
        "exclusiveMaximum",
        "minimum",
        "maxLength",
        "maxItems",
        "additionalItems",
        "contains",
        "required",
        "patternProperties",
        "type",
        "dependencies",
    }
    module_0.to_json_schema(field_0)


@pytest.mark.xfail(strict=True)
def test_case_24():
    str_0 = "<yIu<r$\t\x0cPC&:N"
    none_type_0 = None
    dict_0 = {str_0: none_type_0, none_type_0: str_0}
    field_0 = module_2.Const(str_0)
    dict_1 = {}
    field_1 = module_0.from_json_schema(dict_1)
    assert f"{type(field_1).__module__}.{type(field_1).__qualname__}" == "fields.Any"
    assert field_1.title == ""
    assert field_1.description == ""
    assert field_1.allow_null is False
    assert module_0.TYPE_CONSTRAINTS == {
        "minItems",
        "pattern",
        "additionalProperties",
        "maximum",
        "exclusiveMinimum",
        "multipleOf",
        "properties",
        "minLength",
        "items",
        "propertyNames",
        "maxProperties",
        "uniqueItems",
        "boolean_schema",
        "minProperties",
        "exclusiveMaximum",
        "minimum",
        "maxLength",
        "maxItems",
        "additionalItems",
        "contains",
        "required",
        "patternProperties",
        "type",
        "dependencies",
    }
    var_0 = module_0.to_json_schema(field_0)
    module_2.Any(description=dict_0)


def test_case_25():
    field_0 = module_2.Field()
    with pytest.raises(ValueError):
        module_0.to_json_schema(field_0)


@pytest.mark.xfail(strict=True)
def test_case_26():
    str_0 = "a\x0cb"
    none_type_0 = None
    dict_0 = {str_0: none_type_0, none_type_0: str_0}
    field_0 = module_2.Const(none_type_0)
    field_1 = module_0.from_json_schema(dict_0)
    assert f"{type(field_1).__module__}.{type(field_1).__qualname__}" == "fields.Any"
    assert field_1.title == ""
    assert field_1.description == ""
    assert field_1.allow_null is False
    assert module_0.TYPE_CONSTRAINTS == {
        "minItems",
        "pattern",
        "additionalProperties",
        "maximum",
        "exclusiveMinimum",
        "multipleOf",
        "properties",
        "minLength",
        "items",
        "propertyNames",
        "maxProperties",
        "uniqueItems",
        "boolean_schema",
        "minProperties",
        "exclusiveMaximum",
        "minimum",
        "maxLength",
        "maxItems",
        "additionalItems",
        "contains",
        "required",
        "patternProperties",
        "type",
        "dependencies",
    }
    var_0 = module_0.to_json_schema(field_0)
    field_2 = module_0.from_json_schema(var_0)
    assert f"{type(field_2).__module__}.{type(field_2).__qualname__}" == "fields.Const"
    assert field_2.title == ""
    assert field_2.description == ""
    assert field_2.allow_null is False
    assert field_2.const is None
    not_0 = module_3.Not(str_0)
    module_4.subn(field_1, dict_0, field_1)


@pytest.mark.xfail(strict=True)
def test_case_27():
    str_0 = "a\x0c"
    none_type_0 = None
    dict_0 = {str_0: none_type_0, none_type_0: str_0}
    field_0 = module_5.Reference(str_0)
    field_1 = module_0.from_json_schema(dict_0)
    assert f"{type(field_1).__module__}.{type(field_1).__qualname__}" == "fields.Any"
    assert field_1.title == ""
    assert field_1.description == ""
    assert field_1.allow_null is False
    assert module_0.TYPE_CONSTRAINTS == {
        "minItems",
        "pattern",
        "additionalProperties",
        "maximum",
        "exclusiveMinimum",
        "multipleOf",
        "properties",
        "minLength",
        "items",
        "propertyNames",
        "maxProperties",
        "uniqueItems",
        "boolean_schema",
        "minProperties",
        "exclusiveMaximum",
        "minimum",
        "maxLength",
        "maxItems",
        "additionalItems",
        "contains",
        "required",
        "patternProperties",
        "type",
        "dependencies",
    }
    module_0.to_json_schema(field_0)


@pytest.mark.xfail(strict=True)
def test_case_28():
    str_0 = "<>u<r$\t\x0cPC&:N"
    none_type_0 = None
    dict_0 = {}
    dict_1 = {str_0: none_type_0, none_type_0: str_0}
    tuple_0 = module_0.get_valid_types(dict_1)
    assert module_0.TYPE_CONSTRAINTS == {
        "minItems",
        "pattern",
        "additionalProperties",
        "maximum",
        "exclusiveMinimum",
        "multipleOf",
        "properties",
        "minLength",
        "items",
        "propertyNames",
        "maxProperties",
        "uniqueItems",
        "boolean_schema",
        "minProperties",
        "exclusiveMaximum",
        "minimum",
        "maxLength",
        "maxItems",
        "additionalItems",
        "contains",
        "required",
        "patternProperties",
        "type",
        "dependencies",
    }
    field_0 = module_0.from_json_schema(dict_0)
    assert f"{type(field_0).__module__}.{type(field_0).__qualname__}" == "fields.Any"
    assert field_0.title == ""
    assert field_0.description == ""
    assert field_0.allow_null is False
    list_0 = [field_0, field_0]
    one_of_0 = module_3.OneOf(list_0)
    var_0 = module_0.to_json_schema(one_of_0, dict_1)
    module_4.compile(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_29():
    str_0 = "f"
    none_type_0 = None
    dict_0 = {str_0: none_type_0, none_type_0: str_0}
    field_0 = module_0.from_json_schema(dict_0)
    assert f"{type(field_0).__module__}.{type(field_0).__qualname__}" == "fields.Any"
    assert field_0.title == ""
    assert field_0.description == ""
    assert field_0.allow_null is False
    assert module_0.TYPE_CONSTRAINTS == {
        "minItems",
        "pattern",
        "additionalProperties",
        "maximum",
        "exclusiveMinimum",
        "multipleOf",
        "properties",
        "minLength",
        "items",
        "propertyNames",
        "maxProperties",
        "uniqueItems",
        "boolean_schema",
        "minProperties",
        "exclusiveMaximum",
        "minimum",
        "maxLength",
        "maxItems",
        "additionalItems",
        "contains",
        "required",
        "patternProperties",
        "type",
        "dependencies",
    }
    one_of_0 = module_3.OneOf(none_type_0)
    module_0.to_json_schema(one_of_0)


def test_case_30():
    str_0 = "a\x0c"
    none_type_0 = None
    dict_0 = {str_0: none_type_0, none_type_0: str_0}
    field_0 = module_0.type_from_json_schema(dict_0, dict_0)
    assert f"{type(field_0).__module__}.{type(field_0).__qualname__}" == "fields.Union"
    assert field_0.default is None
    assert field_0.title == ""
    assert field_0.description == ""
    assert field_0.allow_null is True
    assert (
        f"{type(field_0.any_of).__module__}.{type(field_0.any_of).__qualname__}"
        == "builtins.list"
    )
    assert len(field_0.any_of) == 5
    assert module_0.TYPE_CONSTRAINTS == {
        "minItems",
        "pattern",
        "additionalProperties",
        "maximum",
        "exclusiveMinimum",
        "multipleOf",
        "properties",
        "minLength",
        "items",
        "propertyNames",
        "maxProperties",
        "uniqueItems",
        "boolean_schema",
        "minProperties",
        "exclusiveMaximum",
        "minimum",
        "maxLength",
        "maxItems",
        "additionalItems",
        "contains",
        "required",
        "patternProperties",
        "type",
        "dependencies",
    }
    field_1 = module_0.from_json_schema(dict_0)
    assert f"{type(field_1).__module__}.{type(field_1).__qualname__}" == "fields.Any"
    assert field_1.title == ""
    assert field_1.description == ""
    assert field_1.allow_null is False
    var_0 = module_0.to_json_schema(field_0)
    field_2 = module_0.from_json_schema(dict_0)
    assert f"{type(field_2).__module__}.{type(field_2).__qualname__}" == "fields.Any"
    assert field_2.allow_null is False
    object_0 = module_2.Object(additional_properties=field_2, required=none_type_0)
    assert (
        f"{type(object_0.additional_properties).__module__}.{type(object_0.additional_properties).__qualname__}"
        == "fields.Any"
    )
    var_1 = module_0.to_json_schema(object_0)


def test_case_31():
    str_0 = "a\x0c"
    none_type_0 = None
    dict_0 = {str_0: none_type_0, none_type_0: str_0}
    field_0 = module_0.from_json_schema(dict_0)
    assert f"{type(field_0).__module__}.{type(field_0).__qualname__}" == "fields.Any"
    assert field_0.title == ""
    assert field_0.description == ""
    assert field_0.allow_null is False
    assert module_0.TYPE_CONSTRAINTS == {
        "minItems",
        "pattern",
        "additionalProperties",
        "maximum",
        "exclusiveMinimum",
        "multipleOf",
        "properties",
        "minLength",
        "items",
        "propertyNames",
        "maxProperties",
        "uniqueItems",
        "boolean_schema",
        "minProperties",
        "exclusiveMaximum",
        "minimum",
        "maxLength",
        "maxItems",
        "additionalItems",
        "contains",
        "required",
        "patternProperties",
        "type",
        "dependencies",
    }
    var_0 = module_0.to_json_schema(field_0)
    assert var_0 is True
    field_1 = module_0.from_json_schema(dict_0)
    assert f"{type(field_1).__module__}.{type(field_1).__qualname__}" == "fields.Any"
    assert field_1.allow_null is False
    object_0 = module_2.Object(additional_properties=field_1, required=none_type_0)
    assert (
        f"{type(object_0.additional_properties).__module__}.{type(object_0.additional_properties).__qualname__}"
        == "fields.Any"
    )
    var_1 = module_0.to_json_schema(object_0)
    field_2 = module_0.from_json_schema(var_1, none_type_0)
    assert f"{type(field_2).__module__}.{type(field_2).__qualname__}" == "fields.Object"
    assert field_2.title == ""
    assert field_2.description == ""
    assert field_2.allow_null is False
    assert field_2.properties == {}
    assert field_2.pattern_properties == {}
    assert field_2.additional_properties is True
    assert field_2.property_names is None
    assert field_2.min_properties is None
    assert field_2.max_properties is None
    assert field_2.required == []
    not_0 = module_3.Not(field_2)
    assert (
        f"{type(not_0.negated).__module__}.{type(not_0.negated).__qualname__}"
        == "fields.Object"
    )


@pytest.mark.xfail(strict=True)
def test_case_32():
    str_0 = "a\x0c"
    none_type_0 = None
    dict_0 = {str_0: none_type_0, none_type_0: str_0}
    field_0 = module_0.type_from_json_schema(dict_0, dict_0)
    assert f"{type(field_0).__module__}.{type(field_0).__qualname__}" == "fields.Union"
    assert field_0.default is None
    assert field_0.title == ""
    assert field_0.description == ""
    assert field_0.allow_null is True
    assert (
        f"{type(field_0.any_of).__module__}.{type(field_0.any_of).__qualname__}"
        == "builtins.list"
    )
    assert len(field_0.any_of) == 5
    assert module_0.TYPE_CONSTRAINTS == {
        "minItems",
        "pattern",
        "additionalProperties",
        "maximum",
        "exclusiveMinimum",
        "multipleOf",
        "properties",
        "minLength",
        "items",
        "propertyNames",
        "maxProperties",
        "uniqueItems",
        "boolean_schema",
        "minProperties",
        "exclusiveMaximum",
        "minimum",
        "maxLength",
        "maxItems",
        "additionalItems",
        "contains",
        "required",
        "patternProperties",
        "type",
        "dependencies",
    }
    field_1 = module_0.from_json_schema(dict_0)
    assert f"{type(field_1).__module__}.{type(field_1).__qualname__}" == "fields.Any"
    assert field_1.title == ""
    assert field_1.description == ""
    assert field_1.allow_null is False
    var_0 = module_0.to_json_schema(field_0)
    field_2 = module_0.from_json_schema(dict_0, none_type_0)
    assert f"{type(field_2).__module__}.{type(field_2).__qualname__}" == "fields.Any"
    assert field_2.allow_null is False
    not_0 = module_3.Not(field_0)
    assert (
        f"{type(not_0.negated).__module__}.{type(not_0.negated).__qualname__}"
        == "fields.Union"
    )
    object_0 = module_2.Object(min_properties=none_type_0)
    var_1 = module_0.to_json_schema(object_0)
    field_3 = module_2.String()
    module_4.escape(var_0)


def test_case_33():
    str_0 = "a"
    none_type_0 = None
    dict_0 = {none_type_0: str_0, str_0: none_type_0, none_type_0: str_0}
    field_0 = module_0.type_from_json_schema(dict_0, dict_0)
    assert f"{type(field_0).__module__}.{type(field_0).__qualname__}" == "fields.Union"
    assert field_0.default is None
    assert field_0.title == ""
    assert field_0.description == ""
    assert field_0.allow_null is True
    assert (
        f"{type(field_0.any_of).__module__}.{type(field_0.any_of).__qualname__}"
        == "builtins.list"
    )
    assert len(field_0.any_of) == 5
    assert module_0.TYPE_CONSTRAINTS == {
        "minItems",
        "pattern",
        "additionalProperties",
        "maximum",
        "exclusiveMinimum",
        "multipleOf",
        "properties",
        "minLength",
        "items",
        "propertyNames",
        "maxProperties",
        "uniqueItems",
        "boolean_schema",
        "minProperties",
        "exclusiveMaximum",
        "minimum",
        "maxLength",
        "maxItems",
        "additionalItems",
        "contains",
        "required",
        "patternProperties",
        "type",
        "dependencies",
    }
    var_0 = module_0.to_json_schema(field_0)
    field_1 = module_0.from_json_schema(dict_0)
    assert f"{type(field_1).__module__}.{type(field_1).__qualname__}" == "fields.Any"
    assert field_1.title == ""
    assert field_1.description == ""
    assert field_1.allow_null is False
    not_0 = module_3.Not(field_0)
    assert (
        f"{type(not_0.negated).__module__}.{type(not_0.negated).__qualname__}"
        == "fields.Union"
    )
    var_1 = module_0.to_json_schema(not_0)
    field_2 = module_0.from_json_schema(var_1)
    assert (
        f"{type(field_2).__module__}.{type(field_2).__qualname__}" == "composites.Not"
    )
    assert field_2.title == ""
    assert field_2.description == ""
    assert field_2.allow_null is False
    assert (
        f"{type(field_2.negated).__module__}.{type(field_2.negated).__qualname__}"
        == "fields.Union"
    )


def test_case_34():
    str_0 = "a\x0c"
    none_type_0 = None
    dict_0 = {str_0: none_type_0, none_type_0: str_0}
    field_0 = module_0.type_from_json_schema(dict_0, dict_0)
    assert f"{type(field_0).__module__}.{type(field_0).__qualname__}" == "fields.Union"
    assert field_0.default is None
    assert field_0.title == ""
    assert field_0.description == ""
    assert field_0.allow_null is True
    assert (
        f"{type(field_0.any_of).__module__}.{type(field_0.any_of).__qualname__}"
        == "builtins.list"
    )
    assert len(field_0.any_of) == 5
    assert module_0.TYPE_CONSTRAINTS == {
        "minItems",
        "pattern",
        "additionalProperties",
        "maximum",
        "exclusiveMinimum",
        "multipleOf",
        "properties",
        "minLength",
        "items",
        "propertyNames",
        "maxProperties",
        "uniqueItems",
        "boolean_schema",
        "minProperties",
        "exclusiveMaximum",
        "minimum",
        "maxLength",
        "maxItems",
        "additionalItems",
        "contains",
        "required",
        "patternProperties",
        "type",
        "dependencies",
    }
    field_1 = module_0.from_json_schema(dict_0)
    assert f"{type(field_1).__module__}.{type(field_1).__qualname__}" == "fields.Any"
    assert field_1.title == ""
    assert field_1.description == ""
    assert field_1.allow_null is False
    var_0 = module_0.to_json_schema(field_0)
    not_0 = module_3.Not(field_1)
    assert (
        f"{type(not_0.negated).__module__}.{type(not_0.negated).__qualname__}"
        == "fields.Any"
    )
    object_0 = module_2.Object(additional_properties=not_0, required=none_type_0)
    var_1 = module_0.to_json_schema(object_0)
    field_2 = module_0.from_json_schema(var_1, none_type_0)
    assert f"{type(field_2).__module__}.{type(field_2).__qualname__}" == "fields.Object"
    assert field_2.title == ""
    assert field_2.description == ""
    assert field_2.allow_null is False
    assert field_2.properties == {}
    assert field_2.pattern_properties == {}
    assert (
        f"{type(field_2.additional_properties).__module__}.{type(field_2.additional_properties).__qualname__}"
        == "composites.Not"
    )
    assert field_2.property_names is None
    assert field_2.min_properties is None
    assert field_2.max_properties is None
    assert field_2.required == []
    not_1 = module_3.Not(var_0)
    assert not_1.negated == {
        "anyOf": [
            {"type": "boolean"},
            {"type": "string", "default": ""},
            {"type": "array", "minItems": 0, "additionalItems": True},
            {"type": "number"},
            {"type": "object"},
        ],
        "default": None,
    }


def test_case_35():
    choice_0 = module_2.Choice()
    var_0 = module_0.to_json_schema(choice_0)
    assert module_0.TYPE_CONSTRAINTS == {
        "minItems",
        "pattern",
        "additionalProperties",
        "maximum",
        "exclusiveMinimum",
        "multipleOf",
        "properties",
        "minLength",
        "items",
        "propertyNames",
        "maxProperties",
        "uniqueItems",
        "boolean_schema",
        "minProperties",
        "exclusiveMaximum",
        "minimum",
        "maxLength",
        "maxItems",
        "additionalItems",
        "contains",
        "required",
        "patternProperties",
        "type",
        "dependencies",
    }
    var_1 = module_0.to_json_schema(choice_0)
    field_0 = module_0.from_json_schema(var_1)
    assert f"{type(field_0).__module__}.{type(field_0).__qualname__}" == "fields.Choice"
    assert field_0.title == ""
    assert field_0.description == ""
    assert field_0.allow_null is False
    assert field_0.choices == []


@pytest.mark.xfail(strict=True)
def test_case_36():
    str_0 = "a"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    integer_0 = module_2.Integer()
    var_0 = module_0.to_json_schema(integer_0)
    assert module_0.TYPE_CONSTRAINTS == {
        "minItems",
        "pattern",
        "additionalProperties",
        "maximum",
        "exclusiveMinimum",
        "multipleOf",
        "properties",
        "minLength",
        "items",
        "propertyNames",
        "maxProperties",
        "uniqueItems",
        "boolean_schema",
        "minProperties",
        "exclusiveMaximum",
        "minimum",
        "maxLength",
        "maxItems",
        "additionalItems",
        "contains",
        "required",
        "patternProperties",
        "type",
        "dependencies",
    }
    field_0 = module_0.type_from_json_schema(dict_0, dict_0)
    assert f"{type(field_0).__module__}.{type(field_0).__qualname__}" == "fields.Union"
    assert field_0.default is None
    assert field_0.title == ""
    assert field_0.description == ""
    assert field_0.allow_null is True
    assert (
        f"{type(field_0.any_of).__module__}.{type(field_0.any_of).__qualname__}"
        == "builtins.list"
    )
    assert len(field_0.any_of) == 5
    field_1 = module_0.from_json_schema(str_0, field_0)
    assert f"{type(field_1).__module__}.{type(field_1).__qualname__}" == "fields.Any"
    assert field_1.title == ""
    assert field_1.description == ""
    assert field_1.allow_null is False
    var_1 = module_0.to_json_schema(field_0, dict_0)
    module_2.Choice(choices=field_1, **var_1)


@pytest.mark.xfail(strict=True)
def test_case_37():
    str_0 = "a"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    field_0 = module_0.type_from_json_schema(dict_0, dict_0)
    assert f"{type(field_0).__module__}.{type(field_0).__qualname__}" == "fields.Union"
    assert field_0.default is None
    assert field_0.title == ""
    assert field_0.description == ""
    assert field_0.allow_null is True
    assert (
        f"{type(field_0.any_of).__module__}.{type(field_0.any_of).__qualname__}"
        == "builtins.list"
    )
    assert len(field_0.any_of) == 5
    assert module_0.TYPE_CONSTRAINTS == {
        "minItems",
        "pattern",
        "additionalProperties",
        "maximum",
        "exclusiveMinimum",
        "multipleOf",
        "properties",
        "minLength",
        "items",
        "propertyNames",
        "maxProperties",
        "uniqueItems",
        "boolean_schema",
        "minProperties",
        "exclusiveMaximum",
        "minimum",
        "maxLength",
        "maxItems",
        "additionalItems",
        "contains",
        "required",
        "patternProperties",
        "type",
        "dependencies",
    }
    field_1 = module_0.from_json_schema(dict_0)
    assert f"{type(field_1).__module__}.{type(field_1).__qualname__}" == "fields.Any"
    assert field_1.title == ""
    assert field_1.description == ""
    assert field_1.allow_null is False
    var_0 = module_0.to_json_schema(field_0)
    field_2 = module_0.type_from_json_schema(dict_0, var_0)
    assert f"{type(field_2).__module__}.{type(field_2).__qualname__}" == "fields.Union"
    assert field_2.default is None
    assert field_2.allow_null is True
    assert (
        f"{type(field_2.any_of).__module__}.{type(field_2.any_of).__qualname__}"
        == "builtins.list"
    )
    assert len(field_2.any_of) == 5
    choice_0 = module_2.Choice(choices=var_0)
    assert (
        f"{type(choice_0).__module__}.{type(choice_0).__qualname__}" == "fields.Choice"
    )
    assert choice_0.title == ""
    assert choice_0.description == ""
    assert choice_0.allow_null is False
    assert choice_0.choices == [("anyOf", "anyOf"), ("default", "default")]
    not_0 = module_3.Not(choice_0)
    var_1 = module_0.to_json_schema(not_0)
    field_3 = module_0.from_json_schema(var_0)
    assert f"{type(field_3).__module__}.{type(field_3).__qualname__}" == "fields.Union"
    assert field_3.default is None
    assert field_3.title == ""
    assert field_3.description == ""
    assert field_3.allow_null is False
    assert (
        f"{type(field_3.any_of).__module__}.{type(field_3.any_of).__qualname__}"
        == "builtins.list"
    )
    assert len(field_3.any_of) == 5
    module_0.to_json_schema(var_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_38():
    str_0 = "a"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    field_0 = module_0.from_json_schema(dict_0)
    assert f"{type(field_0).__module__}.{type(field_0).__qualname__}" == "fields.Any"
    assert field_0.title == ""
    assert field_0.description == ""
    assert field_0.allow_null is False
    assert module_0.TYPE_CONSTRAINTS == {
        "minItems",
        "pattern",
        "additionalProperties",
        "maximum",
        "exclusiveMinimum",
        "multipleOf",
        "properties",
        "minLength",
        "items",
        "propertyNames",
        "maxProperties",
        "uniqueItems",
        "boolean_schema",
        "minProperties",
        "exclusiveMaximum",
        "minimum",
        "maxLength",
        "maxItems",
        "additionalItems",
        "contains",
        "required",
        "patternProperties",
        "type",
        "dependencies",
    }
    field_1 = module_0.type_from_json_schema(dict_0, dict_0)
    assert f"{type(field_1).__module__}.{type(field_1).__qualname__}" == "fields.Union"
    assert field_1.default is None
    assert field_1.title == ""
    assert field_1.description == ""
    assert field_1.allow_null is True
    assert (
        f"{type(field_1.any_of).__module__}.{type(field_1.any_of).__qualname__}"
        == "builtins.list"
    )
    assert len(field_1.any_of) == 5
    choice_0 = module_2.Choice(choices=dict_0)
    not_0 = module_3.Not(choice_0)
    var_0 = module_0.to_json_schema(not_0)
    field_2 = module_0.from_json_schema(var_0)
    assert (
        f"{type(field_2).__module__}.{type(field_2).__qualname__}" == "composites.Not"
    )
    assert field_2.title == ""
    assert field_2.description == ""
    assert field_2.allow_null is False
    assert (
        f"{type(field_2.negated).__module__}.{type(field_2.negated).__qualname__}"
        == "fields.Choice"
    )
    not_1 = module_3.Not(field_1)
    assert (
        f"{type(not_1.negated).__module__}.{type(not_1.negated).__qualname__}"
        == "fields.Union"
    )
    module_0.to_json_schema(var_0)


def test_case_39():
    schema_definitions_0 = module_5.SchemaDefinitions()
    var_0 = module_0.to_json_schema(schema_definitions_0)
    assert module_0.TYPE_CONSTRAINTS == {
        "minItems",
        "pattern",
        "additionalProperties",
        "maximum",
        "exclusiveMinimum",
        "multipleOf",
        "properties",
        "minLength",
        "items",
        "propertyNames",
        "maxProperties",
        "uniqueItems",
        "boolean_schema",
        "minProperties",
        "exclusiveMaximum",
        "minimum",
        "maxLength",
        "maxItems",
        "additionalItems",
        "contains",
        "required",
        "patternProperties",
        "type",
        "dependencies",
    }
    enum_dict_0 = module_1._EnumDict()


@pytest.mark.xfail(strict=True)
def test_case_40():
    str_0 = ""
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    field_0 = module_0.type_from_json_schema(dict_0, dict_0)
    assert f"{type(field_0).__module__}.{type(field_0).__qualname__}" == "fields.Union"
    assert field_0.default is None
    assert field_0.title == ""
    assert field_0.description == ""
    assert field_0.allow_null is True
    assert (
        f"{type(field_0.any_of).__module__}.{type(field_0.any_of).__qualname__}"
        == "builtins.list"
    )
    assert len(field_0.any_of) == 5
    assert module_0.TYPE_CONSTRAINTS == {
        "minItems",
        "pattern",
        "additionalProperties",
        "maximum",
        "exclusiveMinimum",
        "multipleOf",
        "properties",
        "minLength",
        "items",
        "propertyNames",
        "maxProperties",
        "uniqueItems",
        "boolean_schema",
        "minProperties",
        "exclusiveMaximum",
        "minimum",
        "maxLength",
        "maxItems",
        "additionalItems",
        "contains",
        "required",
        "patternProperties",
        "type",
        "dependencies",
    }
    schema_definitions_0 = module_5.SchemaDefinitions(**dict_0)
    module_0.to_json_schema(schema_definitions_0)


def test_case_41():
    array_0 = module_2.Array()
    enum_dict_0 = module_1._EnumDict()
    var_0 = module_0.to_json_schema(array_0)
    assert module_0.TYPE_CONSTRAINTS == {
        "minItems",
        "pattern",
        "additionalProperties",
        "maximum",
        "exclusiveMinimum",
        "multipleOf",
        "properties",
        "minLength",
        "items",
        "propertyNames",
        "maxProperties",
        "uniqueItems",
        "boolean_schema",
        "minProperties",
        "exclusiveMaximum",
        "minimum",
        "maxLength",
        "maxItems",
        "additionalItems",
        "contains",
        "required",
        "patternProperties",
        "type",
        "dependencies",
    }


@pytest.mark.xfail(strict=True)
def test_case_42():
    str_0 = "f"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    field_0 = module_0.type_from_json_schema(dict_0, dict_0)
    assert f"{type(field_0).__module__}.{type(field_0).__qualname__}" == "fields.Union"
    assert field_0.default is None
    assert field_0.title == ""
    assert field_0.description == ""
    assert field_0.allow_null is True
    assert (
        f"{type(field_0.any_of).__module__}.{type(field_0.any_of).__qualname__}"
        == "builtins.list"
    )
    assert len(field_0.any_of) == 5
    assert module_0.TYPE_CONSTRAINTS == {
        "minItems",
        "pattern",
        "additionalProperties",
        "maximum",
        "exclusiveMinimum",
        "multipleOf",
        "properties",
        "minLength",
        "items",
        "propertyNames",
        "maxProperties",
        "uniqueItems",
        "boolean_schema",
        "minProperties",
        "exclusiveMaximum",
        "minimum",
        "maxLength",
        "maxItems",
        "additionalItems",
        "contains",
        "required",
        "patternProperties",
        "type",
        "dependencies",
    }
    field_1 = module_0.from_json_schema(dict_0)
    assert f"{type(field_1).__module__}.{type(field_1).__qualname__}" == "fields.Any"
    assert field_1.title == ""
    assert field_1.description == ""
    assert field_1.allow_null is False
    int_0 = 179
    array_0 = module_2.Array(additional_items=field_0, min_items=int_0)
    assert (
        f"{type(array_0.additional_items).__module__}.{type(array_0.additional_items).__qualname__}"
        == "fields.Union"
    )
    choice_0 = module_2.Choice()
    none_type_0 = None
    not_0 = module_3.Not(none_type_0)
    var_0 = module_0.to_json_schema(array_0)
    field_2 = module_0.from_json_schema(var_0)
    assert f"{type(field_2).__module__}.{type(field_2).__qualname__}" == "fields.Array"
    assert field_2.title == ""
    assert field_2.description == ""
    assert field_2.allow_null is False
    assert field_2.items is None
    assert (
        f"{type(field_2.additional_items).__module__}.{type(field_2.additional_items).__qualname__}"
        == "fields.Union"
    )
    assert field_2.min_items == 179
    assert field_2.max_items is None
    assert field_2.unique_items is False
    union_0 = not_0.__or__(array_0)
    enum_dict_0 = module_1._EnumDict()
    none_type_1 = None
    module_0.from_json_schema(field_0, none_type_1)


@pytest.mark.xfail(strict=True)
def test_case_43():
    none_type_0 = None
    bool_0 = False
    string_0 = module_2.String(trim_whitespace=none_type_0)
    var_0 = module_0.to_json_schema(string_0)
    assert module_0.TYPE_CONSTRAINTS == {
        "minItems",
        "pattern",
        "additionalProperties",
        "maximum",
        "exclusiveMinimum",
        "multipleOf",
        "properties",
        "minLength",
        "items",
        "propertyNames",
        "maxProperties",
        "uniqueItems",
        "boolean_schema",
        "minProperties",
        "exclusiveMaximum",
        "minimum",
        "maxLength",
        "maxItems",
        "additionalItems",
        "contains",
        "required",
        "patternProperties",
        "type",
        "dependencies",
    }
    module_0.const_from_json_schema(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_44():
    str_0 = "f"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    field_0 = module_0.type_from_json_schema(dict_0, dict_0)
    assert f"{type(field_0).__module__}.{type(field_0).__qualname__}" == "fields.Union"
    assert field_0.default is None
    assert field_0.title == ""
    assert field_0.description == ""
    assert field_0.allow_null is True
    assert (
        f"{type(field_0.any_of).__module__}.{type(field_0.any_of).__qualname__}"
        == "builtins.list"
    )
    assert len(field_0.any_of) == 5
    assert module_0.TYPE_CONSTRAINTS == {
        "minItems",
        "pattern",
        "additionalProperties",
        "maximum",
        "exclusiveMinimum",
        "multipleOf",
        "properties",
        "minLength",
        "items",
        "propertyNames",
        "maxProperties",
        "uniqueItems",
        "boolean_schema",
        "minProperties",
        "exclusiveMaximum",
        "minimum",
        "maxLength",
        "maxItems",
        "additionalItems",
        "contains",
        "required",
        "patternProperties",
        "type",
        "dependencies",
    }
    field_1 = module_0.from_json_schema(dict_0)
    assert f"{type(field_1).__module__}.{type(field_1).__qualname__}" == "fields.Any"
    assert field_1.title == ""
    assert field_1.description == ""
    assert field_1.allow_null is False
    none_type_0 = None
    int_0 = -1378
    float_0 = module_2.Float(
        minimum=none_type_0, exclusive_minimum=none_type_0, exclusive_maximum=int_0
    )
    var_0 = module_0.to_json_schema(float_0)
    module_2.Choice(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_45():
    str_0 = "f"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    field_0 = module_0.type_from_json_schema(dict_0, dict_0)
    assert f"{type(field_0).__module__}.{type(field_0).__qualname__}" == "fields.Union"
    assert field_0.default is None
    assert field_0.title == ""
    assert field_0.description == ""
    assert field_0.allow_null is True
    assert (
        f"{type(field_0.any_of).__module__}.{type(field_0.any_of).__qualname__}"
        == "builtins.list"
    )
    assert len(field_0.any_of) == 5
    assert module_0.TYPE_CONSTRAINTS == {
        "minItems",
        "pattern",
        "additionalProperties",
        "maximum",
        "exclusiveMinimum",
        "multipleOf",
        "properties",
        "minLength",
        "items",
        "propertyNames",
        "maxProperties",
        "uniqueItems",
        "boolean_schema",
        "minProperties",
        "exclusiveMaximum",
        "minimum",
        "maxLength",
        "maxItems",
        "additionalItems",
        "contains",
        "required",
        "patternProperties",
        "type",
        "dependencies",
    }
    field_1 = module_0.from_json_schema(dict_0)
    assert f"{type(field_1).__module__}.{type(field_1).__qualname__}" == "fields.Any"
    assert field_1.title == ""
    assert field_1.description == ""
    assert field_1.allow_null is False
    var_0 = module_0.to_json_schema(field_0)
    array_0 = module_2.Array(exact_items=dict_0)
    choice_0 = module_2.Choice(choices=dict_0)
    not_0 = module_3.Not(field_0)
    assert (
        f"{type(not_0.negated).__module__}.{type(not_0.negated).__qualname__}"
        == "fields.Union"
    )
    int_0 = 38
    decimal_0 = module_2.Decimal(maximum=int_0)
    var_1 = module_0.to_json_schema(decimal_0, dict_0)
    module_0.from_json_schema(decimal_0)
