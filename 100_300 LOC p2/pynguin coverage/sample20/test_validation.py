# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import validation as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    bytes_0 = b""
    list_0 = [bytes_0, bytes_0, bytes_0]
    bytes_1 = b""
    validation_0 = module_0.Validation(bytes_1, bytes_1)
    assert (
        f"{type(module_0.Validation.success).__module__}.{type(module_0.Validation.success).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Validation.fail).__module__}.{type(module_0.Validation.fail).__qualname__}"
        == "builtins.method"
    )
    var_0 = validation_0.__eq__(list_0)
    assert var_0 is False
    var_0.to_lazy()


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b""
    str_0 = ",69m2]E<HU&]"
    validation_0 = module_0.Validation(str_0, bytes_0)
    assert (
        f"{type(module_0.Validation.success).__module__}.{type(module_0.Validation.success).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Validation.fail).__module__}.{type(module_0.Validation.fail).__qualname__}"
        == "builtins.method"
    )
    var_0 = validation_0.__str__()
    assert var_0 == "Validation.success[,69m2]E<HU&]]"
    validation_0.to_try()


def test_case_2():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    assert (
        f"{type(module_0.Validation.success).__module__}.{type(module_0.Validation.success).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Validation.fail).__module__}.{type(module_0.Validation.fail).__qualname__}"
        == "builtins.method"
    )


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = False
    validation_0 = module_0.Validation(bool_0, bool_0)
    assert (
        f"{type(module_0.Validation.success).__module__}.{type(module_0.Validation.success).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Validation.fail).__module__}.{type(module_0.Validation.fail).__qualname__}"
        == "builtins.method"
    )
    validation_0.__str__()


@pytest.mark.xfail(strict=True)
def test_case_4():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    assert (
        f"{type(module_0.Validation.success).__module__}.{type(module_0.Validation.success).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Validation.fail).__module__}.{type(module_0.Validation.fail).__qualname__}"
        == "builtins.method"
    )
    var_0 = validation_0.is_fail()
    assert var_0 is False
    validation_1 = module_0.Validation(var_0, var_0)
    assert validation_1.value is False
    assert validation_1.errors is False
    dict_0 = {}
    var_1 = validation_0.__eq__(dict_0)
    assert var_1 is False
    var_1.to_lazy()


@pytest.mark.xfail(strict=True)
def test_case_5():
    float_0 = -1503.8
    int_0 = 1743
    validation_0 = module_0.Validation(int_0, int_0)
    assert (
        f"{type(module_0.Validation.success).__module__}.{type(module_0.Validation.success).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Validation.fail).__module__}.{type(module_0.Validation.fail).__qualname__}"
        == "builtins.method"
    )
    validation_0.map(float_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    float_0 = -987.0
    validation_0 = module_0.Validation(float_0, float_0)
    assert (
        f"{type(module_0.Validation.success).__module__}.{type(module_0.Validation.success).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Validation.fail).__module__}.{type(module_0.Validation.fail).__qualname__}"
        == "builtins.method"
    )
    validation_0.bind(float_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    bytes_0 = b"\xc8\x1e\x96p\xff:"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    assert (
        f"{type(module_0.Validation.success).__module__}.{type(module_0.Validation.success).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Validation.fail).__module__}.{type(module_0.Validation.fail).__qualname__}"
        == "builtins.method"
    )
    validation_0.ap(validation_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    bytes_0 = b",u\x11;\x0eE\xfc_zA\xa8"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    assert (
        f"{type(module_0.Validation.success).__module__}.{type(module_0.Validation.success).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Validation.fail).__module__}.{type(module_0.Validation.fail).__qualname__}"
        == "builtins.method"
    )
    validation_0.to_box()


@pytest.mark.xfail(strict=True)
def test_case_9():
    float_0 = -23.791864
    validation_0 = module_0.Validation(float_0, float_0)
    assert (
        f"{type(module_0.Validation.success).__module__}.{type(module_0.Validation.success).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Validation.fail).__module__}.{type(module_0.Validation.fail).__qualname__}"
        == "builtins.method"
    )
    validation_0.to_lazy()


@pytest.mark.xfail(strict=True)
def test_case_10():
    bytes_0 = b"N\x12-\xda\rO\x8c\x17"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    assert (
        f"{type(module_0.Validation.success).__module__}.{type(module_0.Validation.success).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Validation.fail).__module__}.{type(module_0.Validation.fail).__qualname__}"
        == "builtins.method"
    )
    validation_0.to_try()


@pytest.mark.xfail(strict=True)
def test_case_11():
    float_0 = 307.81067
    validation_0 = module_0.Validation(float_0, float_0)
    assert (
        f"{type(module_0.Validation.success).__module__}.{type(module_0.Validation.success).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Validation.fail).__module__}.{type(module_0.Validation.fail).__qualname__}"
        == "builtins.method"
    )
    var_0 = validation_0.__eq__(validation_0)
    assert var_0 is True
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, none_type_0)
    var_0.is_success()


@pytest.mark.xfail(strict=True)
def test_case_12():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    assert (
        f"{type(module_0.Validation.success).__module__}.{type(module_0.Validation.success).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Validation.fail).__module__}.{type(module_0.Validation.fail).__qualname__}"
        == "builtins.method"
    )
    var_0 = validation_0.is_success()
    assert var_0 is True
    float_0 = 307.81067
    validation_1 = module_0.Validation(float_0, float_0)
    bytes_0 = b"[\xb2Pn!U"
    validation_2 = module_0.Validation(bytes_0, bytes_0)
    var_1 = validation_1.__eq__(bytes_0)
    assert var_1 is False
    bool_0 = True
    validation_3 = module_0.Validation(bool_0, validation_0)
    var_2 = validation_2.__str__()
    assert var_2 == "Validation.fail[b'[\\xb2Pn!U', b'[\\xb2Pn!U']"
    validation_0.to_maybe()


@pytest.mark.xfail(strict=True)
def test_case_13():
    dict_0 = {}
    validation_0 = module_0.Validation(dict_0, dict_0)
    assert (
        f"{type(module_0.Validation.success).__module__}.{type(module_0.Validation.success).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Validation.fail).__module__}.{type(module_0.Validation.fail).__qualname__}"
        == "builtins.method"
    )
    var_0 = validation_0.is_success()
    assert var_0 is True
    float_0 = 307.81067
    validation_1 = module_0.Validation(float_0, validation_0)
    validation_2 = module_0.Validation(var_0, dict_0)
    assert validation_2.value is True
    var_1 = validation_0.__eq__(validation_1)
    assert var_1 is False
    validation_3 = module_0.Validation(var_1, var_1)
    assert validation_3.value is False
    assert validation_3.errors is False
    var_2 = var_0.__str__()
    assert var_2 == "True"
    var_0.to_maybe()
