# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import core as module_0
import re as module_1
import decimal as module_2


@pytest.mark.xfail(strict=True)
def test_case_0():
    extended_encoder_0 = module_0._ExtendedEncoder()
    assert module_0.confs == [
        "encoder",
        "decoder",
        "mm_field",
        "letter_case",
        "exclude",
    ]
    extended_encoder_0.default(extended_encoder_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    module_0.FieldOverride()


def test_case_2():
    none_type_0 = None
    str_0 = "kyG& boK0&_r2AZ%{5\\$"
    extended_encoder_0 = module_0._ExtendedEncoder(default=none_type_0)
    assert module_0.confs == [
        "encoder",
        "decoder",
        "mm_field",
        "letter_case",
        "exclude",
    ]
    var_0 = extended_encoder_0.default(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "?t:M"
    dict_0 = {str_0: str_0, str_0: str_0}
    extended_encoder_0 = module_0._ExtendedEncoder(ensure_ascii=str_0, allow_nan=str_0)
    assert module_0.confs == [
        "encoder",
        "decoder",
        "mm_field",
        "letter_case",
        "exclude",
    ]
    var_0 = extended_encoder_0.default(dict_0)
    var_1 = extended_encoder_0.iterencode(str_0, var_0)
    module_0.FieldOverride()


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "?t:M"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    extended_encoder_0 = module_0._ExtendedEncoder(ensure_ascii=str_0, allow_nan=str_0)
    assert module_0.confs == [
        "encoder",
        "decoder",
        "mm_field",
        "letter_case",
        "exclude",
    ]
    var_0 = module_1.RegexFlag.DEBUG
    var_1 = extended_encoder_0.default(var_0)
    assert var_1 == 128
    var_2 = extended_encoder_0.iterencode(str_0, dict_0)
    module_0.FieldOverride(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = "?t:M"
    dict_0 = {str_0: str_0, str_0: str_0}
    extended_encoder_0 = module_0._ExtendedEncoder(ensure_ascii=str_0, allow_nan=str_0)
    assert module_0.confs == [
        "encoder",
        "decoder",
        "mm_field",
        "letter_case",
        "exclude",
    ]
    extended_encoder_1 = module_0._ExtendedEncoder(
        allow_nan=dict_0, default=extended_encoder_0
    )
    decimal_0 = module_2.Decimal()
    var_0 = extended_encoder_0.default(decimal_0)
    assert var_0 == "0"
    var_0.iterencode(str_0)
