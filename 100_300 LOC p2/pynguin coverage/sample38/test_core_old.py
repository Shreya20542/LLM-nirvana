# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import core as module_0
import re as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    extended_encoder_0 = module_0._ExtendedEncoder()
    assert module_0.confs == [
        "encoder",
        "decoder",
        "mm_field",
        "letter_case",
        "exclude",
    ]
    extended_encoder_0.default(extended_encoder_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    module_0.FieldOverride()


@pytest.mark.xfail(strict=True)
def test_case_2():
    extended_encoder_0 = module_0._ExtendedEncoder()
    assert module_0.confs == [
        "encoder",
        "decoder",
        "mm_field",
        "letter_case",
        "exclude",
    ]
    str_0 = 'x%N\\qLvm"/!U+~C~n}E'
    var_0 = extended_encoder_0.default(str_0)
    module_0.FieldOverride(*var_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    extended_encoder_0 = module_0._ExtendedEncoder()
    assert module_0.confs == [
        "encoder",
        "decoder",
        "mm_field",
        "letter_case",
        "exclude",
    ]
    dict_0 = {
        extended_encoder_0: extended_encoder_0,
        extended_encoder_0: extended_encoder_0,
    }
    var_0 = extended_encoder_0.default(dict_0)
    extended_encoder_0.default(extended_encoder_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    extended_encoder_0 = module_0._ExtendedEncoder()
    assert module_0.confs == [
        "encoder",
        "decoder",
        "mm_field",
        "letter_case",
        "exclude",
    ]
    var_0 = module_1.RegexFlag.VERBOSE
    var_1 = extended_encoder_0.iterencode(var_0, extended_encoder_0)
    var_2 = extended_encoder_0.default(var_0)
    assert var_2 == 64
    extended_encoder_0.default(extended_encoder_0)
