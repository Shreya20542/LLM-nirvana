# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import forms as module_0
import inspect as module_1
import jinja2.optimizer as module_2


def test_case_0():
    with pytest.raises(AssertionError):
        module_0.Jinja2Forms()


def test_case_1():
    str_0 = "H"
    jinja2_forms_0 = module_0.Jinja2Forms(directory=str_0)
    assert (
        f"{type(jinja2_forms_0).__module__}.{type(jinja2_forms_0).__qualname__}"
        == "forms.Jinja2Forms"
    )
    assert (
        f"{type(jinja2_forms_0.env).__module__}.{type(jinja2_forms_0.env).__qualname__}"
        == "jinja2.environment.Environment"
    )


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = "H"
    module_0.Jinja2Forms(package=str_0)


def test_case_3():
    str_0 = "H"
    jinja2_forms_0 = module_0.Jinja2Forms(directory=str_0)
    assert (
        f"{type(jinja2_forms_0).__module__}.{type(jinja2_forms_0).__qualname__}"
        == "forms.Jinja2Forms"
    )
    assert (
        f"{type(jinja2_forms_0.env).__module__}.{type(jinja2_forms_0.env).__qualname__}"
        == "jinja2.environment.Environment"
    )
    form_0 = jinja2_forms_0.Form(str_0)
    assert module_0.Form.FORMAT_TO_INPUTTYPE == {
        "color": "color",
        "datetime": "datetime-local",
        "date": "date",
        "email": "email",
        "hidden": "hidden",
        "month": "month",
        "number": "number",
        "password": "password",
        "range": "range",
        "search": "search",
        "tel": "tel",
        "text": "text",
        "time": "time",
        "url": "url",
        "week": "week",
    }


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "\n    Parse and validate a JSON string, returning positionally marked error\n    messages on parse or validation failures.\n\n    content - A JSON string or bytestring.\n    validator - A Field instance or Schema class to validate against.\n\n    Returns a two-tuple of (value, error_messages)\n    "
    module_0.Jinja2Forms(directory=str_0, package=str_0)


def test_case_5():
    str_0 = '5|\r8SzH;@1Vla(c_"a\r'
    jinja2_forms_0 = module_0.Jinja2Forms(directory=str_0)
    assert (
        f"{type(jinja2_forms_0).__module__}.{type(jinja2_forms_0).__qualname__}"
        == "forms.Jinja2Forms"
    )
    assert (
        f"{type(jinja2_forms_0.env).__module__}.{type(jinja2_forms_0.env).__qualname__}"
        == "jinja2.environment.Environment"
    )
    with pytest.raises(AssertionError):
        jinja2_forms_0.load_template_env()


def test_case_6():
    str_0 = "YJX1%/;Pz/+saDlY!//e"
    jinja2_forms_0 = module_0.Jinja2Forms(directory=str_0)
    assert (
        f"{type(jinja2_forms_0).__module__}.{type(jinja2_forms_0).__qualname__}"
        == "forms.Jinja2Forms"
    )
    assert (
        f"{type(jinja2_forms_0.env).__module__}.{type(jinja2_forms_0.env).__qualname__}"
        == "jinja2.environment.Environment"
    )
    form_0 = jinja2_forms_0.Form(str_0)
    assert module_0.Form.FORMAT_TO_INPUTTYPE == {
        "color": "color",
        "datetime": "datetime-local",
        "date": "date",
        "email": "email",
        "hidden": "hidden",
        "month": "month",
        "number": "number",
        "password": "password",
        "range": "range",
        "search": "search",
        "tel": "tel",
        "text": "text",
        "time": "time",
        "url": "url",
        "week": "week",
    }
    str_1 = form_0.input_type_for_field(str_0)
    assert str_1 == "text"
    with pytest.raises(AssertionError):
        jinja2_forms_0.load_template_env()


@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = "YJX1%/;9z/+saDlY/e"
    jinja2_forms_0 = module_0.Jinja2Forms(directory=str_0)
    assert (
        f"{type(jinja2_forms_0).__module__}.{type(jinja2_forms_0).__qualname__}"
        == "forms.Jinja2Forms"
    )
    assert (
        f"{type(jinja2_forms_0.env).__module__}.{type(jinja2_forms_0.env).__qualname__}"
        == "jinja2.environment.Environment"
    )
    form_0 = jinja2_forms_0.Form(str_0)
    assert module_0.Form.FORMAT_TO_INPUTTYPE == {
        "color": "color",
        "datetime": "datetime-local",
        "date": "date",
        "email": "email",
        "hidden": "hidden",
        "month": "month",
        "number": "number",
        "password": "password",
        "range": "range",
        "search": "search",
        "tel": "tel",
        "text": "text",
        "time": "time",
        "url": "url",
        "week": "week",
    }
    str_1 = form_0.template_for_field(str_0)
    assert str_1 == "forms/input.html"
    str_2 = form_0.input_type_for_field(str_0)
    assert str_2 == "text"
    form_0.__html__()


@pytest.mark.xfail(strict=True)
def test_case_8():
    none_type_0 = None
    form_0 = module_0.Form(env=none_type_0, schema=none_type_0, errors=none_type_0)
    assert module_0.Form.FORMAT_TO_INPUTTYPE == {
        "color": "color",
        "datetime": "datetime-local",
        "date": "date",
        "email": "email",
        "hidden": "hidden",
        "month": "month",
        "number": "number",
        "password": "password",
        "range": "range",
        "search": "search",
        "tel": "tel",
        "text": "text",
        "time": "time",
        "url": "url",
        "week": "week",
    }
    str_0 = form_0.template_for_field(none_type_0)
    assert str_0 == "forms/input.html"
    form_0.__str__()


def test_case_9():
    none_type_0 = None
    form_0 = module_0.Form(env=none_type_0, schema=none_type_0, errors=none_type_0)
    assert module_0.Form.FORMAT_TO_INPUTTYPE == {
        "color": "color",
        "datetime": "datetime-local",
        "date": "date",
        "email": "email",
        "hidden": "hidden",
        "month": "month",
        "number": "number",
        "password": "password",
        "range": "range",
        "search": "search",
        "tel": "tel",
        "text": "text",
        "time": "time",
        "url": "url",
        "week": "week",
    }
    str_0 = form_0.template_for_field(none_type_0)
    assert str_0 == "forms/input.html"


@pytest.mark.xfail(strict=True)
def test_case_10():
    str_0 = "YJX1%/;Pz/+saDlY!//e"
    jinja2_forms_0 = module_0.Jinja2Forms(directory=str_0)
    assert (
        f"{type(jinja2_forms_0).__module__}.{type(jinja2_forms_0).__qualname__}"
        == "forms.Jinja2Forms"
    )
    assert (
        f"{type(jinja2_forms_0.env).__module__}.{type(jinja2_forms_0.env).__qualname__}"
        == "jinja2.environment.Environment"
    )
    form_0 = jinja2_forms_0.Form(str_0)
    assert module_0.Form.FORMAT_TO_INPUTTYPE == {
        "color": "color",
        "datetime": "datetime-local",
        "date": "date",
        "email": "email",
        "hidden": "hidden",
        "month": "month",
        "number": "number",
        "password": "password",
        "range": "range",
        "search": "search",
        "tel": "tel",
        "text": "text",
        "time": "time",
        "url": "url",
        "week": "week",
    }
    str_1 = form_0.template_for_field(str_0)
    assert str_1 == "forms/input.html"
    var_0 = module_1.iscode(str_1)
    str_2 = form_0.input_type_for_field(var_0)
    assert str_2 == "text"
    module_2.optimize(jinja2_forms_0, str_0)
