# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import tokenize_yaml as module_0
import base as module_1
import yaml as module_2


@pytest.mark.xfail(strict=True)
def test_case_0():
    bytes_0 = b"Y(\xa3^\x90v \xa2\xfc\x97\xfb\x7fx\x98\xa73"
    module_0.tokenize_yaml(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = ","
    module_0.validate_yaml(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b"\xbaO\xdd\xa6\xc5: \xa2"
    module_0.validate_yaml(bytes_0, bytes_0)


def test_case_3():
    str_0 = "Eg"
    token_0 = module_0.tokenize_yaml(str_0)
    assert (
        f"{type(token_0).__module__}.{type(token_0).__qualname__}"
        == "tokens.ScalarToken"
    )


def test_case_4():
    str_0 = "\x0b"
    with pytest.raises(module_1.ParseError):
        module_0.tokenize_yaml(str_0)


def test_case_5():
    str_0 = "true"
    token_0 = module_0.tokenize_yaml(str_0)
    assert (
        f"{type(token_0).__module__}.{type(token_0).__qualname__}"
        == "tokens.ScalarToken"
    )


@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = "-"
    module_0.validate_yaml(str_0, str_0)


def test_case_7():
    bytes_0 = b"2"
    token_0 = module_0.tokenize_yaml(bytes_0)
    assert (
        f"{type(token_0).__module__}.{type(token_0).__qualname__}"
        == "tokens.ScalarToken"
    )


@pytest.mark.xfail(strict=True)
def test_case_8():
    float_0 = -1875.5719
    var_0 = module_2.dump(float_0)
    token_0 = module_0.tokenize_yaml(var_0)
    assert (
        f"{type(token_0).__module__}.{type(token_0).__qualname__}"
        == "tokens.ScalarToken"
    )
    module_0.validate_yaml(var_0, float_0)
