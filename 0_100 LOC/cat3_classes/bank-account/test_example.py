# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import example as module_0


def test_case_0():
    bank_account_0 = module_0.BankAccount()
    with pytest.raises(ValueError):
        bank_account_0.get_balance()


@pytest.mark.xfail(strict=True)
def test_case_1():
    bank_account_0 = module_0.BankAccount()
    var_0 = bank_account_0.open()
    assert bank_account_0.is_open is True
    assert bank_account_0.balance == 0
    var_0.close()


def test_case_2():
    bank_account_0 = module_0.BankAccount()
    with pytest.raises(ValueError):
        bank_account_0.deposit(bank_account_0)


def test_case_3():
    bank_account_0 = module_0.BankAccount()
    with pytest.raises(ValueError):
        bank_account_0.withdraw(bank_account_0)


def test_case_4():
    bank_account_0 = module_0.BankAccount()
    var_0 = bank_account_0.open()
    assert bank_account_0.is_open is True
    assert bank_account_0.balance == 0
    var_1 = bank_account_0.close()
    assert bank_account_0.is_open is False
    with pytest.raises(ValueError):
        bank_account_0.deposit(bank_account_0)


def test_case_5():
    bank_account_0 = module_0.BankAccount()
    with pytest.raises(ValueError):
        bank_account_0.close()


@pytest.mark.xfail(strict=True)
def test_case_6():
    bank_account_0 = module_0.BankAccount()
    var_0 = bank_account_0.open()
    assert bank_account_0.is_open is True
    assert bank_account_0.balance == 0
    var_1 = bank_account_0.get_balance()
    assert var_1 == 0
    bank_account_0.deposit(var_0)


def test_case_7():
    bank_account_0 = module_0.BankAccount()
    var_0 = bank_account_0.open()
    assert bank_account_0.is_open is True
    assert bank_account_0.balance == 0
    with pytest.raises(ValueError):
        bank_account_0.open()


@pytest.mark.xfail(strict=True)
def test_case_8():
    bank_account_0 = module_0.BankAccount()
    var_0 = bank_account_0.open()
    assert bank_account_0.is_open is True
    assert bank_account_0.balance == 0
    bank_account_0.withdraw(var_0)


def test_case_9():
    bool_0 = True
    bank_account_0 = module_0.BankAccount()
    var_0 = bank_account_0.open()
    assert bank_account_0.is_open is True
    assert bank_account_0.balance == 0
    with pytest.raises(ValueError):
        bank_account_0.withdraw(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    bank_account_0 = module_0.BankAccount()
    var_0 = bank_account_0.open()
    assert bank_account_0.is_open is True
    assert bank_account_0.balance == 0
    bank_account_0.deposit(bank_account_0)


def test_case_11():
    bool_0 = False
    bank_account_0 = module_0.BankAccount()
    var_0 = bank_account_0.open()
    assert bank_account_0.is_open is True
    assert bank_account_0.balance == 0
    with pytest.raises(ValueError):
        bank_account_0.withdraw(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_12():
    bank_account_0 = module_0.BankAccount()
    bool_0 = True
    var_0 = bank_account_0.open()
    assert bank_account_0.is_open is True
    assert bank_account_0.balance == 0
    var_1 = bank_account_0.deposit(bool_0)
    assert bank_account_0.balance == 1
    bank_account_0.withdraw(var_0)


def test_case_13():
    bank_account_0 = module_0.BankAccount()
    var_0 = bank_account_0.open()
    assert bank_account_0.is_open is True
    assert bank_account_0.balance == 0
    float_0 = -743.1748294046424
    with pytest.raises(ValueError):
        bank_account_0.deposit(float_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    bool_0 = True
    bank_account_0 = module_0.BankAccount()
    var_0 = bank_account_0.open()
    assert bank_account_0.is_open is True
    assert bank_account_0.balance == 0
    var_1 = bank_account_0.deposit(bool_0)
    assert bank_account_0.balance == 1
    var_2 = bank_account_0.withdraw(bool_0)
    assert bank_account_0.balance == 0
    bank_account_0.withdraw(var_2)
