# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import example as module_0


def test_case_0():
    bytes_0 = b"\nO\xa4\x98M\x06$\x04\xdd\xb3\x9fZxl\xf7\xf8~"
    binary_search_tree_0 = module_0.BinarySearchTree(bytes_0)
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "example.BinarySearchTree"
    )
    assert (
        f"{type(binary_search_tree_0.root).__module__}.{type(binary_search_tree_0.root).__qualname__}"
        == "example.TreeNode"
    )


def test_case_1():
    set_0 = set()
    binary_search_tree_0 = module_0.BinarySearchTree(set_0)
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "example.BinarySearchTree"
    )
    assert binary_search_tree_0.root is None


def test_case_2():
    bytes_0 = b"\x1aO\x98M $\x04\xdd\xb3ZF\xf7\xde\xa3"
    binary_search_tree_0 = module_0.BinarySearchTree(bytes_0)
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "example.BinarySearchTree"
    )
    assert (
        f"{type(binary_search_tree_0.root).__module__}.{type(binary_search_tree_0.root).__qualname__}"
        == "example.TreeNode"
    )
    var_0 = binary_search_tree_0.sorted_data()


def test_case_3():
    bytes_0 = b"\nO\x98M\x06\xb7\x04\xdd\xb3\x9fZxl\xf7\xf8\x95"
    tree_node_0 = module_0.TreeNode(bytes_0, bytes_0, bytes_0)
    var_0 = tree_node_0.__str__()
    assert (
        var_0
        == "TreeNode(data=b'\\nO\\x98M\\x06\\xb7\\x04\\xdd\\xb3\\x9fZxl\\xf7\\xf8\\x95', left=b'\\nO\\x98M\\x06\\xb7\\x04\\xdd\\xb3\\x9fZxl\\xf7\\xf8\\x95', right=b'\\nO\\x98M\\x06\\xb7\\x04\\xdd\\xb3\\x9fZxl\\xf7\\xf8\\x95')"
    )
    binary_search_tree_0 = module_0.BinarySearchTree(bytes_0)
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "example.BinarySearchTree"
    )
    assert (
        f"{type(binary_search_tree_0.root).__module__}.{type(binary_search_tree_0.root).__qualname__}"
        == "example.TreeNode"
    )


def test_case_4():
    bytes_0 = b"\xce\xf24\xd7^\x95\xb8V_\xe6\xd6w\xc6"
    binary_search_tree_0 = module_0.BinarySearchTree(bytes_0)
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "example.BinarySearchTree"
    )
    assert (
        f"{type(binary_search_tree_0.root).__module__}.{type(binary_search_tree_0.root).__qualname__}"
        == "example.TreeNode"
    )
    var_0 = binary_search_tree_0.data()
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "example.TreeNode"
    assert var_0.data == 206
    assert (
        f"{type(var_0.left).__module__}.{type(var_0.left).__qualname__}"
        == "example.TreeNode"
    )
    assert (
        f"{type(var_0.right).__module__}.{type(var_0.right).__qualname__}"
        == "example.TreeNode"
    )
