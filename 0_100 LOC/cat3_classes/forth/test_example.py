# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import example as module_0
import builtins as module_1


def test_case_0():
    bytes_0 = b"\xa5\x10\x02\xe9\xf7\x81\x1a8\x04\xf9\x1a?\xb5\xbex\x90"
    var_0 = module_0.is_integer(bytes_0)
    assert var_0 is False


@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    module_0.is_integer(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    complex_0 = -403.31 + 721.0809903548978j
    module_0.evaluate(complex_0)


def test_case_3():
    none_type_0 = None
    var_0 = module_0.evaluate(none_type_0)


def test_case_4():
    complex_0 = -403.31 + 722.736j
    stack_underflow_error_0 = module_0.StackUnderflowError(complex_0)
    assert stack_underflow_error_0.message == (-403.31 + 722.736j)


def test_case_5():
    str_0 = "\x0cP#\x0bBgCk\x0b#ht6"
    var_0 = module_0.evaluate(str_0)


def test_case_6():
    str_0 = '"'
    with pytest.raises(ValueError):
        module_0.evaluate(str_0)


def test_case_7():
    str_0 = " "
    var_0 = module_0.evaluate(str_0)


def test_case_8():
    str_0 = "*"
    with pytest.raises(module_0.StackUnderflowError):
        module_0.evaluate(str_0)


def test_case_9():
    str_0 = "+"
    with pytest.raises(module_0.StackUnderflowError):
        module_0.evaluate(str_0)


def test_case_10():
    str_0 = "o:L{3eEhw:7d5=}|/"
    with pytest.raises(module_0.StackUnderflowError):
        module_0.evaluate(str_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    str_0 = ':b/Zb]"'
    module_0.evaluate(str_0)


def test_case_12():
    str_0 = "_V!&Mvn/C1Z]I` HSAn-"
    with pytest.raises(module_0.StackUnderflowError):
        module_0.evaluate(str_0)


def test_case_13():
    str_0 = "3\tuP"
    list_0 = [str_0, str_0]
    with pytest.raises(ValueError):
        module_0.evaluate(list_0)


def test_case_14():
    str_0 = "swap"
    list_0 = [str_0, str_0]
    base_exception_0 = module_1.BaseException()
    with pytest.raises(module_0.StackUnderflowError):
        module_0.evaluate(list_0)


def test_case_15():
    str_0 = "drop"
    list_0 = [str_0, str_0, str_0, str_0]
    with pytest.raises(module_0.StackUnderflowError):
        module_0.evaluate(list_0)


@pytest.mark.xfail(strict=True)
def test_case_16():
    str_0 = ":\x0cdgR!Ff47C9S!/\rI"
    list_0 = [str_0]
    module_0.evaluate(list_0)


def test_case_17():
    bool_0 = True
    var_0 = module_0.is_integer(bool_0)
    bool_1 = True
    var_1 = module_0.is_integer(bool_1)
    str_0 = "5\tDuP"
    list_0 = [str_0, str_0]
    var_2 = module_0.evaluate(list_0)


@pytest.mark.xfail(strict=True)
def test_case_18():
    str_0 = ":\x0cdgR!Ff47C9S!/\rI"
    list_0 = [str_0, str_0, str_0]
    module_0.evaluate(list_0)


@pytest.mark.xfail(strict=True)
def test_case_19():
    none_type_0 = None
    var_0 = module_0.evaluate(none_type_0)
    str_0 = ":\x0cdgR!Ff47C9S!/\rI"
    list_0 = [str_0, str_0, str_0, var_0]
    module_0.evaluate(list_0)
