# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import example as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    robot_0 = module_0.Robot()
    assert f"{type(robot_0).__module__}.{type(robot_0).__qualname__}" == "example.Robot"
    assert (
        f"{type(robot_0.compass).__module__}.{type(robot_0.compass).__qualname__}"
        == "example.Compass"
    )
    assert robot_0.x_pos == 0
    assert robot_0.y_pos == 0
    assert (
        f"{type(module_0.Robot.direction).__module__}.{type(module_0.Robot.direction).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Robot.coordinates).__module__}.{type(module_0.Robot.coordinates).__qualname__}"
        == "builtins.property"
    )
    var_0 = robot_0.advance()
    assert robot_0.y_pos == 1
    var_0.turn_right()


@pytest.mark.xfail(strict=True)
def test_case_1():
    robot_0 = module_0.Robot()
    assert f"{type(robot_0).__module__}.{type(robot_0).__qualname__}" == "example.Robot"
    assert (
        f"{type(robot_0.compass).__module__}.{type(robot_0.compass).__qualname__}"
        == "example.Compass"
    )
    assert robot_0.x_pos == 0
    assert robot_0.y_pos == 0
    assert (
        f"{type(module_0.Robot.direction).__module__}.{type(module_0.Robot.direction).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Robot.coordinates).__module__}.{type(module_0.Robot.coordinates).__qualname__}"
        == "builtins.property"
    )
    var_0 = robot_0.turn_left()
    var_1 = robot_0.advance()
    assert robot_0.x_pos == -1
    robot_1 = module_0.Robot(var_0, var_1)
    assert robot_1.y_pos == 0
    var_0.turn_right()


@pytest.mark.xfail(strict=True)
def test_case_2():
    float_0 = 1348.9837
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    int_0 = 133
    robot_0 = module_0.Robot(x_pos=int_0, y_pos=int_0)
    assert f"{type(robot_0).__module__}.{type(robot_0).__qualname__}" == "example.Robot"
    assert (
        f"{type(robot_0.compass).__module__}.{type(robot_0.compass).__qualname__}"
        == "example.Compass"
    )
    assert robot_0.x_pos == 133
    assert robot_0.y_pos == 133
    assert (
        f"{type(module_0.Robot.direction).__module__}.{type(module_0.Robot.direction).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Robot.coordinates).__module__}.{type(module_0.Robot.coordinates).__qualname__}"
        == "builtins.property"
    )
    var_0 = robot_0.move(dict_0)
    var_0.advance()


def test_case_3():
    compass_0 = module_0.Compass()
    assert (
        f"{type(compass_0).__module__}.{type(compass_0).__qualname__}"
        == "example.Compass"
    )
    assert compass_0.direction == 0


def test_case_4():
    none_type_0 = None
    robot_0 = module_0.Robot(x_pos=none_type_0)
    assert f"{type(robot_0).__module__}.{type(robot_0).__qualname__}" == "example.Robot"
    assert (
        f"{type(robot_0.compass).__module__}.{type(robot_0.compass).__qualname__}"
        == "example.Compass"
    )
    assert robot_0.x_pos is None
    assert robot_0.y_pos == 0
    assert (
        f"{type(module_0.Robot.direction).__module__}.{type(module_0.Robot.direction).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Robot.coordinates).__module__}.{type(module_0.Robot.coordinates).__qualname__}"
        == "builtins.property"
    )
    var_0 = robot_0.turn_left()


@pytest.mark.xfail(strict=True)
def test_case_5():
    robot_0 = module_0.Robot()
    assert f"{type(robot_0).__module__}.{type(robot_0).__qualname__}" == "example.Robot"
    assert (
        f"{type(robot_0.compass).__module__}.{type(robot_0.compass).__qualname__}"
        == "example.Compass"
    )
    assert robot_0.x_pos == 0
    assert robot_0.y_pos == 0
    assert (
        f"{type(module_0.Robot.direction).__module__}.{type(module_0.Robot.direction).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Robot.coordinates).__module__}.{type(module_0.Robot.coordinates).__qualname__}"
        == "builtins.property"
    )
    var_0 = robot_0.turn_left()
    var_1 = robot_0.advance()
    assert robot_0.x_pos == -1
    var_2 = robot_0.turn_right()
    robot_1 = module_0.Robot(var_0, var_1)
    assert robot_1.y_pos == 0
    var_0.turn_right()


def test_case_6():
    robot_0 = module_0.Robot()
    assert f"{type(robot_0).__module__}.{type(robot_0).__qualname__}" == "example.Robot"
    assert (
        f"{type(robot_0.compass).__module__}.{type(robot_0.compass).__qualname__}"
        == "example.Compass"
    )
    assert robot_0.x_pos == 0
    assert robot_0.y_pos == 0
    assert (
        f"{type(module_0.Robot.direction).__module__}.{type(module_0.Robot.direction).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Robot.coordinates).__module__}.{type(module_0.Robot.coordinates).__qualname__}"
        == "builtins.property"
    )


@pytest.mark.xfail(strict=True)
def test_case_7():
    robot_0 = module_0.Robot()
    assert f"{type(robot_0).__module__}.{type(robot_0).__qualname__}" == "example.Robot"
    assert (
        f"{type(robot_0.compass).__module__}.{type(robot_0.compass).__qualname__}"
        == "example.Compass"
    )
    assert robot_0.x_pos == 0
    assert robot_0.y_pos == 0
    assert (
        f"{type(module_0.Robot.direction).__module__}.{type(module_0.Robot.direction).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Robot.coordinates).__module__}.{type(module_0.Robot.coordinates).__qualname__}"
        == "builtins.property"
    )
    none_type_0 = None
    var_0 = robot_0.turn_right()
    var_1 = robot_0.advance()
    assert robot_0.x_pos == 1
    none_type_0.move(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    none_type_0 = None
    robot_0 = module_0.Robot()
    assert f"{type(robot_0).__module__}.{type(robot_0).__qualname__}" == "example.Robot"
    assert (
        f"{type(robot_0.compass).__module__}.{type(robot_0.compass).__qualname__}"
        == "example.Compass"
    )
    assert robot_0.x_pos == 0
    assert robot_0.y_pos == 0
    assert (
        f"{type(module_0.Robot.direction).__module__}.{type(module_0.Robot.direction).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Robot.coordinates).__module__}.{type(module_0.Robot.coordinates).__qualname__}"
        == "builtins.property"
    )
    robot_1 = module_0.Robot(none_type_0, none_type_0, none_type_0)
    var_0 = robot_1.advance()
    var_0.advance()


@pytest.mark.xfail(strict=True)
def test_case_9():
    robot_0 = module_0.Robot()
    assert f"{type(robot_0).__module__}.{type(robot_0).__qualname__}" == "example.Robot"
    assert (
        f"{type(robot_0.compass).__module__}.{type(robot_0.compass).__qualname__}"
        == "example.Compass"
    )
    assert robot_0.x_pos == 0
    assert robot_0.y_pos == 0
    assert (
        f"{type(module_0.Robot.direction).__module__}.{type(module_0.Robot.direction).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Robot.coordinates).__module__}.{type(module_0.Robot.coordinates).__qualname__}"
        == "builtins.property"
    )
    var_0 = robot_0.turn_left()
    var_1 = robot_0.turn_left()
    var_2 = robot_0.advance()
    assert robot_0.y_pos == -1
    robot_1 = module_0.Robot(robot_0, y_pos=var_1)
    assert robot_1.x_pos == 0
    robot_1.turn_right()


@pytest.mark.xfail(strict=True)
def test_case_10():
    str_0 = "Kkz%0RN\nTp"
    robot_0 = module_0.Robot()
    assert f"{type(robot_0).__module__}.{type(robot_0).__qualname__}" == "example.Robot"
    assert (
        f"{type(robot_0.compass).__module__}.{type(robot_0.compass).__qualname__}"
        == "example.Compass"
    )
    assert robot_0.x_pos == 0
    assert robot_0.y_pos == 0
    assert (
        f"{type(module_0.Robot.direction).__module__}.{type(module_0.Robot.direction).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Robot.coordinates).__module__}.{type(module_0.Robot.coordinates).__qualname__}"
        == "builtins.property"
    )
    var_0 = robot_0.move(str_0)
    robot_0.move(robot_0)
