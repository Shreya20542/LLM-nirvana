# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import example as module_0
import builtins as module_1


def test_case_0():
    bool_0 = True
    complex_number_0 = module_0.ComplexNumber()
    assert complex_number_0.real == 0
    assert complex_number_0.imaginary == 0
    var_0 = complex_number_0.conjugate()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "example.ComplexNumber"
    )
    assert var_0.real == 0
    assert var_0.imaginary == 0
    var_1 = var_0.exp()
    assert var_1.real == pytest.approx(1.0, abs=0.01, rel=0.01)
    assert var_1.imaginary == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_2 = var_1.__eq__(bool_0)
    assert var_2 is True


@pytest.mark.xfail(strict=True)
def test_case_1():
    int_0 = -5417
    bool_0 = False
    tuple_0 = (int_0, int_0, bool_0)
    none_type_0 = None
    complex_number_0 = module_0.ComplexNumber(none_type_0)
    assert complex_number_0.imaginary == 0
    var_0 = complex_number_0.__eq__(tuple_0)
    assert var_0 is False
    var_1 = var_0.__sub__(bool_0)
    assert var_1 == 0
    var_1.exp()


@pytest.mark.xfail(strict=True)
def test_case_2():
    complex_number_0 = module_0.ComplexNumber()
    assert complex_number_0.real == 0
    assert complex_number_0.imaginary == 0
    var_0 = complex_number_0.conjugate()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "example.ComplexNumber"
    )
    assert var_0.real == 0
    assert var_0.imaginary == 0
    var_1 = complex_number_0.__rsub__(complex_number_0)
    var_2 = var_0.__eq__(var_1)
    assert var_2 is True
    var_3 = complex_number_0.exp()
    assert var_3.real == pytest.approx(1.0, abs=0.01, rel=0.01)
    assert var_3.imaginary == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_4 = var_0.__eq__(var_3)
    assert var_4 is False
    var_5 = var_0.__eq__(var_3)
    assert var_5 is False
    bool_0 = False
    var_6 = complex_number_0.__radd__(bool_0)
    assert (
        f"{type(var_6).__module__}.{type(var_6).__qualname__}"
        == "example.ComplexNumber"
    )
    assert var_6.real == 0
    assert var_6.imaginary == 0
    complex_number_0.__rtruediv__(complex_number_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    int_0 = 2674
    dict_0 = {int_0: int_0, int_0: int_0}
    list_0 = [dict_0, int_0]
    complex_number_0 = module_0.ComplexNumber(list_0)
    assert complex_number_0.imaginary == 0
    int_1 = 460
    complex_number_1 = module_0.ComplexNumber()
    assert complex_number_1.real == 0
    assert complex_number_1.imaginary == 0
    complex_number_2 = module_0.ComplexNumber(int_1)
    assert complex_number_2.imaginary == 0
    var_0 = complex_number_2.__add__(complex_number_2)
    assert var_0.real == 920
    assert var_0.imaginary == 0
    var_1 = var_0.__sub__(var_0)
    assert var_1.real == 0
    var_2 = var_0.conjugate()
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "example.ComplexNumber"
    )
    assert var_2.real == 920
    assert var_2.imaginary == 0
    var_3 = var_0.__abs__()
    assert var_3 == pytest.approx(920.0, abs=0.01, rel=0.01)
    complex_number_0.__add__(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    complex_number_0 = module_0.ComplexNumber(none_type_0)
    assert complex_number_0.imaginary == 0
    complex_number_0.__add__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bool_0 = False
    complex_number_0 = module_0.ComplexNumber()
    assert complex_number_0.real == 0
    assert complex_number_0.imaginary == 0
    var_0 = complex_number_0.exp()
    assert var_0.real == pytest.approx(1.0, abs=0.01, rel=0.01)
    assert var_0.imaginary == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_1 = complex_number_0.__abs__()
    assert var_1 == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_2 = complex_number_0.__rsub__(complex_number_0)
    var_3 = complex_number_0.exp()
    assert var_3.real == pytest.approx(1.0, abs=0.01, rel=0.01)
    assert var_3.imaginary == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_4 = var_0.__rtruediv__(var_0)
    assert (
        f"{type(var_4).__module__}.{type(var_4).__qualname__}"
        == "example.ComplexNumber"
    )
    assert var_4.real == pytest.approx(1.0, abs=0.01, rel=0.01)
    assert var_4.imaginary == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_5 = complex_number_0.__rsub__(var_1)
    assert (
        f"{type(var_5).__module__}.{type(var_5).__qualname__}"
        == "example.ComplexNumber"
    )
    assert var_5.real == pytest.approx(0.0, abs=0.01, rel=0.01)
    assert var_5.imaginary == 0
    var_6 = var_0.__rmul__(var_5)
    assert (
        f"{type(var_6).__module__}.{type(var_6).__qualname__}"
        == "example.ComplexNumber"
    )
    assert var_6.real == pytest.approx(0.0, abs=0.01, rel=0.01)
    assert var_6.imaginary == pytest.approx(0.0, abs=0.01, rel=0.01)
    complex_number_1 = module_0.ComplexNumber()
    assert complex_number_1.real == 0
    assert complex_number_1.imaginary == 0
    var_7 = var_2.__eq__(var_4)
    assert var_7 is False
    float_0 = -2320.1762
    var_8 = var_0.__radd__(var_0)
    assert (
        f"{type(var_8).__module__}.{type(var_8).__qualname__}"
        == "example.ComplexNumber"
    )
    assert var_8.real == pytest.approx(2.0, abs=0.01, rel=0.01)
    assert var_8.imaginary == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_9 = var_8.__rtruediv__(float_0)
    assert (
        f"{type(var_9).__module__}.{type(var_9).__qualname__}"
        == "example.ComplexNumber"
    )
    assert var_9.real == pytest.approx(-1160.0881, abs=0.01, rel=0.01)
    assert var_9.imaginary == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_10 = var_0.__rmul__(bool_0)
    assert var_10.real == pytest.approx(0.0, abs=0.01, rel=0.01)
    assert var_10.imaginary == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_11 = var_3.__radd__(var_1)
    assert var_11.real == pytest.approx(1.0, abs=0.01, rel=0.01)
    assert var_11.imaginary == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_12 = var_0.__truediv__(var_0)
    assert (
        f"{type(var_12).__module__}.{type(var_12).__qualname__}"
        == "example.ComplexNumber"
    )
    assert var_12.real == pytest.approx(1.0, abs=0.01, rel=0.01)
    assert var_12.imaginary == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_13 = var_2.__rsub__(var_0)
    assert var_13.real == pytest.approx(1.0, abs=0.01, rel=0.01)
    assert var_13.imaginary == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_14 = var_13.__rsub__(var_4)
    assert var_14.real == pytest.approx(0.0, abs=0.01, rel=0.01)
    assert var_14.imaginary == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_15 = complex_number_1.__sub__(var_0)
    assert var_15.real == pytest.approx(-1.0, abs=0.01, rel=0.01)
    assert var_15.imaginary == pytest.approx(0.0, abs=0.01, rel=0.01)
    complex_number_0.__rtruediv__(bool_0)


def test_case_6():
    bool_0 = False
    complex_number_0 = module_0.ComplexNumber(imaginary=bool_0)
    assert complex_number_0.real == 0
    complex_number_1 = module_0.ComplexNumber()
    assert complex_number_1.real == 0
    assert complex_number_1.imaginary == 0
    var_0 = complex_number_0.__abs__()
    assert var_0 == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_1 = complex_number_0.__radd__(bool_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "example.ComplexNumber"
    )
    assert var_1.real == 0
    assert var_1.imaginary == 0
    var_2 = complex_number_0.__radd__(bool_0)
    assert var_2.real == 0
    assert var_2.imaginary == 0


@pytest.mark.xfail(strict=True)
def test_case_7():
    complex_number_0 = module_0.ComplexNumber()
    assert complex_number_0.real == 0
    assert complex_number_0.imaginary == 0
    complex_number_0.__truediv__(complex_number_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    float_0 = -1342.51
    none_type_0 = None
    complex_number_0 = module_0.ComplexNumber()
    assert complex_number_0.real == 0
    assert complex_number_0.imaginary == 0
    var_0 = complex_number_0.__mul__(float_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "example.ComplexNumber"
    )
    assert var_0.real == pytest.approx(-0.0, abs=0.01, rel=0.01)
    assert var_0.imaginary == pytest.approx(0.0, abs=0.01, rel=0.01)
    complex_number_0.__radd__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    bool_0 = False
    complex_number_0 = module_0.ComplexNumber(bool_0)
    assert complex_number_0.imaginary == 0
    complex_number_1 = module_0.ComplexNumber()
    assert complex_number_1.real == 0
    assert complex_number_1.imaginary == 0
    none_type_0 = None
    var_0 = complex_number_0.__rmul__(complex_number_1)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "example.ComplexNumber"
    )
    assert var_0.real == 0
    assert var_0.imaginary == 0
    var_1 = complex_number_1.__sub__(complex_number_0)
    assert var_1.real == 0
    var_2 = complex_number_1.__abs__()
    assert var_2 == pytest.approx(0.0, abs=0.01, rel=0.01)
    complex_number_2 = module_0.ComplexNumber()
    assert complex_number_2.real == 0
    assert complex_number_2.imaginary == 0
    var_3 = var_0.__rsub__(complex_number_1)
    assert var_3.real == 0
    assert var_3.imaginary == 0
    var_1.__rsub__(none_type_0)


def test_case_10():
    complex_number_0 = module_0.ComplexNumber()
    assert complex_number_0.real == 0
    assert complex_number_0.imaginary == 0
    var_0 = complex_number_0.__mul__(complex_number_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "example.ComplexNumber"
    )
    assert var_0.real == 0
    assert var_0.imaginary == 0
    var_1 = complex_number_0.__abs__()
    assert var_1 == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_2 = complex_number_0.__rmul__(var_1)
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "example.ComplexNumber"
    )
    assert var_2.real == pytest.approx(0.0, abs=0.01, rel=0.01)
    assert var_2.imaginary == pytest.approx(0.0, abs=0.01, rel=0.01)
    bool_0 = True
    var_3 = complex_number_0.__abs__()
    assert var_3 == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_4 = var_1.__mul__(bool_0)
    assert var_4 == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_5 = complex_number_0.conjugate()
    assert (
        f"{type(var_5).__module__}.{type(var_5).__qualname__}"
        == "example.ComplexNumber"
    )
    assert var_5.real == 0
    assert var_5.imaginary == 0


@pytest.mark.xfail(strict=True)
def test_case_11():
    bool_0 = True
    list_0 = [bool_0]
    complex_number_0 = module_0.ComplexNumber()
    assert complex_number_0.real == 0
    assert complex_number_0.imaginary == 0
    complex_number_0.__sub__(list_0)


@pytest.mark.xfail(strict=True)
def test_case_12():
    list_0 = []
    complex_number_0 = module_0.ComplexNumber()
    assert complex_number_0.real == 0
    assert complex_number_0.imaginary == 0
    var_0 = complex_number_0.exp()
    assert var_0.real == pytest.approx(1.0, abs=0.01, rel=0.01)
    assert var_0.imaginary == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_0.__rsub__(list_0)


@pytest.mark.xfail(strict=True)
def test_case_13():
    int_0 = 4091
    tuple_0 = (int_0,)
    complex_number_0 = module_0.ComplexNumber()
    assert complex_number_0.real == 0
    assert complex_number_0.imaginary == 0
    complex_number_0.__truediv__(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    object_0 = module_1.object()
    bool_0 = False
    complex_number_0 = module_0.ComplexNumber()
    assert complex_number_0.real == 0
    assert complex_number_0.imaginary == 0
    complex_number_0.__rtruediv__(bool_0)


def test_case_15():
    complex_number_0 = module_0.ComplexNumber()
    assert complex_number_0.real == 0
    assert complex_number_0.imaginary == 0
    var_0 = complex_number_0.conjugate()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "example.ComplexNumber"
    )
    assert var_0.real == 0
    assert var_0.imaginary == 0
