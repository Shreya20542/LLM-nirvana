# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import example as module_0


def test_case_0():
    bool_0 = False
    bytes_0 = b"\xfa4\x0c\xcf"
    hangman_0 = module_0.Hangman(bytes_0)
    assert (
        f"{type(hangman_0).__module__}.{type(hangman_0).__qualname__}"
        == "example.Hangman"
    )
    assert hangman_0.remaining_guesses == 9
    assert hangman_0.status == "ongoing"
    assert hangman_0.word == b"\xfa4\x0c\xcf"
    assert hangman_0.masked_word == "____"
    assert hangman_0.guesses == []
    assert module_0.STATUS_WIN == "win"
    assert module_0.STATUS_LOSE == "lose"
    assert module_0.STATUS_ONGOING == "ongoing"
    var_0 = hangman_0.guess(bool_0)
    assert hangman_0.remaining_guesses == 8


def test_case_1():
    str_0 = ",Dj.ecIi@eC!sQ["
    hangman_0 = module_0.Hangman(str_0)
    assert (
        f"{type(hangman_0).__module__}.{type(hangman_0).__qualname__}"
        == "example.Hangman"
    )
    assert hangman_0.remaining_guesses == 9
    assert hangman_0.status == "ongoing"
    assert hangman_0.word == ",Dj.ecIi@eC!sQ["
    assert hangman_0.masked_word == "_______________"
    assert hangman_0.guesses == []
    assert module_0.STATUS_WIN == "win"
    assert module_0.STATUS_LOSE == "lose"
    assert module_0.STATUS_ONGOING == "ongoing"
    var_0 = hangman_0.guess(str_0)
    assert hangman_0.guesses == [",Dj.ecIi@eC!sQ["]
    hangman_1 = module_0.Hangman(str_0)
    assert hangman_1.remaining_guesses == 9
    assert hangman_1.status == "ongoing"
    assert hangman_1.masked_word == "_______________"


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    module_0.Hangman(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"W\xf4n\xac\xd6\xcf\xb5"
    bytes_1 = b"\xe7\x1b\x1f\x86\xe8\xfdm\xe6\x1c\x15\xda\xd1\x1f\x0e\x14\x939"
    hangman_0 = module_0.Hangman(bytes_1)
    assert (
        f"{type(hangman_0).__module__}.{type(hangman_0).__qualname__}"
        == "example.Hangman"
    )
    assert hangman_0.remaining_guesses == 9
    assert hangman_0.status == "ongoing"
    assert (
        hangman_0.word
        == b"\xe7\x1b\x1f\x86\xe8\xfdm\xe6\x1c\x15\xda\xd1\x1f\x0e\x14\x939"
    )
    assert hangman_0.masked_word == "_________________"
    assert hangman_0.guesses == []
    assert module_0.STATUS_WIN == "win"
    assert module_0.STATUS_LOSE == "lose"
    assert module_0.STATUS_ONGOING == "ongoing"
    var_0 = hangman_0.get_masked_word()
    assert var_0 == "_________________"
    var_1 = hangman_0.guess(bytes_0)
    assert hangman_0.remaining_guesses == 8
    var_1.update_masked_word()


@pytest.mark.xfail(strict=True)
def test_case_4():
    bytes_0 = b"W\xf4n\xac\xd6\xcf\xb5"
    bytes_1 = b"\xe7\x1b\x1f\x86\xe8\xfdm\xe6\x1c\x15\xda\xd1\x1f\x0e\x14\x939"
    hangman_0 = module_0.Hangman(bytes_1)
    assert (
        f"{type(hangman_0).__module__}.{type(hangman_0).__qualname__}"
        == "example.Hangman"
    )
    assert hangman_0.remaining_guesses == 9
    assert hangman_0.status == "ongoing"
    assert (
        hangman_0.word
        == b"\xe7\x1b\x1f\x86\xe8\xfdm\xe6\x1c\x15\xda\xd1\x1f\x0e\x14\x939"
    )
    assert hangman_0.masked_word == "_________________"
    assert hangman_0.guesses == []
    assert module_0.STATUS_WIN == "win"
    assert module_0.STATUS_LOSE == "lose"
    assert module_0.STATUS_ONGOING == "ongoing"
    var_0 = hangman_0.get_status()
    assert var_0 == "ongoing"
    var_1 = hangman_0.guess(bytes_0)
    assert hangman_0.remaining_guesses == 8
    var_1.update_masked_word()


def test_case_5():
    str_0 = "["
    hangman_0 = module_0.Hangman(str_0)
    assert (
        f"{type(hangman_0).__module__}.{type(hangman_0).__qualname__}"
        == "example.Hangman"
    )
    assert hangman_0.remaining_guesses == 9
    assert hangman_0.status == "ongoing"
    assert hangman_0.word == "["
    assert hangman_0.masked_word == "_"
    assert hangman_0.guesses == []
    assert module_0.STATUS_WIN == "win"
    assert module_0.STATUS_LOSE == "lose"
    assert module_0.STATUS_ONGOING == "ongoing"
    var_0 = hangman_0.guess(str_0)
    assert hangman_0.status == "win"
    assert hangman_0.masked_word == "["
    assert hangman_0.guesses == ["["]
    hangman_1 = module_0.Hangman(str_0)
    assert hangman_1.remaining_guesses == 9
    assert hangman_1.status == "ongoing"
    assert hangman_1.masked_word == "_"
    var_1 = hangman_0.get_masked_word()
    assert var_1 == "["
    with pytest.raises(ValueError):
        hangman_0.guess(var_1)


@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = ",Dj.ecIi@eC!sQ["
    hangman_0 = module_0.Hangman(str_0)
    assert (
        f"{type(hangman_0).__module__}.{type(hangman_0).__qualname__}"
        == "example.Hangman"
    )
    assert hangman_0.remaining_guesses == 9
    assert hangman_0.status == "ongoing"
    assert hangman_0.word == ",Dj.ecIi@eC!sQ["
    assert hangman_0.masked_word == "_______________"
    assert hangman_0.guesses == []
    assert module_0.STATUS_WIN == "win"
    assert module_0.STATUS_LOSE == "lose"
    assert module_0.STATUS_ONGOING == "ongoing"
    var_0 = hangman_0.update_status()
    var_1 = hangman_0.guess(str_0)
    assert hangman_0.guesses == [",Dj.ecIi@eC!sQ["]
    hangman_1 = module_0.Hangman(str_0)
    assert hangman_1.remaining_guesses == 9
    assert hangman_1.status == "ongoing"
    assert hangman_1.masked_word == "_______________"
    var_2 = hangman_0.guess(str_0)
    assert hangman_0.remaining_guesses == 8
    module_0.Hangman(var_1)


@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = ",Dj.ec4ieCsQ["
    hangman_0 = module_0.Hangman(str_0)
    assert (
        f"{type(hangman_0).__module__}.{type(hangman_0).__qualname__}"
        == "example.Hangman"
    )
    assert hangman_0.remaining_guesses == 9
    assert hangman_0.status == "ongoing"
    assert hangman_0.word == ",Dj.ec4ieCsQ["
    assert hangman_0.masked_word == "_____________"
    assert hangman_0.guesses == []
    assert module_0.STATUS_WIN == "win"
    assert module_0.STATUS_LOSE == "lose"
    assert module_0.STATUS_ONGOING == "ongoing"
    var_0 = hangman_0.update_remaining_guesses(str_0)
    assert hangman_0.guesses == [",Dj.ec4ieCsQ["]
    var_1 = hangman_0.update_remaining_guesses(str_0)
    assert hangman_0.remaining_guesses == 8
    var_2 = hangman_0.guess(str_0)
    assert hangman_0.remaining_guesses == 7
    var_3 = hangman_0.guess(str_0)
    assert hangman_0.remaining_guesses == 6
    var_4 = hangman_0.guess(str_0)
    assert hangman_0.remaining_guesses == 5
    var_5 = hangman_0.guess(str_0)
    assert hangman_0.remaining_guesses == 4
    var_6 = hangman_0.guess(str_0)
    assert hangman_0.remaining_guesses == 3
    var_7 = hangman_0.update_remaining_guesses(str_0)
    assert hangman_0.remaining_guesses == 2
    var_8 = hangman_0.guess(str_0)
    assert hangman_0.remaining_guesses == 1
    var_9 = hangman_0.get_status()
    assert var_9 == "ongoing"
    var_10 = hangman_0.get_masked_word()
    assert var_10 == "_____________"
    var_11 = hangman_0.guess(var_9)
    assert hangman_0.remaining_guesses == 0
    var_12 = hangman_0.guess(var_10)
    assert hangman_0.remaining_guesses == -1
    assert hangman_0.status == "lose"
    var_13 = hangman_0.update_status()
    module_0.Hangman(var_13)
