# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import example as module_0
import builtins as module_1


def test_case_0():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.unshift(linked_list_0)
    assert len(linked_list_0) == 1
    var_1 = linked_list_0.__iter__()
    float_0 = 474.69
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_2 = linked_list_1.unshift(linked_list_1)
    assert len(linked_list_1) == 1
    with pytest.raises(ValueError):
        linked_list_1.delete(float_0)


def test_case_1():
    none_type_0 = None
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    with pytest.raises(ValueError):
        linked_list_0.delete(none_type_0)


def test_case_2():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.push(linked_list_0)
    assert len(linked_list_0) == 1
    var_1 = linked_list_0.pop()
    assert len(linked_list_0) == 0
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "example.LinkedList"
    )
    assert len(var_1) == 0


def test_case_3():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    with pytest.raises(IndexError):
        linked_list_0.pop()


def test_case_4():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    with pytest.raises(IndexError):
        linked_list_0.shift()


def test_case_5():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.push(linked_list_0)
    assert len(linked_list_0) == 1
    var_1 = linked_list_0.shift()
    assert len(linked_list_0) == 0
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "example.LinkedList"
    )
    assert len(var_1) == 0


def test_case_6():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.unshift(linked_list_0)
    assert len(linked_list_0) == 1
    var_1 = linked_list_0.pop()
    assert len(linked_list_0) == 0
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "example.LinkedList"
    )
    assert len(var_1) == 0


@pytest.mark.xfail(strict=True)
def test_case_7():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.__len__()
    assert var_0 == 0
    var_0.shift()


@pytest.mark.xfail(strict=True)
def test_case_8():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    none_type_0 = None
    var_0 = linked_list_0.unshift(none_type_0)
    assert len(linked_list_0) == 1
    var_1 = linked_list_0.unshift(linked_list_0)
    assert len(linked_list_0) == 2
    var_2 = linked_list_0.__iter__()
    var_3 = linked_list_0.pop()
    assert len(linked_list_0) == 1
    var_4 = linked_list_0.delete(linked_list_0)
    assert len(linked_list_0) == 0
    var_5 = linked_list_0.unshift(var_0)
    assert len(linked_list_0) == 1
    var_5.delete(var_3)


def test_case_9():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = linked_list_0.push(linked_list_0)
    assert len(linked_list_0) == 1
    var_1 = linked_list_0.push(linked_list_0)
    assert len(linked_list_0) == 2
    var_2 = linked_list_0.shift()
    assert len(linked_list_0) == 1
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "example.LinkedList"
    )
    assert len(var_2) == 1


@pytest.mark.xfail(strict=True)
def test_case_10():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    var_0 = module_0.LinkedList()
    assert len(var_0) == 0
    var_1 = linked_list_0.__iter__()
    var_2 = module_1.object(*var_0)
    var_3 = var_0.__iter__()
    var_4 = var_0.unshift(linked_list_0)
    assert len(var_0) == 1
    var_4.delete(var_3)


@pytest.mark.xfail(strict=True)
def test_case_11():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    none_type_0 = None
    var_0 = linked_list_0.push(none_type_0)
    assert len(linked_list_0) == 1
    var_1 = linked_list_0.push(linked_list_0)
    assert len(linked_list_0) == 2
    var_2 = linked_list_0.unshift(var_1)
    assert len(linked_list_0) == 3
    var_3 = linked_list_0.shift()
    assert len(linked_list_0) == 2
    var_4 = linked_list_0.delete(linked_list_0)
    assert len(linked_list_0) == 1
    linked_list_1 = module_0.LinkedList()
    assert len(linked_list_1) == 0
    var_5 = linked_list_1.__len__()
    assert var_5 == 0
    var_6 = linked_list_1.unshift(var_5)
    assert len(linked_list_1) == 1
    linked_list_2 = module_0.LinkedList()
    assert len(linked_list_2) == 0
    var_5.delete(linked_list_2)


@pytest.mark.xfail(strict=True)
def test_case_12():
    linked_list_0 = module_0.LinkedList()
    assert len(linked_list_0) == 0
    none_type_0 = None
    var_0 = linked_list_0.unshift(none_type_0)
    assert len(linked_list_0) == 1
    var_1 = linked_list_0.unshift(linked_list_0)
    assert len(linked_list_0) == 2
    var_2 = linked_list_0.__iter__()
    var_3 = linked_list_0.unshift(linked_list_0)
    assert len(linked_list_0) == 3
    var_4 = linked_list_0.pop()
    assert len(linked_list_0) == 2
    var_5 = linked_list_0.delete(linked_list_0)
    assert len(linked_list_0) == 1
    var_6 = linked_list_0.unshift(var_2)
    assert len(linked_list_0) == 2
    var_5.delete(var_3)
