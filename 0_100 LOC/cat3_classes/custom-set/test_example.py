# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import example as module_0


def test_case_0():
    custom_set_0 = module_0.CustomSet()
    var_0 = custom_set_0.isempty()
    assert var_0 is True
    var_1 = custom_set_0.__iter__()
    var_2 = custom_set_0.isempty()
    assert var_2 is True
    custom_set_1 = module_0.CustomSet(var_1)


def test_case_1():
    float_0 = -468.0
    none_type_0 = None
    custom_set_0 = module_0.CustomSet(none_type_0)
    var_0 = custom_set_0.intersection(float_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "example.CustomSet"
    assert var_0.elements == []


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    custom_set_0 = module_0.CustomSet(set_0)
    var_0 = custom_set_0.__contains__(bool_0)
    assert var_0 is True
    var_1 = custom_set_0.__eq__(set_0)
    assert var_1 is True
    var_2 = var_0.__eq__(var_1)
    assert var_2 is True
    var_3 = custom_set_0.add(bool_0)
    var_4 = var_0.__add__(set_0)
    var_3.issubset(bool_0)


def test_case_3():
    bool_0 = True
    tuple_0 = ()
    custom_set_0 = module_0.CustomSet()
    var_0 = custom_set_0.issubset(tuple_0)
    var_1 = var_0.__eq__(bool_0)


def test_case_4():
    custom_set_0 = module_0.CustomSet()
    custom_set_1 = module_0.CustomSet()
    custom_set_2 = custom_set_1.isdisjoint(custom_set_1)
    custom_set_3 = module_0.CustomSet()


@pytest.mark.xfail(strict=True)
def test_case_5():
    tuple_0 = ()
    custom_set_0 = module_0.CustomSet()
    var_0 = custom_set_0.issubset(tuple_0)
    custom_set_0.__eq__(var_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bool_0 = False
    custom_set_0 = module_0.CustomSet()
    var_0 = custom_set_0.__sub__(bool_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "example.CustomSet"
    assert var_0.elements == []
    var_1 = var_0.__sub__(bool_0)
    var_2 = custom_set_0.add(var_1)
    assert len(custom_set_0.elements) == 1
    var_3 = custom_set_0.intersection(var_0)
    assert f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "example.CustomSet"
    assert var_3.elements == []
    var_4 = var_3.isdisjoint(bool_0)
    assert var_4 is True
    var_2.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_7():
    none_type_0 = None
    str_0 = "$d)0:\\#Hb!=u"
    custom_set_0 = module_0.CustomSet(str_0)
    custom_set_0.intersection(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    bytes_0 = b"\n\xef\xf9"
    custom_set_0 = module_0.CustomSet(bytes_0)
    var_0 = custom_set_0.__sub__(custom_set_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "example.CustomSet"
    assert var_0.elements == []
    var_1 = var_0.__sub__(var_0)
    assert var_1.elements == []
    var_2 = var_0.intersection(var_1)
    assert f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "example.CustomSet"
    assert var_2.elements == []
    var_3 = custom_set_0.intersection(var_2)
    assert var_3.elements == []
    var_4 = custom_set_0.intersection(var_2)
    assert var_4.elements == []
    var_5 = var_1.isdisjoint(var_4)
    assert var_5 is True
    var_5.__iter__()


def test_case_9():
    custom_set_0 = module_0.CustomSet()
    custom_set_1 = module_0.CustomSet()
    var_0 = custom_set_0.isempty()
    assert var_0 is True
    var_1 = custom_set_0.__sub__(custom_set_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "example.CustomSet"
    assert var_1.elements == []


@pytest.mark.xfail(strict=True)
def test_case_10():
    int_0 = -1267
    str_0 = "2V"
    custom_set_0 = module_0.CustomSet()
    var_0 = custom_set_0.__add__(str_0)
    assert var_0.elements == ["2", "V"]
    var_0.__sub__(int_0)


def test_case_11():
    bool_0 = False
    custom_set_0 = module_0.CustomSet()
    var_0 = custom_set_0.__sub__(bool_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "example.CustomSet"
    assert var_0.elements == []
    var_1 = var_0.__sub__(bool_0)
    var_2 = var_1.intersection(bool_0)
    assert f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "example.CustomSet"
    assert var_2.elements == []
    var_3 = custom_set_0.intersection(var_0)
    var_4 = var_3.isdisjoint(bool_0)
    var_5 = var_2.__iter__()
    var_6 = var_1.__sub__(var_2)
    bool_1 = True
    var_7 = custom_set_0.isdisjoint(bool_1)
    var_8 = var_1.__add__(var_0)
    assert f"{type(var_8).__module__}.{type(var_8).__qualname__}" == "example.CustomSet"
    assert var_8.elements == []


@pytest.mark.xfail(strict=True)
def test_case_12():
    none_type_0 = None
    str_0 = "$d)0:\\#Hb!=u"
    custom_set_0 = module_0.CustomSet(str_0)
    custom_set_0.isdisjoint(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_13():
    int_0 = -1267
    str_0 = "2V"
    custom_set_0 = module_0.CustomSet()
    var_0 = custom_set_0.__add__(str_0)
    assert var_0.elements == ["2", "V"]
    var_1 = var_0.__eq__(custom_set_0)
    assert var_1 is False
    var_1.issubset(int_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    bool_0 = False
    custom_set_0 = module_0.CustomSet()
    var_0 = custom_set_0.__sub__(bool_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "example.CustomSet"
    assert var_0.elements == []
    var_1 = var_0.__sub__(bool_0)
    var_2 = var_0.add(var_1)
    assert len(var_0.elements) == 1
    var_3 = var_0.__sub__(var_1)
    assert len(var_3.elements) == 1
    var_2.issubset(var_0)


@pytest.mark.xfail(strict=True)
def test_case_15():
    bool_0 = False
    custom_set_0 = module_0.CustomSet()
    var_0 = bool_0.__sub__(bool_0)
    var_1 = custom_set_0.add(var_0)
    assert custom_set_0.elements == [0]
    var_2 = custom_set_0.intersection(custom_set_0)
    assert f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "example.CustomSet"
    assert var_2.elements == [0]
    var_1.isdisjoint(var_1)
