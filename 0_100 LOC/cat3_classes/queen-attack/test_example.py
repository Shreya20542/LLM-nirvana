# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import example as module_0


def test_case_0():
    none_type_0 = None
    int_0 = -1704
    with pytest.raises(ValueError):
        module_0.Queen(int_0, none_type_0)


def test_case_1():
    bool_0 = True
    queen_0 = module_0.Queen(bool_0, bool_0)
    assert f"{type(queen_0).__module__}.{type(queen_0).__qualname__}" == "example.Queen"
    assert queen_0.row is True
    assert queen_0.column is True


def test_case_2():
    bool_0 = False
    queen_0 = module_0.Queen(bool_0, bool_0)
    assert f"{type(queen_0).__module__}.{type(queen_0).__qualname__}" == "example.Queen"
    assert queen_0.row is False
    assert queen_0.column is False
    float_0 = 2496.91205
    with pytest.raises(ValueError):
        module_0.Queen(float_0, float_0)


def test_case_3():
    bool_0 = True
    queen_0 = module_0.Queen(bool_0, bool_0)
    assert f"{type(queen_0).__module__}.{type(queen_0).__qualname__}" == "example.Queen"
    assert queen_0.row is True
    assert queen_0.column is True
    with pytest.raises(ValueError):
        queen_0.can_attack(queen_0)


def test_case_4():
    float_0 = -988.2
    bool_0 = True
    with pytest.raises(ValueError):
        module_0.Queen(bool_0, float_0)


def test_case_5():
    bool_0 = False
    float_0 = 587.47
    with pytest.raises(ValueError):
        module_0.Queen(bool_0, float_0)


def test_case_6():
    bool_0 = False
    bool_1 = True
    queen_0 = module_0.Queen(bool_0, bool_1)
    assert f"{type(queen_0).__module__}.{type(queen_0).__qualname__}" == "example.Queen"
    assert queen_0.row is False
    assert queen_0.column is True
    queen_1 = module_0.Queen(bool_1, bool_1)
    assert f"{type(queen_1).__module__}.{type(queen_1).__qualname__}" == "example.Queen"
    assert queen_1.row is True
    assert queen_1.column is True
    var_0 = queen_1.can_attack(queen_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_7():
    bool_0 = False
    bool_1 = True
    queen_0 = module_0.Queen(bool_0, bool_1)
    assert f"{type(queen_0).__module__}.{type(queen_0).__qualname__}" == "example.Queen"
    assert queen_0.row is False
    assert queen_0.column is True
    queen_1 = module_0.Queen(bool_0, bool_0)
    assert f"{type(queen_1).__module__}.{type(queen_1).__qualname__}" == "example.Queen"
    assert queen_1.row is False
    assert queen_1.column is False
    var_0 = queen_1.can_attack(queen_0)
    assert var_0 is True
    bool_1.can_attack(var_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    bool_0 = False
    bool_1 = True
    queen_0 = module_0.Queen(bool_0, bool_1)
    assert f"{type(queen_0).__module__}.{type(queen_0).__qualname__}" == "example.Queen"
    assert queen_0.row is False
    assert queen_0.column is True
    queen_1 = module_0.Queen(bool_0, bool_0)
    assert f"{type(queen_1).__module__}.{type(queen_1).__qualname__}" == "example.Queen"
    assert queen_1.row is False
    assert queen_1.column is False
    queen_2 = module_0.Queen(bool_1, bool_1)
    assert f"{type(queen_2).__module__}.{type(queen_2).__qualname__}" == "example.Queen"
    assert queen_2.row is True
    assert queen_2.column is True
    var_0 = queen_2.can_attack(queen_1)
    assert var_0 is True
    var_1 = queen_0.can_attack(queen_2)
    assert var_1 is True
    queen_3 = module_0.Queen(var_0, var_0)
    assert queen_3.row is True
    assert queen_3.column is True
    module_0.Queen(queen_3, queen_1)
