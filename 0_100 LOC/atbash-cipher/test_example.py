# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import example as module_0
import builtins as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    bytes_0 = b"\xf7!"
    module_0.base_trans(bytes_0)


def test_case_1():
    set_0 = set()
    var_0 = module_0.decode(set_0)
    assert var_0 == ""
    assert module_0.BLOCK_SIZE == 5
    assert module_0.trtbl == {
        97: 122,
        98: 121,
        99: 120,
        100: 119,
        101: 118,
        102: 117,
        103: 116,
        104: 115,
        105: 114,
        106: 113,
        107: 112,
        108: 111,
        109: 110,
        110: 109,
        111: 108,
        112: 107,
        113: 106,
        114: 105,
        115: 104,
        116: 103,
        117: 102,
        118: 101,
        119: 100,
        120: 99,
        121: 98,
        122: 97,
    }


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = ")]8Bm!P|*3=XIP"
    var_0 = module_0.encode(str_0)
    assert var_0 == "8ynk3 crk"
    assert module_0.BLOCK_SIZE == 5
    assert module_0.trtbl == {
        97: 122,
        98: 121,
        99: 120,
        100: 119,
        101: 118,
        102: 117,
        103: 116,
        104: 115,
        105: 114,
        106: 113,
        107: 112,
        108: 111,
        109: 110,
        110: 109,
        111: 108,
        112: 107,
        113: 106,
        114: 105,
        115: 104,
        116: 103,
        117: 102,
        118: 101,
        119: 100,
        120: 99,
        121: 98,
        122: 97,
    }
    list_0 = [var_0, str_0, var_0]
    module_1.object(*list_0, **var_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    module_0.encode(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    complex_0 = -3863.4 + 1867.147j
    list_0 = [complex_0]
    module_0.decode(list_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = "J'?^8\\\tF{_nd"
    int_0 = -1640
    bool_0 = True
    tuple_0 = (str_0, int_0, bool_0)
    module_0.base_trans(tuple_0)
