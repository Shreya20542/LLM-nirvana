# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import example as module_0


def test_case_0():
    str_0 = 'A#$d@Z:Y?" '
    var_0 = module_0.parse(str_0)
    assert var_0 == '<p>A#$d@Z:Y?" </p>'


@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    module_0.parse(none_type_0)


def test_case_2():
    str_0 = "A#$d@Z\r:Y?p "
    var_0 = module_0.parse_line(str_0, str_0, str_0)


def test_case_3():
    str_0 = ":u.sw`H_w_{Ugb"
    var_0 = module_0.parse(str_0)
    assert var_0 == "<p>:u.sw`H<em>w</em>{Ugb</p>"


def test_case_4():
    str_0 = "u7s\n\n`H__U_'_>\x0cg"
    var_0 = module_0.parse(str_0)
    assert var_0 == "<p>u7s</p><p></p><p>`H<em></em>U<em>'</em>>\x0cg</p>"


def test_case_5():
    str_0 = "u7s\n\n`H__U__>\x0cg"
    var_0 = module_0.parse(str_0)
    assert var_0 == "<p>u7s</p><p></p><p>`H<strong>U</strong>>\x0cg</p>"


def test_case_6():
    str_0 = 'A#$d@Z:Y?" '
    var_0 = module_0.check_headers(str_0)
    assert var_0 == 'A#$d@Z:Y?" '
    var_1 = var_0.__dir__()
    var_2 = module_0.parse(str_0)
    assert var_2 == '<p>A#$d@Z:Y?" </p>'
    tuple_0 = ()
    var_3 = module_0.wrap(var_1, tuple_0)
    assert (
        var_3
        == "<()>['__new__', '__repr__', '__hash__', '__str__', '__getattribute__', '__lt__', '__le__', '__eq__', '__ne__', '__gt__', '__ge__', '__iter__', '__mod__', '__rmod__', '__len__', '__getitem__', '__add__', '__mul__', '__rmul__', '__contains__', 'encode', 'replace', 'split', 'rsplit', 'join', 'capitalize', 'casefold', 'title', 'center', 'count', 'expandtabs', 'find', 'partition', 'index', 'ljust', 'lower', 'lstrip', 'rfind', 'rindex', 'rjust', 'rstrip', 'rpartition', 'splitlines', 'strip', 'swapcase', 'translate', 'upper', 'startswith', 'endswith', 'removeprefix', 'removesuffix', 'isascii', 'islower', 'isupper', 'istitle', 'isspace', 'isdecimal', 'isdigit', 'isnumeric', 'isalpha', 'isalnum', 'isidentifier', 'isprintable', 'zfill', 'format', 'format_map', '__format__', 'maketrans', '__sizeof__', '__getnewargs__', '__doc__', '__setattr__', '__delattr__', '__init__', '__reduce_ex__', '__reduce__', '__subclasshook__', '__init_subclass__', '__dir__', '__class__']</()>"
    )
    var_4 = module_0.parse_line(var_3, var_2, str_0)
    var_5 = var_1.__dir__()


def test_case_7():
    str_0 = "* G%dK'yj3-;\\XW>#r"
    var_0 = module_0.parse(str_0)
    assert var_0 == "<ul><li>G%dK'yj3-;\\XW>#r</li></ul>"


def test_case_8():
    str_0 = "* G%dK'yj3-;\\XW>#r"
    var_0 = module_0.parse_line(str_0, str_0, str_0)


def test_case_9():
    str_0 = "# \nCx\t k8LKA=}X3o+\\"
    var_0 = module_0.parse(str_0)
    assert var_0 == "<h1></h1><p>Cx\t k8LKA=}X3o+\\</p>"
