# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import example as module_0
import builtins as module_1


def test_case_0():
    bool_0 = False
    var_0 = module_0.is_iterable(bool_0)
    assert var_0 is False


def test_case_1():
    bytes_0 = b"\xc1\xf7\xce`\x08"
    var_0 = module_0.flatten(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = "O$/RHEq 1FDS1yvN>s "
    var_0 = module_0.flatten(str_0)
    bytes_0 = b""
    var_1 = module_0.flatten(bytes_0)
    none_type_0 = None
    module_0.flatten(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    var_0 = module_0.is_iterable(bool_0)
    assert var_0 is False
    tuple_0 = (bool_0, bool_0, set_0)
    list_0 = [tuple_0, tuple_0, set_0]
    var_1 = module_0.flatten(list_0)
    str_0 = "$ra#rC]aN%- +KzJi"
    var_2 = module_0.flatten(str_0)
    var_3 = module_0.is_iterable(str_0)
    var_4 = module_0.flatten(var_2)
    none_type_0 = None
    var_5 = module_0.is_iterable(none_type_0)
    assert var_5 is False
    module_0.flatten(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    var_0 = module_0.is_iterable(none_type_0)
    assert var_0 is False
    set_0 = {none_type_0, none_type_0}
    tuple_0 = (var_0, var_0, set_0)
    list_0 = [tuple_0, tuple_0, set_0]
    var_1 = module_1.object()
    str_0 = "$ra#rC]aN%- +KzJi"
    var_2 = module_0.flatten(str_0)
    var_3 = module_0.is_iterable(str_0)
    var_4 = module_0.flatten(list_0)
    var_5 = module_0.is_iterable(set_0)
    module_0.flatten(var_0)
